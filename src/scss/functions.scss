@mixin fillParent {
    width: 100%;
    height: 100%;
    position: relative;
}

@mixin seccionTitle {
    color: $color-white;
    font-family: $font-zona-pro;
    font-size: 2.5rem;
}

@mixin ellipsis {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin ellipsisMultiline($lines) {
    -webkit-line-clamp: $lines;
    overflow: hidden;
    display: -webkit-box;
    text-overflow: ellipsis;
    -webkit-box-orient: vertical;
    white-space: normal;
}

@mixin animationHack {
    -webkit-backface-visibility: hidden;
    -webkit-perspective: 1000; // -webkit-transform: translate3d(0,0,0);
    /* or */
    // -webkit-transform: translateZ(0);
    // transition: none !important;
}

@function pxToVw($size-in-px) {
    @return (($size-in-px / 9.6) + vw);
}

@function pxToVh($size-in-px) {
    @return (($size-in-px / 5.4) + vh);
}

@function pxToEm($font-size-in-px) {
    @return (($font-size-in-px / 10.8) + em);
}

@function pxToEmZeplinX2($font-size-in-px) {
    @return (($font-size-in-px / 5.4) + em);
}

/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
    @if type-of($number)=='number' and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }
    @if type-of($number)=="string" {
        $cut: str-length($number);
        @return str-slice($number, 1, $cut - 2);
    }
    @return 5;
}

///
/// Casts a string into a number
///
/// @param {String | Number} $value - Value to be parsed
///
/// @return {Number}
///
@function to-number($value) {
    @if type-of($value)=='number' {
        @return $value;
    }
    @else if type-of($value) !='string' {
        $_: log('Value for `to-number` should be a number or a string.');
    }
    $result: 0;
    $digits: 0;
    $minus: str-slice($value, 1, 1)=='-';
    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
    @for $i from if($minus, 2, 1) through str-length($value) {
        $character: str-slice($value, $i, $i);
        @if not (index(map-keys($numbers), $character) or $character=='.') {
            @return to-length(if($minus, -$result, $result), str-slice($value, $i))
        }
        @if $character=='.' {
            $digits: 1;
        }
        @else if $digits==0 {
            $result: $result * 10 + map-get($numbers, $character);
        }
        @else {
            $digits: $digits * 10;
            $result: $result + map-get($numbers, $character) / $digits;
        }
    }
    @return if($minus, -$result, $result);
    ;
}

///
/// Add `$unit` to `$value`
///
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
///
/// @return {Number} - `$value` expressed in `$unit`
///
@function to-length($value, $unit) {
    $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);
    @if not index(map-keys($units), $unit) {
        $_: log('Invalid unit `#{$unit}`.');
    }
    @return $value * map-get($units, $unit);
}