(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["front"] = factory();
	else
		root["DiveSDK"] = root["DiveSDK"] || {}, root["DiveSDK"]["front"] = factory();
})(this, function() {
return webpackJsonpDiveSDK__name_([0],{

/***/ 17:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

function __export(m) {
    for (var p in m) {
        if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(523));
__export(__webpack_require__(524));

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "index.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 20:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

function __export(m) {
    for (var p in m) {
        if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(614));
__export(__webpack_require__(615));
__export(__webpack_require__(616));
__export(__webpack_require__(617));
__export(__webpack_require__(618));
__export(__webpack_require__(619));
__export(__webpack_require__(620));
__export(__webpack_require__(621));
__export(__webpack_require__(622));
__export(__webpack_require__(623));
__export(__webpack_require__(624));

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "index.ts" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 266:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var environment = "PRE";
var enableRollbar = false;
exports.SESSION_STORAGE_KEY = 'DiveState';
exports.DIVE_ENVIRONMENT = environment;
exports.ENABLE_ROLLBAR = enableRollbar;
exports.SUPPORTED_CARD_TYPES = ["movie", "serie", "person", "character", "vehicle", "fashion", "location", "historic", "trivia", "quote", "ost", "home", "technology", "art", "song", "weapon", "leisure_sport", "health_beauty", "food_drink", "fauna_flora", "business", "reference", "chapter"];

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "constants.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 267:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

function __export(m) {
    for (var p in m) {
        if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(527));
__export(__webpack_require__(551));
__export(__webpack_require__(552));
__export(__webpack_require__(625));
__export(__webpack_require__(626));
__export(__webpack_require__(627));
__export(__webpack_require__(628));
__export(__webpack_require__(629));
__export(__webpack_require__(630));

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "index.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 276:
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 31);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(42);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(41)))

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Expose `Emitter`.
 */

if (true) {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Module dependencies.
 */

var keys = __webpack_require__(52);
var hasBinary = __webpack_require__(16);
var sliceBuffer = __webpack_require__(53);
var after = __webpack_require__(54);
var utf8 = __webpack_require__(55);

var base64encoder;
if (global && global.ArrayBuffer) {
  base64encoder = __webpack_require__(56);
}

/**
 * Check if we are running an android browser. That requires us to use
 * ArrayBuffer with polling transports...
 *
 * http://ghinda.net/jpeg-blob-ajax-android/
 */

var isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);

/**
 * Check if we are running in PhantomJS.
 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
 * https://github.com/ariya/phantomjs/issues/11395
 * @type boolean
 */
var isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);

/**
 * When true, avoids using Blobs to encode payloads.
 * @type boolean
 */
var dontSendBlobs = isAndroid || isPhantomJS;

/**
 * Current protocol version.
 */

exports.protocol = 3;

/**
 * Packet types.
 */

var packets = exports.packets = {
    open:     0    // non-ws
  , close:    1    // non-ws
  , ping:     2
  , pong:     3
  , message:  4
  , upgrade:  5
  , noop:     6
};

var packetslist = keys(packets);

/**
 * Premade error packet.
 */

var err = { type: 'error', data: 'parser error' };

/**
 * Create a blob api even for blob builder when vendor prefixes exist
 */

var Blob = __webpack_require__(57);

/**
 * Encodes a packet.
 *
 *     <packet type id> [ <data> ]
 *
 * Example:
 *
 *     5hello world
 *     3
 *     4
 *
 * Binary is encoded in an identical principle
 *
 * @api private
 */

exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
  if (typeof supportsBinary === 'function') {
    callback = supportsBinary;
    supportsBinary = false;
  }

  if (typeof utf8encode === 'function') {
    callback = utf8encode;
    utf8encode = null;
  }

  var data = (packet.data === undefined)
    ? undefined
    : packet.data.buffer || packet.data;

  if (global.ArrayBuffer && data instanceof ArrayBuffer) {
    return encodeArrayBuffer(packet, supportsBinary, callback);
  } else if (Blob && data instanceof global.Blob) {
    return encodeBlob(packet, supportsBinary, callback);
  }

  // might be an object with { base64: true, data: dataAsBase64String }
  if (data && data.base64) {
    return encodeBase64Object(packet, callback);
  }

  // Sending data as a utf-8 string
  var encoded = packets[packet.type];

  // data fragment is optional
  if (undefined !== packet.data) {
    encoded += utf8encode ? utf8.encode(String(packet.data), { strict: false }) : String(packet.data);
  }

  return callback('' + encoded);

};

function encodeBase64Object(packet, callback) {
  // packet data is an object { base64: true, data: dataAsBase64String }
  var message = 'b' + exports.packets[packet.type] + packet.data.data;
  return callback(message);
}

/**
 * Encode packet helpers for binary types
 */

function encodeArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var data = packet.data;
  var contentArray = new Uint8Array(data);
  var resultBuffer = new Uint8Array(1 + data.byteLength);

  resultBuffer[0] = packets[packet.type];
  for (var i = 0; i < contentArray.length; i++) {
    resultBuffer[i+1] = contentArray[i];
  }

  return callback(resultBuffer.buffer);
}

function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var fr = new FileReader();
  fr.onload = function() {
    packet.data = fr.result;
    exports.encodePacket(packet, supportsBinary, true, callback);
  };
  return fr.readAsArrayBuffer(packet.data);
}

function encodeBlob(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  if (dontSendBlobs) {
    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
  }

  var length = new Uint8Array(1);
  length[0] = packets[packet.type];
  var blob = new Blob([length.buffer, packet.data]);

  return callback(blob);
}

/**
 * Encodes a packet with binary data in a base64 string
 *
 * @param {Object} packet, has `type` and `data`
 * @return {String} base64 encoded message
 */

exports.encodeBase64Packet = function(packet, callback) {
  var message = 'b' + exports.packets[packet.type];
  if (Blob && packet.data instanceof global.Blob) {
    var fr = new FileReader();
    fr.onload = function() {
      var b64 = fr.result.split(',')[1];
      callback(message + b64);
    };
    return fr.readAsDataURL(packet.data);
  }

  var b64data;
  try {
    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
  } catch (e) {
    // iPhone Safari doesn't let you apply with typed arrays
    var typed = new Uint8Array(packet.data);
    var basic = new Array(typed.length);
    for (var i = 0; i < typed.length; i++) {
      basic[i] = typed[i];
    }
    b64data = String.fromCharCode.apply(null, basic);
  }
  message += global.btoa(b64data);
  return callback(message);
};

/**
 * Decodes a packet. Changes format to Blob if requested.
 *
 * @return {Object} with `type` and `data` (if any)
 * @api private
 */

exports.decodePacket = function (data, binaryType, utf8decode) {
  if (data === undefined) {
    return err;
  }
  // String data
  if (typeof data === 'string') {
    if (data.charAt(0) === 'b') {
      return exports.decodeBase64Packet(data.substr(1), binaryType);
    }

    if (utf8decode) {
      data = tryDecode(data);
      if (data === false) {
        return err;
      }
    }
    var type = data.charAt(0);

    if (Number(type) != type || !packetslist[type]) {
      return err;
    }

    if (data.length > 1) {
      return { type: packetslist[type], data: data.substring(1) };
    } else {
      return { type: packetslist[type] };
    }
  }

  var asArray = new Uint8Array(data);
  var type = asArray[0];
  var rest = sliceBuffer(data, 1);
  if (Blob && binaryType === 'blob') {
    rest = new Blob([rest]);
  }
  return { type: packetslist[type], data: rest };
};

function tryDecode(data) {
  try {
    data = utf8.decode(data, { strict: false });
  } catch (e) {
    return false;
  }
  return data;
}

/**
 * Decodes a packet encoded in a base64 string
 *
 * @param {String} base64 encoded message
 * @return {Object} with `type` and `data` (if any)
 */

exports.decodeBase64Packet = function(msg, binaryType) {
  var type = packetslist[msg.charAt(0)];
  if (!base64encoder) {
    return { type: type, data: { base64: true, data: msg.substr(1) } };
  }

  var data = base64encoder.decode(msg.substr(1));

  if (binaryType === 'blob' && Blob) {
    data = new Blob([data]);
  }

  return { type: type, data: data };
};

/**
 * Encodes multiple messages (payload).
 *
 *     <length>:data
 *
 * Example:
 *
 *     11:hello world2:hi
 *
 * If any contents are binary, they will be encoded as base64 strings. Base64
 * encoded strings are marked with a b before the length specifier
 *
 * @param {Array} packets
 * @api private
 */

exports.encodePayload = function (packets, supportsBinary, callback) {
  if (typeof supportsBinary === 'function') {
    callback = supportsBinary;
    supportsBinary = null;
  }

  var isBinary = hasBinary(packets);

  if (supportsBinary && isBinary) {
    if (Blob && !dontSendBlobs) {
      return exports.encodePayloadAsBlob(packets, callback);
    }

    return exports.encodePayloadAsArrayBuffer(packets, callback);
  }

  if (!packets.length) {
    return callback('0:');
  }

  function setLengthHeader(message) {
    return message.length + ':' + message;
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, !isBinary ? false : supportsBinary, false, function(message) {
      doneCallback(null, setLengthHeader(message));
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(results.join(''));
  });
};

/**
 * Async array map using after
 */

function map(ary, each, done) {
  var result = new Array(ary.length);
  var next = after(ary.length, done);

  var eachWithIndex = function(i, el, cb) {
    each(el, function(error, msg) {
      result[i] = msg;
      cb(error, result);
    });
  };

  for (var i = 0; i < ary.length; i++) {
    eachWithIndex(i, ary[i], next);
  }
}

/*
 * Decodes data when a payload is maybe expected. Possible binary contents are
 * decoded from their base64 representation
 *
 * @param {String} data, callback method
 * @api public
 */

exports.decodePayload = function (data, binaryType, callback) {
  if (typeof data !== 'string') {
    return exports.decodePayloadAsBinary(data, binaryType, callback);
  }

  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var packet;
  if (data === '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

  var length = '', n, msg;

  for (var i = 0, l = data.length; i < l; i++) {
    var chr = data.charAt(i);

    if (chr !== ':') {
      length += chr;
      continue;
    }

    if (length === '' || (length != (n = Number(length)))) {
      // parser error - ignoring payload
      return callback(err, 0, 1);
    }

    msg = data.substr(i + 1, n);

    if (length != msg.length) {
      // parser error - ignoring payload
      return callback(err, 0, 1);
    }

    if (msg.length) {
      packet = exports.decodePacket(msg, binaryType, false);

      if (err.type === packet.type && err.data === packet.data) {
        // parser error in individual packet - ignoring payload
        return callback(err, 0, 1);
      }

      var ret = callback(packet, i + n, l);
      if (false === ret) return;
    }

    // advance cursor
    i += n;
    length = '';
  }

  if (length !== '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

};

/**
 * Encodes multiple messages (payload) as binary.
 *
 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
 * 255><data>
 *
 * Example:
 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
 *
 * @param {Array} packets
 * @return {ArrayBuffer} encoded payload
 * @api private
 */

exports.encodePayloadAsArrayBuffer = function(packets, callback) {
  if (!packets.length) {
    return callback(new ArrayBuffer(0));
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(data) {
      return doneCallback(null, data);
    });
  }

  map(packets, encodeOne, function(err, encodedPackets) {
    var totalLength = encodedPackets.reduce(function(acc, p) {
      var len;
      if (typeof p === 'string'){
        len = p.length;
      } else {
        len = p.byteLength;
      }
      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
    }, 0);

    var resultArray = new Uint8Array(totalLength);

    var bufferIndex = 0;
    encodedPackets.forEach(function(p) {
      var isString = typeof p === 'string';
      var ab = p;
      if (isString) {
        var view = new Uint8Array(p.length);
        for (var i = 0; i < p.length; i++) {
          view[i] = p.charCodeAt(i);
        }
        ab = view.buffer;
      }

      if (isString) { // not true binary
        resultArray[bufferIndex++] = 0;
      } else { // true binary
        resultArray[bufferIndex++] = 1;
      }

      var lenStr = ab.byteLength.toString();
      for (var i = 0; i < lenStr.length; i++) {
        resultArray[bufferIndex++] = parseInt(lenStr[i]);
      }
      resultArray[bufferIndex++] = 255;

      var view = new Uint8Array(ab);
      for (var i = 0; i < view.length; i++) {
        resultArray[bufferIndex++] = view[i];
      }
    });

    return callback(resultArray.buffer);
  });
};

/**
 * Encode as Blob
 */

exports.encodePayloadAsBlob = function(packets, callback) {
  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(encoded) {
      var binaryIdentifier = new Uint8Array(1);
      binaryIdentifier[0] = 1;
      if (typeof encoded === 'string') {
        var view = new Uint8Array(encoded.length);
        for (var i = 0; i < encoded.length; i++) {
          view[i] = encoded.charCodeAt(i);
        }
        encoded = view.buffer;
        binaryIdentifier[0] = 0;
      }

      var len = (encoded instanceof ArrayBuffer)
        ? encoded.byteLength
        : encoded.size;

      var lenStr = len.toString();
      var lengthAry = new Uint8Array(lenStr.length + 1);
      for (var i = 0; i < lenStr.length; i++) {
        lengthAry[i] = parseInt(lenStr[i]);
      }
      lengthAry[lenStr.length] = 255;

      if (Blob) {
        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
        doneCallback(null, blob);
      }
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(new Blob(results));
  });
};

/*
 * Decodes data when a payload is maybe expected. Strings are decoded by
 * interpreting each byte as a key code for entries marked to start with 0. See
 * description of encodePayloadAsBinary
 *
 * @param {ArrayBuffer} data, callback method
 * @api public
 */

exports.decodePayloadAsBinary = function (data, binaryType, callback) {
  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var bufferTail = data;
  var buffers = [];

  while (bufferTail.byteLength > 0) {
    var tailArray = new Uint8Array(bufferTail);
    var isString = tailArray[0] === 0;
    var msgLength = '';

    for (var i = 1; ; i++) {
      if (tailArray[i] === 255) break;

      // 310 = char length of Number.MAX_VALUE
      if (msgLength.length > 310) {
        return callback(err, 0, 1);
      }

      msgLength += tailArray[i];
    }

    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
    msgLength = parseInt(msgLength);

    var msg = sliceBuffer(bufferTail, 0, msgLength);
    if (isString) {
      try {
        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
      } catch (e) {
        // iPhone Safari doesn't let you apply to typed arrays
        var typed = new Uint8Array(msg);
        msg = '';
        for (var i = 0; i < typed.length; i++) {
          msg += String.fromCharCode(typed[i]);
        }
      }
    }

    buffers.push(msg);
    bufferTail = sliceBuffer(bufferTail, msgLength);
  }

  var total = buffers.length;
  buffers.forEach(function(buffer, i) {
    callback(exports.decodePacket(buffer, binaryType, true), i, total);
  });
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 4 */
/***/ (function(module, exports) {

/**
 * Compiles a querystring
 * Returns string representation of the object
 *
 * @param {Object}
 * @api private
 */

exports.encode = function (obj) {
  var str = '';

  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      if (str.length) str += '&';
      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
    }
  }

  return str;
};

/**
 * Parses a simple querystring into an object
 *
 * @param {String} qs
 * @api private
 */

exports.decode = function(qs){
  var qry = {};
  var pairs = qs.split('&');
  for (var i = 0, l = pairs.length; i < l; i++) {
    var pair = pairs[i].split('=');
    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
  }
  return qry;
};


/***/ }),
/* 5 */
/***/ (function(module, exports) {


module.exports = function(a, b){
  var fn = function(){};
  fn.prototype = b.prototype;
  a.prototype = new fn;
  a.prototype.constructor = a;
};

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var debug = __webpack_require__(1)('socket.io-parser');
var Emitter = __webpack_require__(2);
var hasBin = __webpack_require__(16);
var binary = __webpack_require__(45);
var isBuf = __webpack_require__(17);

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = 4;

/**
 * Packet types.
 *
 * @api public
 */

exports.types = [
  'CONNECT',
  'DISCONNECT',
  'EVENT',
  'ACK',
  'ERROR',
  'BINARY_EVENT',
  'BINARY_ACK'
];

/**
 * Packet type `connect`.
 *
 * @api public
 */

exports.CONNECT = 0;

/**
 * Packet type `disconnect`.
 *
 * @api public
 */

exports.DISCONNECT = 1;

/**
 * Packet type `event`.
 *
 * @api public
 */

exports.EVENT = 2;

/**
 * Packet type `ack`.
 *
 * @api public
 */

exports.ACK = 3;

/**
 * Packet type `error`.
 *
 * @api public
 */

exports.ERROR = 4;

/**
 * Packet type 'binary event'
 *
 * @api public
 */

exports.BINARY_EVENT = 5;

/**
 * Packet type `binary ack`. For acks with binary arguments.
 *
 * @api public
 */

exports.BINARY_ACK = 6;

/**
 * Encoder constructor.
 *
 * @api public
 */

exports.Encoder = Encoder;

/**
 * Decoder constructor.
 *
 * @api public
 */

exports.Decoder = Decoder;

/**
 * A socket.io Encoder instance
 *
 * @api public
 */

function Encoder() {}

/**
 * Encode a packet as a single string if non-binary, or as a
 * buffer sequence, depending on packet type.
 *
 * @param {Object} obj - packet object
 * @param {Function} callback - function to handle encodings (likely engine.write)
 * @return Calls callback with Array of encodings
 * @api public
 */

Encoder.prototype.encode = function(obj, callback){
  if ((obj.type === exports.EVENT || obj.type === exports.ACK) && hasBin(obj.data)) {
    obj.type = obj.type === exports.EVENT ? exports.BINARY_EVENT : exports.BINARY_ACK;
  }

  debug('encoding packet %j', obj);

  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
    encodeAsBinary(obj, callback);
  }
  else {
    var encoding = encodeAsString(obj);
    callback([encoding]);
  }
};

/**
 * Encode packet as string.
 *
 * @param {Object} packet
 * @return {String} encoded
 * @api private
 */

function encodeAsString(obj) {

  // first is type
  var str = '' + obj.type;

  // attachments if we have them
  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
    str += obj.attachments + '-';
  }

  // if we have a namespace other than `/`
  // we append it followed by a comma `,`
  if (obj.nsp && '/' !== obj.nsp) {
    str += obj.nsp + ',';
  }

  // immediately followed by the id
  if (null != obj.id) {
    str += obj.id;
  }

  // json data
  if (null != obj.data) {
    str += JSON.stringify(obj.data);
  }

  debug('encoded %j as %s', obj, str);
  return str;
}

/**
 * Encode packet as 'buffer sequence' by removing blobs, and
 * deconstructing packet into object with placeholders and
 * a list of buffers.
 *
 * @param {Object} packet
 * @return {Buffer} encoded
 * @api private
 */

function encodeAsBinary(obj, callback) {

  function writeEncoding(bloblessData) {
    var deconstruction = binary.deconstructPacket(bloblessData);
    var pack = encodeAsString(deconstruction.packet);
    var buffers = deconstruction.buffers;

    buffers.unshift(pack); // add packet info to beginning of data list
    callback(buffers); // write all the buffers
  }

  binary.removeBlobs(obj, writeEncoding);
}

/**
 * A socket.io Decoder instance
 *
 * @return {Object} decoder
 * @api public
 */

function Decoder() {
  this.reconstructor = null;
}

/**
 * Mix in `Emitter` with Decoder.
 */

Emitter(Decoder.prototype);

/**
 * Decodes an ecoded packet string into packet JSON.
 *
 * @param {String} obj - encoded packet
 * @return {Object} packet
 * @api public
 */

Decoder.prototype.add = function(obj) {
  var packet;
  if (typeof obj === 'string') {
    packet = decodeString(obj);
    if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) { // binary packet's json
      this.reconstructor = new BinaryReconstructor(packet);

      // no attachments, labeled binary but no binary data to follow
      if (this.reconstructor.reconPack.attachments === 0) {
        this.emit('decoded', packet);
      }
    } else { // non-binary full packet
      this.emit('decoded', packet);
    }
  }
  else if (isBuf(obj) || obj.base64) { // raw binary data
    if (!this.reconstructor) {
      throw new Error('got binary data when not reconstructing a packet');
    } else {
      packet = this.reconstructor.takeBinaryData(obj);
      if (packet) { // received final buffer
        this.reconstructor = null;
        this.emit('decoded', packet);
      }
    }
  }
  else {
    throw new Error('Unknown type: ' + obj);
  }
};

/**
 * Decode a packet String (JSON data)
 *
 * @param {String} str
 * @return {Object} packet
 * @api private
 */

function decodeString(str) {
  var i = 0;
  // look up type
  var p = {
    type: Number(str.charAt(0))
  };

  if (null == exports.types[p.type]) return error();

  // look up attachments if type binary
  if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {
    var buf = '';
    while (str.charAt(++i) !== '-') {
      buf += str.charAt(i);
      if (i == str.length) break;
    }
    if (buf != Number(buf) || str.charAt(i) !== '-') {
      throw new Error('Illegal attachments');
    }
    p.attachments = Number(buf);
  }

  // look up namespace (if any)
  if ('/' === str.charAt(i + 1)) {
    p.nsp = '';
    while (++i) {
      var c = str.charAt(i);
      if (',' === c) break;
      p.nsp += c;
      if (i === str.length) break;
    }
  } else {
    p.nsp = '/';
  }

  // look up id
  var next = str.charAt(i + 1);
  if ('' !== next && Number(next) == next) {
    p.id = '';
    while (++i) {
      var c = str.charAt(i);
      if (null == c || Number(c) != c) {
        --i;
        break;
      }
      p.id += str.charAt(i);
      if (i === str.length) break;
    }
    p.id = Number(p.id);
  }

  // look up json data
  if (str.charAt(++i)) {
    p = tryParse(p, str.substr(i));
  }

  debug('decoded %s as %j', str, p);
  return p;
}

function tryParse(p, str) {
  try {
    p.data = JSON.parse(str);
  } catch(e){
    return error();
  }
  return p; 
}

/**
 * Deallocates a parser's resources
 *
 * @api public
 */

Decoder.prototype.destroy = function() {
  if (this.reconstructor) {
    this.reconstructor.finishedReconstruction();
  }
};

/**
 * A manager of a binary event's 'buffer sequence'. Should
 * be constructed whenever a packet of type BINARY_EVENT is
 * decoded.
 *
 * @param {Object} packet
 * @return {BinaryReconstructor} initialized reconstructor
 * @api private
 */

function BinaryReconstructor(packet) {
  this.reconPack = packet;
  this.buffers = [];
}

/**
 * Method to be called when binary data received from connection
 * after a BINARY_EVENT packet.
 *
 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
 * @return {null | Object} returns null if more binary data is expected or
 *   a reconstructed packet object if all buffers have been received.
 * @api private
 */

BinaryReconstructor.prototype.takeBinaryData = function(binData) {
  this.buffers.push(binData);
  if (this.buffers.length === this.reconPack.attachments) { // done with buffer list
    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
    this.finishedReconstruction();
    return packet;
  }
  return null;
};

/**
 * Cleans up binary packet reconstruction variables.
 *
 * @api private
 */

BinaryReconstructor.prototype.finishedReconstruction = function() {
  this.reconPack = null;
  this.buffers = [];
};

function error() {
  return {
    type: exports.ERROR,
    data: 'parser error'
  };
}


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {// browser shim for xmlhttprequest module

var hasCORS = __webpack_require__(50);

module.exports = function (opts) {
  var xdomain = opts.xdomain;

  // scheme must be same when usign XDomainRequest
  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
  var xscheme = opts.xscheme;

  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
  // https://github.com/Automattic/engine.io-client/pull/217
  var enablesXDR = opts.enablesXDR;

  // XMLHttpRequest can be disabled on IE
  try {
    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
      return new XMLHttpRequest();
    }
  } catch (e) { }

  // Use XDomainRequest for IE8 if enablesXDR is true
  // because loading bar keeps flashing when using jsonp-polling
  // https://github.com/yujiosaka/socke.io-ie8-loading-example
  try {
    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {
      return new XDomainRequest();
    }
  } catch (e) { }

  if (!xdomain) {
    try {
      return new global[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');
    } catch (e) { }
  }
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies.
 */

var parser = __webpack_require__(3);
var Emitter = __webpack_require__(2);

/**
 * Module exports.
 */

module.exports = Transport;

/**
 * Transport abstract constructor.
 *
 * @param {Object} options.
 * @api private
 */

function Transport (opts) {
  this.path = opts.path;
  this.hostname = opts.hostname;
  this.port = opts.port;
  this.secure = opts.secure;
  this.query = opts.query;
  this.timestampParam = opts.timestampParam;
  this.timestampRequests = opts.timestampRequests;
  this.readyState = '';
  this.agent = opts.agent || false;
  this.socket = opts.socket;
  this.enablesXDR = opts.enablesXDR;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;
  this.forceNode = opts.forceNode;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;
  this.localAddress = opts.localAddress;
}

/**
 * Mix in `Emitter`.
 */

Emitter(Transport.prototype);

/**
 * Emits an error.
 *
 * @param {String} str
 * @return {Transport} for chaining
 * @api public
 */

Transport.prototype.onError = function (msg, desc) {
  var err = new Error(msg);
  err.type = 'TransportError';
  err.description = desc;
  this.emit('error', err);
  return this;
};

/**
 * Opens the transport.
 *
 * @api public
 */

Transport.prototype.open = function () {
  if ('closed' === this.readyState || '' === this.readyState) {
    this.readyState = 'opening';
    this.doOpen();
  }

  return this;
};

/**
 * Closes the transport.
 *
 * @api private
 */

Transport.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.doClose();
    this.onClose();
  }

  return this;
};

/**
 * Sends multiple packets.
 *
 * @param {Array} packets
 * @api private
 */

Transport.prototype.send = function (packets) {
  if ('open' === this.readyState) {
    this.write(packets);
  } else {
    throw new Error('Transport not open');
  }
};

/**
 * Called upon open
 *
 * @api private
 */

Transport.prototype.onOpen = function () {
  this.readyState = 'open';
  this.writable = true;
  this.emit('open');
};

/**
 * Called with data.
 *
 * @param {String} data
 * @api private
 */

Transport.prototype.onData = function (data) {
  var packet = parser.decodePacket(data, this.socket.binaryType);
  this.onPacket(packet);
};

/**
 * Called with a decoded packet.
 */

Transport.prototype.onPacket = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon close.
 *
 * @api private
 */

Transport.prototype.onClose = function () {
  this.readyState = 'closed';
  this.emit('close');
};


/***/ }),
/* 9 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(12)(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 12 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(32);
exports.encode = exports.stringify = __webpack_require__(33);


/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 15 */
/***/ (function(module, exports) {

/**
 * Parses an URI
 *
 * @author Steven Levithan <stevenlevithan.com> (MIT license)
 * @api private
 */

var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

var parts = [
    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
];

module.exports = function parseuri(str) {
    var src = str,
        b = str.indexOf('['),
        e = str.indexOf(']');

    if (b != -1 && e != -1) {
        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
    }

    var m = re.exec(str || ''),
        uri = {},
        i = 14;

    while (i--) {
        uri[parts[i]] = m[i] || '';
    }

    if (b != -1 && e != -1) {
        uri.source = src;
        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
        uri.ipv6uri = true;
    }

    return uri;
};


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/* global Blob File */

/*
 * Module requirements.
 */

var isArray = __webpack_require__(44);

var toString = Object.prototype.toString;
var withNativeBlob = typeof global.Blob === 'function' || toString.call(global.Blob) === '[object BlobConstructor]';
var withNativeFile = typeof global.File === 'function' || toString.call(global.File) === '[object FileConstructor]';

/**
 * Module exports.
 */

module.exports = hasBinary;

/**
 * Checks for binary data.
 *
 * Supports Buffer, ArrayBuffer, Blob and File.
 *
 * @param {Object} anything
 * @api public
 */

function hasBinary (obj) {
  if (!obj || typeof obj !== 'object') {
    return false;
  }

  if (isArray(obj)) {
    for (var i = 0, l = obj.length; i < l; i++) {
      if (hasBinary(obj[i])) {
        return true;
      }
    }
    return false;
  }

  if ((typeof global.Buffer === 'function' && global.Buffer.isBuffer && global.Buffer.isBuffer(obj)) ||
     (typeof global.ArrayBuffer === 'function' && obj instanceof ArrayBuffer) ||
     (withNativeBlob && obj instanceof Blob) ||
     (withNativeFile && obj instanceof File)
    ) {
    return true;
  }

  // see: https://github.com/Automattic/has-binary/pull/4
  if (obj.toJSON && typeof obj.toJSON === 'function' && arguments.length === 1) {
    return hasBinary(obj.toJSON(), true);
  }

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
      return true;
    }
  }

  return false;
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
module.exports = isBuf;

/**
 * Returns true if obj is a buffer or an arraybuffer.
 *
 * @api private
 */

function isBuf(obj) {
  return (global.Buffer && global.Buffer.isBuffer(obj)) ||
         (global.ArrayBuffer && obj instanceof ArrayBuffer);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var eio = __webpack_require__(47);
var Socket = __webpack_require__(23);
var Emitter = __webpack_require__(2);
var parser = __webpack_require__(6);
var on = __webpack_require__(24);
var bind = __webpack_require__(25);
var debug = __webpack_require__(1)('socket.io-client:manager');
var indexOf = __webpack_require__(22);
var Backoff = __webpack_require__(63);

/**
 * IE6+ hasOwnProperty
 */

var has = Object.prototype.hasOwnProperty;

/**
 * Module exports
 */

module.exports = Manager;

/**
 * `Manager` constructor.
 *
 * @param {String} engine instance or engine uri/opts
 * @param {Object} options
 * @api public
 */

function Manager (uri, opts) {
  if (!(this instanceof Manager)) return new Manager(uri, opts);
  if (uri && ('object' === typeof uri)) {
    opts = uri;
    uri = undefined;
  }
  opts = opts || {};

  opts.path = opts.path || '/socket.io';
  this.nsps = {};
  this.subs = [];
  this.opts = opts;
  this.reconnection(opts.reconnection !== false);
  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
  this.reconnectionDelay(opts.reconnectionDelay || 1000);
  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
  this.randomizationFactor(opts.randomizationFactor || 0.5);
  this.backoff = new Backoff({
    min: this.reconnectionDelay(),
    max: this.reconnectionDelayMax(),
    jitter: this.randomizationFactor()
  });
  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
  this.readyState = 'closed';
  this.uri = uri;
  this.connecting = [];
  this.lastPing = null;
  this.encoding = false;
  this.packetBuffer = [];
  var _parser = opts.parser || parser;
  this.encoder = new _parser.Encoder();
  this.decoder = new _parser.Decoder();
  this.autoConnect = opts.autoConnect !== false;
  if (this.autoConnect) this.open();
}

/**
 * Propagate given event to sockets and emit on `this`
 *
 * @api private
 */

Manager.prototype.emitAll = function () {
  this.emit.apply(this, arguments);
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
    }
  }
};

/**
 * Update `socket.id` of all sockets
 *
 * @api private
 */

Manager.prototype.updateSocketIds = function () {
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].id = this.generateId(nsp);
    }
  }
};

/**
 * generate `socket.id` for the given `nsp`
 *
 * @param {String} nsp
 * @return {String}
 * @api private
 */

Manager.prototype.generateId = function (nsp) {
  return (nsp === '/' ? '' : (nsp + '#')) + this.engine.id;
};

/**
 * Mix in `Emitter`.
 */

Emitter(Manager.prototype);

/**
 * Sets the `reconnection` config.
 *
 * @param {Boolean} true/false if it should automatically reconnect
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnection = function (v) {
  if (!arguments.length) return this._reconnection;
  this._reconnection = !!v;
  return this;
};

/**
 * Sets the reconnection attempts config.
 *
 * @param {Number} max reconnection attempts before giving up
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionAttempts = function (v) {
  if (!arguments.length) return this._reconnectionAttempts;
  this._reconnectionAttempts = v;
  return this;
};

/**
 * Sets the delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelay = function (v) {
  if (!arguments.length) return this._reconnectionDelay;
  this._reconnectionDelay = v;
  this.backoff && this.backoff.setMin(v);
  return this;
};

Manager.prototype.randomizationFactor = function (v) {
  if (!arguments.length) return this._randomizationFactor;
  this._randomizationFactor = v;
  this.backoff && this.backoff.setJitter(v);
  return this;
};

/**
 * Sets the maximum delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelayMax = function (v) {
  if (!arguments.length) return this._reconnectionDelayMax;
  this._reconnectionDelayMax = v;
  this.backoff && this.backoff.setMax(v);
  return this;
};

/**
 * Sets the connection timeout. `false` to disable
 *
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.timeout = function (v) {
  if (!arguments.length) return this._timeout;
  this._timeout = v;
  return this;
};

/**
 * Starts trying to reconnect if reconnection is enabled and we have not
 * started reconnecting yet
 *
 * @api private
 */

Manager.prototype.maybeReconnectOnOpen = function () {
  // Only try to reconnect if it's the first time we're connecting
  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
    // keeps reconnection from firing twice for the same reconnection loop
    this.reconnect();
  }
};

/**
 * Sets the current transport `socket`.
 *
 * @param {Function} optional, callback
 * @return {Manager} self
 * @api public
 */

Manager.prototype.open =
Manager.prototype.connect = function (fn, opts) {
  debug('readyState %s', this.readyState);
  if (~this.readyState.indexOf('open')) return this;

  debug('opening %s', this.uri);
  this.engine = eio(this.uri, this.opts);
  var socket = this.engine;
  var self = this;
  this.readyState = 'opening';
  this.skipReconnect = false;

  // emit `open`
  var openSub = on(socket, 'open', function () {
    self.onopen();
    fn && fn();
  });

  // emit `connect_error`
  var errorSub = on(socket, 'error', function (data) {
    debug('connect_error');
    self.cleanup();
    self.readyState = 'closed';
    self.emitAll('connect_error', data);
    if (fn) {
      var err = new Error('Connection error');
      err.data = data;
      fn(err);
    } else {
      // Only do this if there is no fn to handle the error
      self.maybeReconnectOnOpen();
    }
  });

  // emit `connect_timeout`
  if (false !== this._timeout) {
    var timeout = this._timeout;
    debug('connect attempt will timeout after %d', timeout);

    // set timer
    var timer = setTimeout(function () {
      debug('connect attempt timed out after %d', timeout);
      openSub.destroy();
      socket.close();
      socket.emit('error', 'timeout');
      self.emitAll('connect_timeout', timeout);
    }, timeout);

    this.subs.push({
      destroy: function () {
        clearTimeout(timer);
      }
    });
  }

  this.subs.push(openSub);
  this.subs.push(errorSub);

  return this;
};

/**
 * Called upon transport open.
 *
 * @api private
 */

Manager.prototype.onopen = function () {
  debug('open');

  // clear old subs
  this.cleanup();

  // mark as open
  this.readyState = 'open';
  this.emit('open');

  // add new subs
  var socket = this.engine;
  this.subs.push(on(socket, 'data', bind(this, 'ondata')));
  this.subs.push(on(socket, 'ping', bind(this, 'onping')));
  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));
  this.subs.push(on(socket, 'error', bind(this, 'onerror')));
  this.subs.push(on(socket, 'close', bind(this, 'onclose')));
  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
};

/**
 * Called upon a ping.
 *
 * @api private
 */

Manager.prototype.onping = function () {
  this.lastPing = new Date();
  this.emitAll('ping');
};

/**
 * Called upon a packet.
 *
 * @api private
 */

Manager.prototype.onpong = function () {
  this.emitAll('pong', new Date() - this.lastPing);
};

/**
 * Called with data.
 *
 * @api private
 */

Manager.prototype.ondata = function (data) {
  this.decoder.add(data);
};

/**
 * Called when parser fully decodes a packet.
 *
 * @api private
 */

Manager.prototype.ondecoded = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon socket error.
 *
 * @api private
 */

Manager.prototype.onerror = function (err) {
  debug('error', err);
  this.emitAll('error', err);
};

/**
 * Creates a new socket for the given `nsp`.
 *
 * @return {Socket}
 * @api public
 */

Manager.prototype.socket = function (nsp, opts) {
  var socket = this.nsps[nsp];
  if (!socket) {
    socket = new Socket(this, nsp, opts);
    this.nsps[nsp] = socket;
    var self = this;
    socket.on('connecting', onConnecting);
    socket.on('connect', function () {
      socket.id = self.generateId(nsp);
    });

    if (this.autoConnect) {
      // manually call here since connecting event is fired before listening
      onConnecting();
    }
  }

  function onConnecting () {
    if (!~indexOf(self.connecting, socket)) {
      self.connecting.push(socket);
    }
  }

  return socket;
};

/**
 * Called upon a socket close.
 *
 * @param {Socket} socket
 */

Manager.prototype.destroy = function (socket) {
  var index = indexOf(this.connecting, socket);
  if (~index) this.connecting.splice(index, 1);
  if (this.connecting.length) return;

  this.close();
};

/**
 * Writes a packet.
 *
 * @param {Object} packet
 * @api private
 */

Manager.prototype.packet = function (packet) {
  debug('writing packet %j', packet);
  var self = this;
  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;

  if (!self.encoding) {
    // encode, then write to engine with result
    self.encoding = true;
    this.encoder.encode(packet, function (encodedPackets) {
      for (var i = 0; i < encodedPackets.length; i++) {
        self.engine.write(encodedPackets[i], packet.options);
      }
      self.encoding = false;
      self.processPacketQueue();
    });
  } else { // add packet to the queue
    self.packetBuffer.push(packet);
  }
};

/**
 * If packet buffer is non-empty, begins encoding the
 * next packet in line.
 *
 * @api private
 */

Manager.prototype.processPacketQueue = function () {
  if (this.packetBuffer.length > 0 && !this.encoding) {
    var pack = this.packetBuffer.shift();
    this.packet(pack);
  }
};

/**
 * Clean up transport subscriptions and packet buffer.
 *
 * @api private
 */

Manager.prototype.cleanup = function () {
  debug('cleanup');

  var subsLength = this.subs.length;
  for (var i = 0; i < subsLength; i++) {
    var sub = this.subs.shift();
    sub.destroy();
  }

  this.packetBuffer = [];
  this.encoding = false;
  this.lastPing = null;

  this.decoder.destroy();
};

/**
 * Close the current socket.
 *
 * @api private
 */

Manager.prototype.close =
Manager.prototype.disconnect = function () {
  debug('disconnect');
  this.skipReconnect = true;
  this.reconnecting = false;
  if ('opening' === this.readyState) {
    // `onclose` will not fire because
    // an open event never happened
    this.cleanup();
  }
  this.backoff.reset();
  this.readyState = 'closed';
  if (this.engine) this.engine.close();
};

/**
 * Called upon engine close.
 *
 * @api private
 */

Manager.prototype.onclose = function (reason) {
  debug('onclose');

  this.cleanup();
  this.backoff.reset();
  this.readyState = 'closed';
  this.emit('close', reason);

  if (this._reconnection && !this.skipReconnect) {
    this.reconnect();
  }
};

/**
 * Attempt a reconnection.
 *
 * @api private
 */

Manager.prototype.reconnect = function () {
  if (this.reconnecting || this.skipReconnect) return this;

  var self = this;

  if (this.backoff.attempts >= this._reconnectionAttempts) {
    debug('reconnect failed');
    this.backoff.reset();
    this.emitAll('reconnect_failed');
    this.reconnecting = false;
  } else {
    var delay = this.backoff.duration();
    debug('will wait %dms before reconnect attempt', delay);

    this.reconnecting = true;
    var timer = setTimeout(function () {
      if (self.skipReconnect) return;

      debug('attempting reconnect');
      self.emitAll('reconnect_attempt', self.backoff.attempts);
      self.emitAll('reconnecting', self.backoff.attempts);

      // check again for the case socket closed in above events
      if (self.skipReconnect) return;

      self.open(function (err) {
        if (err) {
          debug('reconnect attempt error');
          self.reconnecting = false;
          self.reconnect();
          self.emitAll('reconnect_error', err.data);
        } else {
          debug('reconnect success');
          self.onreconnect();
        }
      });
    }, delay);

    this.subs.push({
      destroy: function () {
        clearTimeout(timer);
      }
    });
  }
};

/**
 * Called upon successful reconnect.
 *
 * @api private
 */

Manager.prototype.onreconnect = function () {
  var attempt = this.backoff.attempts;
  this.reconnecting = false;
  this.backoff.reset();
  this.updateSocketIds();
  this.emitAll('reconnect', attempt);
};


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Module dependencies
 */

var XMLHttpRequest = __webpack_require__(7);
var XHR = __webpack_require__(51);
var JSONP = __webpack_require__(58);
var websocket = __webpack_require__(59);

/**
 * Export transports.
 */

exports.polling = polling;
exports.websocket = websocket;

/**
 * Polling transport polymorphic constructor.
 * Decides on xhr vs jsonp based on feature detection.
 *
 * @api private
 */

function polling (opts) {
  var xhr;
  var xd = false;
  var xs = false;
  var jsonp = false !== opts.jsonp;

  if (global.location) {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    xd = opts.hostname !== location.hostname || port !== opts.port;
    xs = opts.secure !== isSSL;
  }

  opts.xdomain = xd;
  opts.xscheme = xs;
  xhr = new XMLHttpRequest(opts);

  if ('open' in xhr && !opts.forceJSONP) {
    return new XHR(opts);
  } else {
    if (!jsonp) throw new Error('JSONP disabled');
    return new JSONP(opts);
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies.
 */

var Transport = __webpack_require__(8);
var parseqs = __webpack_require__(4);
var parser = __webpack_require__(3);
var inherit = __webpack_require__(5);
var yeast = __webpack_require__(21);
var debug = __webpack_require__(1)('engine.io-client:polling');

/**
 * Module exports.
 */

module.exports = Polling;

/**
 * Is XHR2 supported?
 */

var hasXHR2 = (function () {
  var XMLHttpRequest = __webpack_require__(7);
  var xhr = new XMLHttpRequest({ xdomain: false });
  return null != xhr.responseType;
})();

/**
 * Polling interface.
 *
 * @param {Object} opts
 * @api private
 */

function Polling (opts) {
  var forceBase64 = (opts && opts.forceBase64);
  if (!hasXHR2 || forceBase64) {
    this.supportsBinary = false;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(Polling, Transport);

/**
 * Transport name.
 */

Polling.prototype.name = 'polling';

/**
 * Opens the socket (triggers polling). We write a PING message to determine
 * when the transport is open.
 *
 * @api private
 */

Polling.prototype.doOpen = function () {
  this.poll();
};

/**
 * Pauses polling.
 *
 * @param {Function} callback upon buffers are flushed and transport is paused
 * @api private
 */

Polling.prototype.pause = function (onPause) {
  var self = this;

  this.readyState = 'pausing';

  function pause () {
    debug('paused');
    self.readyState = 'paused';
    onPause();
  }

  if (this.polling || !this.writable) {
    var total = 0;

    if (this.polling) {
      debug('we are currently polling - waiting to pause');
      total++;
      this.once('pollComplete', function () {
        debug('pre-pause polling complete');
        --total || pause();
      });
    }

    if (!this.writable) {
      debug('we are currently writing - waiting to pause');
      total++;
      this.once('drain', function () {
        debug('pre-pause writing complete');
        --total || pause();
      });
    }
  } else {
    pause();
  }
};

/**
 * Starts polling cycle.
 *
 * @api public
 */

Polling.prototype.poll = function () {
  debug('polling');
  this.polling = true;
  this.doPoll();
  this.emit('poll');
};

/**
 * Overloads onData to detect payloads.
 *
 * @api private
 */

Polling.prototype.onData = function (data) {
  var self = this;
  debug('polling got data %s', data);
  var callback = function (packet, index, total) {
    // if its the first message we consider the transport open
    if ('opening' === self.readyState) {
      self.onOpen();
    }

    // if its a close packet, we close the ongoing requests
    if ('close' === packet.type) {
      self.onClose();
      return false;
    }

    // otherwise bypass onData and handle the message
    self.onPacket(packet);
  };

  // decode payload
  parser.decodePayload(data, this.socket.binaryType, callback);

  // if an event did not trigger closing
  if ('closed' !== this.readyState) {
    // if we got data we're not polling
    this.polling = false;
    this.emit('pollComplete');

    if ('open' === this.readyState) {
      this.poll();
    } else {
      debug('ignoring poll - transport state "%s"', this.readyState);
    }
  }
};

/**
 * For polling, send a close packet.
 *
 * @api private
 */

Polling.prototype.doClose = function () {
  var self = this;

  function close () {
    debug('writing close packet');
    self.write([{ type: 'close' }]);
  }

  if ('open' === this.readyState) {
    debug('transport open - closing');
    close();
  } else {
    // in case we're trying to close while
    // handshaking is in progress (GH-164)
    debug('transport not open - deferring close');
    this.once('open', close);
  }
};

/**
 * Writes a packets payload.
 *
 * @param {Array} data packets
 * @param {Function} drain callback
 * @api private
 */

Polling.prototype.write = function (packets) {
  var self = this;
  this.writable = false;
  var callbackfn = function () {
    self.writable = true;
    self.emit('drain');
  };

  parser.encodePayload(packets, this.supportsBinary, function (data) {
    self.doWrite(data, callbackfn);
  });
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

Polling.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'https' : 'http';
  var port = '';

  // cache busting is forced
  if (false !== this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  if (!this.supportsBinary && !query.sid) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // avoid port if default for schema
  if (this.port && (('https' === schema && Number(this.port) !== 443) ||
     ('http' === schema && Number(this.port) !== 80))) {
    port = ':' + this.port;
  }

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')
  , length = 64
  , map = {}
  , seed = 0
  , i = 0
  , prev;

/**
 * Return a string representing the specified number.
 *
 * @param {Number} num The number to convert.
 * @returns {String} The string representation of the number.
 * @api public
 */
function encode(num) {
  var encoded = '';

  do {
    encoded = alphabet[num % length] + encoded;
    num = Math.floor(num / length);
  } while (num > 0);

  return encoded;
}

/**
 * Return the integer value specified by the given string.
 *
 * @param {String} str The string to convert.
 * @returns {Number} The integer value represented by the string.
 * @api public
 */
function decode(str) {
  var decoded = 0;

  for (i = 0; i < str.length; i++) {
    decoded = decoded * length + map[str.charAt(i)];
  }

  return decoded;
}

/**
 * Yeast: A tiny growing id generator.
 *
 * @returns {String} A unique id.
 * @api public
 */
function yeast() {
  var now = encode(+new Date());

  if (now !== prev) return seed = 0, prev = now;
  return now +'.'+ encode(seed++);
}

//
// Map each character to its index.
//
for (; i < length; i++) map[alphabet[i]] = i;

//
// Expose the `yeast`, `encode` and `decode` functions.
//
yeast.encode = encode;
yeast.decode = decode;
module.exports = yeast;


/***/ }),
/* 22 */
/***/ (function(module, exports) {


var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var parser = __webpack_require__(6);
var Emitter = __webpack_require__(2);
var toArray = __webpack_require__(62);
var on = __webpack_require__(24);
var bind = __webpack_require__(25);
var debug = __webpack_require__(1)('socket.io-client:socket');
var parseqs = __webpack_require__(4);

/**
 * Module exports.
 */

module.exports = exports = Socket;

/**
 * Internal events (blacklisted).
 * These events can't be emitted by the user.
 *
 * @api private
 */

var events = {
  connect: 1,
  connect_error: 1,
  connect_timeout: 1,
  connecting: 1,
  disconnect: 1,
  error: 1,
  reconnect: 1,
  reconnect_attempt: 1,
  reconnect_failed: 1,
  reconnect_error: 1,
  reconnecting: 1,
  ping: 1,
  pong: 1
};

/**
 * Shortcut to `Emitter#emit`.
 */

var emit = Emitter.prototype.emit;

/**
 * `Socket` constructor.
 *
 * @api public
 */

function Socket (io, nsp, opts) {
  this.io = io;
  this.nsp = nsp;
  this.json = this; // compat
  this.ids = 0;
  this.acks = {};
  this.receiveBuffer = [];
  this.sendBuffer = [];
  this.connected = false;
  this.disconnected = true;
  if (opts && opts.query) {
    this.query = opts.query;
  }
  if (this.io.autoConnect) this.open();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Subscribe to open, close and packet events
 *
 * @api private
 */

Socket.prototype.subEvents = function () {
  if (this.subs) return;

  var io = this.io;
  this.subs = [
    on(io, 'open', bind(this, 'onopen')),
    on(io, 'packet', bind(this, 'onpacket')),
    on(io, 'close', bind(this, 'onclose'))
  ];
};

/**
 * "Opens" the socket.
 *
 * @api public
 */

Socket.prototype.open =
Socket.prototype.connect = function () {
  if (this.connected) return this;

  this.subEvents();
  this.io.open(); // ensure open
  if ('open' === this.io.readyState) this.onopen();
  this.emit('connecting');
  return this;
};

/**
 * Sends a `message` event.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.send = function () {
  var args = toArray(arguments);
  args.unshift('message');
  this.emit.apply(this, args);
  return this;
};

/**
 * Override `emit`.
 * If the event is in `events`, it's emitted normally.
 *
 * @param {String} event name
 * @return {Socket} self
 * @api public
 */

Socket.prototype.emit = function (ev) {
  if (events.hasOwnProperty(ev)) {
    emit.apply(this, arguments);
    return this;
  }

  var args = toArray(arguments);
  var packet = { type: parser.EVENT, data: args };

  packet.options = {};
  packet.options.compress = !this.flags || false !== this.flags.compress;

  // event ack callback
  if ('function' === typeof args[args.length - 1]) {
    debug('emitting packet with ack id %d', this.ids);
    this.acks[this.ids] = args.pop();
    packet.id = this.ids++;
  }

  if (this.connected) {
    this.packet(packet);
  } else {
    this.sendBuffer.push(packet);
  }

  delete this.flags;

  return this;
};

/**
 * Sends a packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.packet = function (packet) {
  packet.nsp = this.nsp;
  this.io.packet(packet);
};

/**
 * Called upon engine `open`.
 *
 * @api private
 */

Socket.prototype.onopen = function () {
  debug('transport is open - connecting');

  // write connect packet if necessary
  if ('/' !== this.nsp) {
    if (this.query) {
      var query = typeof this.query === 'object' ? parseqs.encode(this.query) : this.query;
      debug('sending connect packet with query %s', query);
      this.packet({type: parser.CONNECT, query: query});
    } else {
      this.packet({type: parser.CONNECT});
    }
  }
};

/**
 * Called upon engine `close`.
 *
 * @param {String} reason
 * @api private
 */

Socket.prototype.onclose = function (reason) {
  debug('close (%s)', reason);
  this.connected = false;
  this.disconnected = true;
  delete this.id;
  this.emit('disconnect', reason);
};

/**
 * Called with socket packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onpacket = function (packet) {
  if (packet.nsp !== this.nsp) return;

  switch (packet.type) {
    case parser.CONNECT:
      this.onconnect();
      break;

    case parser.EVENT:
      this.onevent(packet);
      break;

    case parser.BINARY_EVENT:
      this.onevent(packet);
      break;

    case parser.ACK:
      this.onack(packet);
      break;

    case parser.BINARY_ACK:
      this.onack(packet);
      break;

    case parser.DISCONNECT:
      this.ondisconnect();
      break;

    case parser.ERROR:
      this.emit('error', packet.data);
      break;
  }
};

/**
 * Called upon a server event.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onevent = function (packet) {
  var args = packet.data || [];
  debug('emitting event %j', args);

  if (null != packet.id) {
    debug('attaching ack callback to event');
    args.push(this.ack(packet.id));
  }

  if (this.connected) {
    emit.apply(this, args);
  } else {
    this.receiveBuffer.push(args);
  }
};

/**
 * Produces an ack callback to emit with an event.
 *
 * @api private
 */

Socket.prototype.ack = function (id) {
  var self = this;
  var sent = false;
  return function () {
    // prevent double callbacks
    if (sent) return;
    sent = true;
    var args = toArray(arguments);
    debug('sending ack %j', args);

    self.packet({
      type: parser.ACK,
      id: id,
      data: args
    });
  };
};

/**
 * Called upon a server acknowlegement.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onack = function (packet) {
  var ack = this.acks[packet.id];
  if ('function' === typeof ack) {
    debug('calling ack %s with %j', packet.id, packet.data);
    ack.apply(this, packet.data);
    delete this.acks[packet.id];
  } else {
    debug('bad ack %s', packet.id);
  }
};

/**
 * Called upon server connect.
 *
 * @api private
 */

Socket.prototype.onconnect = function () {
  this.connected = true;
  this.disconnected = false;
  this.emit('connect');
  this.emitBuffered();
};

/**
 * Emit buffered events (received and emitted).
 *
 * @api private
 */

Socket.prototype.emitBuffered = function () {
  var i;
  for (i = 0; i < this.receiveBuffer.length; i++) {
    emit.apply(this, this.receiveBuffer[i]);
  }
  this.receiveBuffer = [];

  for (i = 0; i < this.sendBuffer.length; i++) {
    this.packet(this.sendBuffer[i]);
  }
  this.sendBuffer = [];
};

/**
 * Called upon server disconnect.
 *
 * @api private
 */

Socket.prototype.ondisconnect = function () {
  debug('server disconnect (%s)', this.nsp);
  this.destroy();
  this.onclose('io server disconnect');
};

/**
 * Called upon forced client/server side disconnections,
 * this method ensures the manager stops tracking us and
 * that reconnections don't get triggered for this.
 *
 * @api private.
 */

Socket.prototype.destroy = function () {
  if (this.subs) {
    // clean subscriptions to avoid reconnections
    for (var i = 0; i < this.subs.length; i++) {
      this.subs[i].destroy();
    }
    this.subs = null;
  }

  this.io.destroy(this);
};

/**
 * Disconnects the socket manually.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.close =
Socket.prototype.disconnect = function () {
  if (this.connected) {
    debug('performing disconnect (%s)', this.nsp);
    this.packet({ type: parser.DISCONNECT });
  }

  // remove socket from pool
  this.destroy();

  if (this.connected) {
    // fire events
    this.onclose('io client disconnect');
  }
  return this;
};

/**
 * Sets the compress flag.
 *
 * @param {Boolean} if `true`, compresses the sending data
 * @return {Socket} self
 * @api public
 */

Socket.prototype.compress = function (compress) {
  this.flags = this.flags || {};
  this.flags.compress = compress;
  return this;
};


/***/ }),
/* 24 */
/***/ (function(module, exports) {


/**
 * Module exports.
 */

module.exports = on;

/**
 * Helper for subscriptions.
 *
 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
 * @param {String} event name
 * @param {Function} callback
 * @api public
 */

function on (obj, ev, fn) {
  obj.on(ev, fn);
  return {
    destroy: function () {
      obj.removeListener(ev, fn);
    }
  };
}


/***/ }),
/* 25 */
/***/ (function(module, exports) {

/**
 * Slice reference.
 */

var slice = [].slice;

/**
 * Bind `obj` to `fn`.
 *
 * @param {Object} obj
 * @param {Function|String} fn or string
 * @return {Function}
 * @api public
 */

module.exports = function(obj, fn){
  if ('string' == typeof fn) fn = obj[fn];
  if ('function' != typeof fn) throw new Error('bind() requires a function');
  var args = slice.call(arguments, 2);
  return function(){
    return fn.apply(obj, args.concat(slice.call(arguments)));
  }
};


/***/ }),
/* 26 */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.5.1' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(28);
var defined = __webpack_require__(29);
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(80);
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),
/* 29 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),
/* 30 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// tslint:disable
/**
 * Dive REST API
 * Dive third party REST API provides a set of services which leverage obtaining catalog and TV grid info, contextual items (cards) information and saving and a static (scene by scene) version of the card carousel for linear TV and video on demand
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var querystring = __webpack_require__(13);
var url = __webpack_require__(34);
var fetch_iso = __webpack_require__(37);
var io = __webpack_require__(39);
var assign = __webpack_require__(64);
var BASE_PATH = "https://rest.dive.tv/v1".replace(/\/+$/, "");
var BaseAPI = /** @class */ (function () {
    function BaseAPI(basePath, fetch) {
        if (basePath === void 0) { basePath = BASE_PATH; }
        if (fetch === void 0) { fetch = fetch_iso; }
        this.basePath = basePath;
        this.fetch = fetch;
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
/**
* DefaultApi - fetch parameter creator
*/
exports.DefaultApiFetchParamCreator = {
    /**
    * Delete card like
    * Removes a card from current user&#39;s likes list
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param cardId Requested card ID
    * @param acceptLanguage Client locale, as language-country
    */
    deleteLikes: function (params, options) {
        // verify required parameter "authorization" is set
        if (params["authorization"] == null) {
            throw new Error("Missing required parameter authorization when calling deleteLikes");
        }
        // verify required parameter "cardId" is set
        if (params["cardId"] == null) {
            throw new Error("Missing required parameter cardId when calling deleteLikes");
        }
        var baseUrl = "/likes/{card_id}"
            .replace("{" + "card_id" + "}", "" + params["cardId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        /*
        fetchOptions.headers = new Headers();
        fetchOptions.headers.append("Accept-Language", params["acceptLanguage"]);fetchOptions.headers.append("Authorization", params["authorization"]);
        */
        fetchOptions.headers = assign({
            "Accept-Language": params["acceptLanguage"], "Authorization": params["authorization"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
    * Full card detail
    * Retrieves a full card detail, with no relations or context
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param cardId Unique identifier for this card
    * @param acceptLanguage Client locale, as language-country
    * @param products Indicates if cards should contain commercial products when available (true) or not (false)
    * @param userData Indicates if cards should contain user data when available (true) or not (false)
    * @param imageSize Size of the images returned in the response
    */
    getCard: function (params, options) {
        // verify required parameter "authorization" is set
        if (params["authorization"] == null) {
            throw new Error("Missing required parameter authorization when calling getCard");
        }
        // verify required parameter "cardId" is set
        if (params["cardId"] == null) {
            throw new Error("Missing required parameter cardId when calling getCard");
        }
        var baseUrl = "/cards/{card_id}"
            .replace("{" + "card_id" + "}", "" + params["cardId"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "products": params["products"],
            "user_data": params["userData"],
            "image_size": params["imageSize"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        /*
        fetchOptions.headers = new Headers();
        fetchOptions.headers.append("Authorization", params["authorization"]);fetchOptions.headers.append("Accept-Language", params["acceptLanguage"]);
        */
        fetchOptions.headers = assign({
            "Authorization": params["authorization"], "Accept-Language": params["acceptLanguage"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
    * Full card detail with version
    * Retrieves a full card detail, and its relations to other cards in a given context (card version)
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param cardId Unique identifier for this card
    * @param version Version identifier, indicates the context where the card is being requested
    * @param acceptLanguage Client locale, as language-country
    * @param products Indicates if cards should contain commercial products when available (true) or not (false)
    * @param userData Indicates if cards should contain user data when available (true) or not (false)
    * @param relations Indicates if cards should contain the scene hierarchy (true) or not (false)
    * @param imageSize Size of the images returned in the response
    */
    getCardVersion: function (params, options) {
        // verify required parameter "authorization" is set
        if (params["authorization"] == null) {
            throw new Error("Missing required parameter authorization when calling getCardVersion");
        }
        // verify required parameter "cardId" is set
        if (params["cardId"] == null) {
            throw new Error("Missing required parameter cardId when calling getCardVersion");
        }
        // verify required parameter "version" is set
        if (params["version"] == null) {
            throw new Error("Missing required parameter version when calling getCardVersion");
        }
        var baseUrl = "/cards/{card_id}/versions/{version}"
            .replace("{" + "card_id" + "}", "" + params["cardId"])
            .replace("{" + "version" + "}", "" + params["version"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "products": params["products"],
            "user_data": params["userData"],
            "relations": params["relations"],
            "image_size": params["imageSize"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        /*
        fetchOptions.headers = new Headers();
        fetchOptions.headers.append("Authorization", params["authorization"]);fetchOptions.headers.append("Accept-Language", params["acceptLanguage"]);
        */
        fetchOptions.headers = assign({
            "Authorization": params["authorization"], "Accept-Language": params["acceptLanguage"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
    * Movie catalog info
    * Retrieves a movie&#39;s full card by its client ID, including catalog and cast information
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param clientMovieId Client movie ID being played
    * @param acceptLanguage Client locale, as language-country
    * @param imageSize Size of the images returned in the response
    */
    getCatalogMovie: function (params, options) {
        // verify required parameter "authorization" is set
        if (params["authorization"] == null) {
            throw new Error("Missing required parameter authorization when calling getCatalogMovie");
        }
        // verify required parameter "clientMovieId" is set
        if (params["clientMovieId"] == null) {
            throw new Error("Missing required parameter clientMovieId when calling getCatalogMovie");
        }
        var baseUrl = "/movies/{client_movie_id}"
            .replace("{" + "client_movie_id" + "}", "" + params["clientMovieId"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "image_size": params["imageSize"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        /*
        fetchOptions.headers = new Headers();
        fetchOptions.headers.append("Authorization", params["authorization"]);fetchOptions.headers.append("Accept-Language", params["acceptLanguage"]);
        */
        fetchOptions.headers = assign({
            "Authorization": params["authorization"], "Accept-Language": params["acceptLanguage"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
    * Channel events grid
    * Returns the current and upcoming grid of TV events for the given channel
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param channelId Client channel ID
    * @param acceptLanguage Client locale, as language-country
    * @param imageSize Size of the images returned in the response
    */
    getChannelGrid: function (params, options) {
        // verify required parameter "authorization" is set
        if (params["authorization"] == null) {
            throw new Error("Missing required parameter authorization when calling getChannelGrid");
        }
        // verify required parameter "channelId" is set
        if (params["channelId"] == null) {
            throw new Error("Missing required parameter channelId when calling getChannelGrid");
        }
        var baseUrl = "/channels/{channel_id}/grid"
            .replace("{" + "channel_id" + "}", "" + params["channelId"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "image_size": params["imageSize"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        /*
        fetchOptions.headers = new Headers();
        fetchOptions.headers.append("Authorization", params["authorization"]);fetchOptions.headers.append("Accept-Language", params["acceptLanguage"]);
        */
        fetchOptions.headers = assign({
            "Authorization": params["authorization"], "Accept-Language": params["acceptLanguage"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
    * Channel movie catalog info
    * Retrieves full card detail, including catalog and cast information, for the content currently being broadcasted on the channel
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param channelId Client channel ID
    * @param acceptLanguage Client locale, as language-country
    * @param imageSize Size of the images returned in the response
    */
    getChannelMovie: function (params, options) {
        // verify required parameter "authorization" is set
        if (params["authorization"] == null) {
            throw new Error("Missing required parameter authorization when calling getChannelMovie");
        }
        // verify required parameter "channelId" is set
        if (params["channelId"] == null) {
            throw new Error("Missing required parameter channelId when calling getChannelMovie");
        }
        var baseUrl = "/channels/{channel_id}"
            .replace("{" + "channel_id" + "}", "" + params["channelId"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "image_size": params["imageSize"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        /*
        fetchOptions.headers = new Headers();
        fetchOptions.headers.append("Authorization", params["authorization"]);fetchOptions.headers.append("Accept-Language", params["acceptLanguage"]);
        */
        fetchOptions.headers = assign({
            "Authorization": params["authorization"], "Accept-Language": params["acceptLanguage"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
    * Get card likes
    * Returns a paginated list of cards liked by current user
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param acceptLanguage Client locale, as language-country
    * @param imageSize Size of the images returned in the response
    * @param paginateKey Paginate key
    * @param size Number of desired results
    */
    getLikes: function (params, options) {
        // verify required parameter "authorization" is set
        if (params["authorization"] == null) {
            throw new Error("Missing required parameter authorization when calling getLikes");
        }
        var baseUrl = "/likes";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "image_size": params["imageSize"],
            "paginate_key": params["paginateKey"],
            "size": params["size"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        /*
        fetchOptions.headers = new Headers();
        fetchOptions.headers.append("Accept-Language", params["acceptLanguage"]);fetchOptions.headers.append("Authorization", params["authorization"]);
        */
        fetchOptions.headers = assign({
            "Accept-Language": params["acceptLanguage"], "Authorization": params["authorization"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
    * Channel sync availability
    * Checks if a list of client channel identifiers are currently broadcasting synchronizable content
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param channelIdList List of client channel IDs as a comma separated list
    * @param acceptLanguage Client locale, as language-country
    */
    getReadyChannels: function (params, options) {
        // verify required parameter "authorization" is set
        if (params["authorization"] == null) {
            throw new Error("Missing required parameter authorization when calling getReadyChannels");
        }
        // verify required parameter "channelIdList" is set
        if (params["channelIdList"] == null) {
            throw new Error("Missing required parameter channelIdList when calling getReadyChannels");
        }
        var baseUrl = "/channels/{channel_id_list}/ready"
            .replace("{" + "channel_id_list" + "}", "" + params["channelIdList"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        /*
        fetchOptions.headers = new Headers();
        fetchOptions.headers.append("Authorization", params["authorization"]);fetchOptions.headers.append("Accept-Language", params["acceptLanguage"]);
        */
        fetchOptions.headers = assign({
            "Authorization": params["authorization"], "Accept-Language": params["acceptLanguage"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
    * Movie sync availability
    * Checks whether a list of client movie identifiers (Video On Demand) are available to be synchronized using the Dive API
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param clientMovieIdList List of client movie IDs, provided as a comma separated list
    * @param acceptLanguage Client locale, as language-country
    */
    getReadyMovies: function (params, options) {
        // verify required parameter "authorization" is set
        if (params["authorization"] == null) {
            throw new Error("Missing required parameter authorization when calling getReadyMovies");
        }
        // verify required parameter "clientMovieIdList" is set
        if (params["clientMovieIdList"] == null) {
            throw new Error("Missing required parameter clientMovieIdList when calling getReadyMovies");
        }
        var baseUrl = "/movies/{client_movie_id_list}/ready"
            .replace("{" + "client_movie_id_list" + "}", "" + params["clientMovieIdList"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        /*
        fetchOptions.headers = new Headers();
        fetchOptions.headers.append("Authorization", params["authorization"]);fetchOptions.headers.append("Accept-Language", params["acceptLanguage"]);
        */
        fetchOptions.headers = assign({
            "Authorization": params["authorization"], "Accept-Language": params["acceptLanguage"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
    * Static channel scene
    * Retrieves the list of cards related to the content currently being broadcasted in the provided channel
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param channelId Client channel ID
    * @param acceptLanguage Client locale, as language-country
    * @param relations Indicates if cards should contain the scene hierarchy (true) or not (false)
    * @param imageSize Size of the images returned in the response
    */
    getStaticChannelScene: function (params, options) {
        // verify required parameter "authorization" is set
        if (params["authorization"] == null) {
            throw new Error("Missing required parameter authorization when calling getStaticChannelScene");
        }
        // verify required parameter "channelId" is set
        if (params["channelId"] == null) {
            throw new Error("Missing required parameter channelId when calling getStaticChannelScene");
        }
        var baseUrl = "/channels/{channel_id}/static"
            .replace("{" + "channel_id" + "}", "" + params["channelId"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "relations": params["relations"],
            "image_size": params["imageSize"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        /*
        fetchOptions.headers = new Headers();
        fetchOptions.headers.append("Authorization", params["authorization"]);fetchOptions.headers.append("Accept-Language", params["acceptLanguage"]);
        */
        fetchOptions.headers = assign({
            "Authorization": params["authorization"], "Accept-Language": params["acceptLanguage"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
    * Static VOD scene
    * Retrieves the current list of cards related to the given movie scene
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param clientMovieId Client movie ID being played
    * @param timestamp Current movie timestamp in seconds
    * @param acceptLanguage Client locale, as language-country
    * @param relations Indicates if cards should contain the scene hierarchy (true) or not (false)
    * @param imageSize Size of the images returned in the response
    */
    getStaticMovieScene: function (params, options) {
        // verify required parameter "authorization" is set
        if (params["authorization"] == null) {
            throw new Error("Missing required parameter authorization when calling getStaticMovieScene");
        }
        // verify required parameter "clientMovieId" is set
        if (params["clientMovieId"] == null) {
            throw new Error("Missing required parameter clientMovieId when calling getStaticMovieScene");
        }
        // verify required parameter "timestamp" is set
        if (params["timestamp"] == null) {
            throw new Error("Missing required parameter timestamp when calling getStaticMovieScene");
        }
        var baseUrl = "/movies/{client_movie_id}/static/{timestamp}"
            .replace("{" + "client_movie_id" + "}", "" + params["clientMovieId"])
            .replace("{" + "timestamp" + "}", "" + params["timestamp"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "relations": params["relations"],
            "image_size": params["imageSize"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        /*
        fetchOptions.headers = new Headers();
        fetchOptions.headers.append("Authorization", params["authorization"]);fetchOptions.headers.append("Accept-Language", params["acceptLanguage"]);
        */
        fetchOptions.headers = assign({
            "Authorization": params["authorization"], "Accept-Language": params["acceptLanguage"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
    * Add card like
    * Stores a card under current user&#39;s likes list
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param cardId Requested card ID
    * @param acceptLanguage Client locale, as language-country
    */
    postLikes: function (params, options) {
        // verify required parameter "authorization" is set
        if (params["authorization"] == null) {
            throw new Error("Missing required parameter authorization when calling postLikes");
        }
        // verify required parameter "cardId" is set
        if (params["cardId"] == null) {
            throw new Error("Missing required parameter cardId when calling postLikes");
        }
        var baseUrl = "/likes/{card_id}"
            .replace("{" + "card_id" + "}", "" + params["cardId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        /*
        fetchOptions.headers = new Headers();
        fetchOptions.headers.append("Accept-Language", params["acceptLanguage"]);fetchOptions.headers.append("Authorization", params["authorization"]);
        */
        fetchOptions.headers = assign({
            "Accept-Language": params["acceptLanguage"], "Authorization": params["authorization"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
    * Token endpoint
    * The token endpoint is used to obtain access tokens which allow clients to make API requests
    * @param authorization Basic authorization token (&#39;Basic &lt;client_key&gt;&#39;)
    * @param grantType Grant type used to obtain the token.
    * @param acceptLanguage Client locale, as language-country
    * @param deviceId Device identifier, must uniquely identify the user or device accessing the API. Required only for \&quot;device_credentials\&quot; grant type
    * @param refreshToken Refresh token, used to issue a new token without resending client credentials. Required only for \&quot;refresh_token\&quot; grant type
    */
    postToken: function (params, options) {
        // verify required parameter "authorization" is set
        if (params["authorization"] == null) {
            throw new Error("Missing required parameter authorization when calling postToken");
        }
        // verify required parameter "grantType" is set
        if (params["grantType"] == null) {
            throw new Error("Missing required parameter grantType when calling postToken");
        }
        var baseUrl = "/token";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "grant_type": params["grantType"],
        });
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "device_id": params["deviceId"],
            "refresh_token": params["refreshToken"],
        });
        /*
        fetchOptions.headers = new Headers();
        fetchOptions.headers.append("Authorization", params["authorization"]);fetchOptions.headers.append("Accept-Language", params["acceptLanguage"]);
        */
        fetchOptions.headers = assign({
            "Authorization": params["authorization"], "Accept-Language": params["acceptLanguage"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
* DefaultApi - functional programming interface
*/
exports.DefaultApiFp = {
    /**
    * Delete card like
    * Removes a card from current user&#39;s likes list
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param cardId Requested card ID
    * @param acceptLanguage Client locale, as language-country
    */
    deleteLikes: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.deleteLikes(params, options);
        return function (fetch, basePath) {
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options)
                .then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            })
                .catch(function (response) {
                throw response;
            });
        };
    },
    /**
    * Full card detail
    * Retrieves a full card detail, with no relations or context
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param cardId Unique identifier for this card
    * @param acceptLanguage Client locale, as language-country
    * @param products Indicates if cards should contain commercial products when available (true) or not (false)
    * @param userData Indicates if cards should contain user data when available (true) or not (false)
    * @param imageSize Size of the images returned in the response
    */
    getCard: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.getCard(params, options);
        return function (fetch, basePath) {
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options)
                .then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            })
                .catch(function (response) {
                throw response;
            });
        };
    },
    /**
    * Full card detail with version
    * Retrieves a full card detail, and its relations to other cards in a given context (card version)
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param cardId Unique identifier for this card
    * @param version Version identifier, indicates the context where the card is being requested
    * @param acceptLanguage Client locale, as language-country
    * @param products Indicates if cards should contain commercial products when available (true) or not (false)
    * @param userData Indicates if cards should contain user data when available (true) or not (false)
    * @param relations Indicates if cards should contain the scene hierarchy (true) or not (false)
    * @param imageSize Size of the images returned in the response
    */
    getCardVersion: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.getCardVersion(params, options);
        return function (fetch, basePath) {
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options)
                .then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            })
                .catch(function (response) {
                throw response;
            });
        };
    },
    /**
    * Movie catalog info
    * Retrieves a movie&#39;s full card by its client ID, including catalog and cast information
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param clientMovieId Client movie ID being played
    * @param acceptLanguage Client locale, as language-country
    * @param imageSize Size of the images returned in the response
    */
    getCatalogMovie: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.getCatalogMovie(params, options);
        return function (fetch, basePath) {
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options)
                .then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            })
                .catch(function (response) {
                throw response;
            });
        };
    },
    /**
    * Channel events grid
    * Returns the current and upcoming grid of TV events for the given channel
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param channelId Client channel ID
    * @param acceptLanguage Client locale, as language-country
    * @param imageSize Size of the images returned in the response
    */
    getChannelGrid: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.getChannelGrid(params, options);
        return function (fetch, basePath) {
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options)
                .then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            })
                .catch(function (response) {
                throw response;
            });
        };
    },
    /**
    * Channel movie catalog info
    * Retrieves full card detail, including catalog and cast information, for the content currently being broadcasted on the channel
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param channelId Client channel ID
    * @param acceptLanguage Client locale, as language-country
    * @param imageSize Size of the images returned in the response
    */
    getChannelMovie: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.getChannelMovie(params, options);
        return function (fetch, basePath) {
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options)
                .then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            })
                .catch(function (response) {
                throw response;
            });
        };
    },
    /**
    * Get card likes
    * Returns a paginated list of cards liked by current user
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param acceptLanguage Client locale, as language-country
    * @param imageSize Size of the images returned in the response
    * @param paginateKey Paginate key
    * @param size Number of desired results
    */
    getLikes: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.getLikes(params, options);
        return function (fetch, basePath) {
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options)
                .then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            })
                .catch(function (response) {
                throw response;
            });
        };
    },
    /**
    * Channel sync availability
    * Checks if a list of client channel identifiers are currently broadcasting synchronizable content
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param channelIdList List of client channel IDs as a comma separated list
    * @param acceptLanguage Client locale, as language-country
    */
    getReadyChannels: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.getReadyChannels(params, options);
        return function (fetch, basePath) {
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options)
                .then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            })
                .catch(function (response) {
                throw response;
            });
        };
    },
    /**
    * Movie sync availability
    * Checks whether a list of client movie identifiers (Video On Demand) are available to be synchronized using the Dive API
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param clientMovieIdList List of client movie IDs, provided as a comma separated list
    * @param acceptLanguage Client locale, as language-country
    */
    getReadyMovies: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.getReadyMovies(params, options);
        return function (fetch, basePath) {
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options)
                .then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            })
                .catch(function (response) {
                throw response;
            });
        };
    },
    /**
    * Static channel scene
    * Retrieves the list of cards related to the content currently being broadcasted in the provided channel
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param channelId Client channel ID
    * @param acceptLanguage Client locale, as language-country
    * @param relations Indicates if cards should contain the scene hierarchy (true) or not (false)
    * @param imageSize Size of the images returned in the response
    */
    getStaticChannelScene: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.getStaticChannelScene(params, options);
        return function (fetch, basePath) {
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options)
                .then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            })
                .catch(function (response) {
                throw response;
            });
        };
    },
    /**
    * Static VOD scene
    * Retrieves the current list of cards related to the given movie scene
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param clientMovieId Client movie ID being played
    * @param timestamp Current movie timestamp in seconds
    * @param acceptLanguage Client locale, as language-country
    * @param relations Indicates if cards should contain the scene hierarchy (true) or not (false)
    * @param imageSize Size of the images returned in the response
    */
    getStaticMovieScene: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.getStaticMovieScene(params, options);
        return function (fetch, basePath) {
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options)
                .then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            })
                .catch(function (response) {
                throw response;
            });
        };
    },
    /**
    * Add card like
    * Stores a card under current user&#39;s likes list
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param cardId Requested card ID
    * @param acceptLanguage Client locale, as language-country
    */
    postLikes: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.postLikes(params, options);
        return function (fetch, basePath) {
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options)
                .then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            })
                .catch(function (response) {
                throw response;
            });
        };
    },
    /**
    * Token endpoint
    * The token endpoint is used to obtain access tokens which allow clients to make API requests
    * @param authorization Basic authorization token (&#39;Basic &lt;client_key&gt;&#39;)
    * @param grantType Grant type used to obtain the token.
    * @param acceptLanguage Client locale, as language-country
    * @param deviceId Device identifier, must uniquely identify the user or device accessing the API. Required only for \&quot;device_credentials\&quot; grant type
    * @param refreshToken Refresh token, used to issue a new token without resending client credentials. Required only for \&quot;refresh_token\&quot; grant type
    */
    postToken: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.postToken(params, options);
        return function (fetch, basePath) {
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options)
                .then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            })
                .catch(function (response) {
                throw response;
            });
        };
    },
};
/**
* DefaultApi - object-oriented interface
*/
var DefaultApi = /** @class */ (function (_super) {
    __extends(DefaultApi, _super);
    function DefaultApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
    * Delete card like
    * Removes a card from current user&#39;s likes list
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param cardId Requested card ID
    * @param acceptLanguage Client locale, as language-country
    */
    DefaultApi.prototype.deleteLikes = function (params, options) {
        return exports.DefaultApiFp.deleteLikes(params, options)(this.fetch, this.basePath);
    };
    /**
    * Full card detail
    * Retrieves a full card detail, with no relations or context
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param cardId Unique identifier for this card
    * @param acceptLanguage Client locale, as language-country
    * @param products Indicates if cards should contain commercial products when available (true) or not (false)
    * @param userData Indicates if cards should contain user data when available (true) or not (false)
    * @param imageSize Size of the images returned in the response
    */
    DefaultApi.prototype.getCard = function (params, options) {
        return exports.DefaultApiFp.getCard(params, options)(this.fetch, this.basePath);
    };
    /**
    * Full card detail with version
    * Retrieves a full card detail, and its relations to other cards in a given context (card version)
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param cardId Unique identifier for this card
    * @param version Version identifier, indicates the context where the card is being requested
    * @param acceptLanguage Client locale, as language-country
    * @param products Indicates if cards should contain commercial products when available (true) or not (false)
    * @param userData Indicates if cards should contain user data when available (true) or not (false)
    * @param relations Indicates if cards should contain the scene hierarchy (true) or not (false)
    * @param imageSize Size of the images returned in the response
    */
    DefaultApi.prototype.getCardVersion = function (params, options) {
        return exports.DefaultApiFp.getCardVersion(params, options)(this.fetch, this.basePath);
    };
    /**
    * Movie catalog info
    * Retrieves a movie&#39;s full card by its client ID, including catalog and cast information
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param clientMovieId Client movie ID being played
    * @param acceptLanguage Client locale, as language-country
    * @param imageSize Size of the images returned in the response
    */
    DefaultApi.prototype.getCatalogMovie = function (params, options) {
        return exports.DefaultApiFp.getCatalogMovie(params, options)(this.fetch, this.basePath);
    };
    /**
    * Channel events grid
    * Returns the current and upcoming grid of TV events for the given channel
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param channelId Client channel ID
    * @param acceptLanguage Client locale, as language-country
    * @param imageSize Size of the images returned in the response
    */
    DefaultApi.prototype.getChannelGrid = function (params, options) {
        return exports.DefaultApiFp.getChannelGrid(params, options)(this.fetch, this.basePath);
    };
    /**
    * Channel movie catalog info
    * Retrieves full card detail, including catalog and cast information, for the content currently being broadcasted on the channel
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param channelId Client channel ID
    * @param acceptLanguage Client locale, as language-country
    * @param imageSize Size of the images returned in the response
    */
    DefaultApi.prototype.getChannelMovie = function (params, options) {
        return exports.DefaultApiFp.getChannelMovie(params, options)(this.fetch, this.basePath);
    };
    /**
    * Get card likes
    * Returns a paginated list of cards liked by current user
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param acceptLanguage Client locale, as language-country
    * @param imageSize Size of the images returned in the response
    * @param paginateKey Paginate key
    * @param size Number of desired results
    */
    DefaultApi.prototype.getLikes = function (params, options) {
        return exports.DefaultApiFp.getLikes(params, options)(this.fetch, this.basePath);
    };
    /**
    * Channel sync availability
    * Checks if a list of client channel identifiers are currently broadcasting synchronizable content
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param channelIdList List of client channel IDs as a comma separated list
    * @param acceptLanguage Client locale, as language-country
    */
    DefaultApi.prototype.getReadyChannels = function (params, options) {
        return exports.DefaultApiFp.getReadyChannels(params, options)(this.fetch, this.basePath);
    };
    /**
    * Movie sync availability
    * Checks whether a list of client movie identifiers (Video On Demand) are available to be synchronized using the Dive API
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param clientMovieIdList List of client movie IDs, provided as a comma separated list
    * @param acceptLanguage Client locale, as language-country
    */
    DefaultApi.prototype.getReadyMovies = function (params, options) {
        return exports.DefaultApiFp.getReadyMovies(params, options)(this.fetch, this.basePath);
    };
    /**
    * Static channel scene
    * Retrieves the list of cards related to the content currently being broadcasted in the provided channel
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param channelId Client channel ID
    * @param acceptLanguage Client locale, as language-country
    * @param relations Indicates if cards should contain the scene hierarchy (true) or not (false)
    * @param imageSize Size of the images returned in the response
    */
    DefaultApi.prototype.getStaticChannelScene = function (params, options) {
        return exports.DefaultApiFp.getStaticChannelScene(params, options)(this.fetch, this.basePath);
    };
    /**
    * Static VOD scene
    * Retrieves the current list of cards related to the given movie scene
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param clientMovieId Client movie ID being played
    * @param timestamp Current movie timestamp in seconds
    * @param acceptLanguage Client locale, as language-country
    * @param relations Indicates if cards should contain the scene hierarchy (true) or not (false)
    * @param imageSize Size of the images returned in the response
    */
    DefaultApi.prototype.getStaticMovieScene = function (params, options) {
        return exports.DefaultApiFp.getStaticMovieScene(params, options)(this.fetch, this.basePath);
    };
    /**
    * Add card like
    * Stores a card under current user&#39;s likes list
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param cardId Requested card ID
    * @param acceptLanguage Client locale, as language-country
    */
    DefaultApi.prototype.postLikes = function (params, options) {
        return exports.DefaultApiFp.postLikes(params, options)(this.fetch, this.basePath);
    };
    /**
    * Token endpoint
    * The token endpoint is used to obtain access tokens which allow clients to make API requests
    * @param authorization Basic authorization token (&#39;Basic &lt;client_key&gt;&#39;)
    * @param grantType Grant type used to obtain the token.
    * @param acceptLanguage Client locale, as language-country
    * @param deviceId Device identifier, must uniquely identify the user or device accessing the API. Required only for \&quot;device_credentials\&quot; grant type
    * @param refreshToken Refresh token, used to issue a new token without resending client credentials. Required only for \&quot;refresh_token\&quot; grant type
    */
    DefaultApi.prototype.postToken = function (params, options) {
        return exports.DefaultApiFp.postToken(params, options)(this.fetch, this.basePath);
    };
    return DefaultApi;
}(BaseAPI));
exports.DefaultApi = DefaultApi;
;
/**
* DefaultApi - factory interface
*/
exports.DefaultApiFactory = function (fetch, basePath) {
    return {
        /**
        * Delete card like
        * Removes a card from current user&#39;s likes list
        * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
        * @param cardId Requested card ID
        * @param acceptLanguage Client locale, as language-country
        */
        deleteLikes: function (params, options) {
            return exports.DefaultApiFp.deleteLikes(params, options)(fetch, basePath);
        },
        /**
        * Full card detail
        * Retrieves a full card detail, with no relations or context
        * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
        * @param cardId Unique identifier for this card
        * @param acceptLanguage Client locale, as language-country
        * @param products Indicates if cards should contain commercial products when available (true) or not (false)
        * @param userData Indicates if cards should contain user data when available (true) or not (false)
        * @param imageSize Size of the images returned in the response
        */
        getCard: function (params, options) {
            return exports.DefaultApiFp.getCard(params, options)(fetch, basePath);
        },
        /**
        * Full card detail with version
        * Retrieves a full card detail, and its relations to other cards in a given context (card version)
        * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
        * @param cardId Unique identifier for this card
        * @param version Version identifier, indicates the context where the card is being requested
        * @param acceptLanguage Client locale, as language-country
        * @param products Indicates if cards should contain commercial products when available (true) or not (false)
        * @param userData Indicates if cards should contain user data when available (true) or not (false)
        * @param relations Indicates if cards should contain the scene hierarchy (true) or not (false)
        * @param imageSize Size of the images returned in the response
        */
        getCardVersion: function (params, options) {
            return exports.DefaultApiFp.getCardVersion(params, options)(fetch, basePath);
        },
        /**
        * Movie catalog info
        * Retrieves a movie&#39;s full card by its client ID, including catalog and cast information
        * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
        * @param clientMovieId Client movie ID being played
        * @param acceptLanguage Client locale, as language-country
        * @param imageSize Size of the images returned in the response
        */
        getCatalogMovie: function (params, options) {
            return exports.DefaultApiFp.getCatalogMovie(params, options)(fetch, basePath);
        },
        /**
        * Channel events grid
        * Returns the current and upcoming grid of TV events for the given channel
        * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
        * @param channelId Client channel ID
        * @param acceptLanguage Client locale, as language-country
        * @param imageSize Size of the images returned in the response
        */
        getChannelGrid: function (params, options) {
            return exports.DefaultApiFp.getChannelGrid(params, options)(fetch, basePath);
        },
        /**
        * Channel movie catalog info
        * Retrieves full card detail, including catalog and cast information, for the content currently being broadcasted on the channel
        * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
        * @param channelId Client channel ID
        * @param acceptLanguage Client locale, as language-country
        * @param imageSize Size of the images returned in the response
        */
        getChannelMovie: function (params, options) {
            return exports.DefaultApiFp.getChannelMovie(params, options)(fetch, basePath);
        },
        /**
        * Get card likes
        * Returns a paginated list of cards liked by current user
        * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
        * @param acceptLanguage Client locale, as language-country
        * @param imageSize Size of the images returned in the response
        * @param paginateKey Paginate key
        * @param size Number of desired results
        */
        getLikes: function (params, options) {
            return exports.DefaultApiFp.getLikes(params, options)(fetch, basePath);
        },
        /**
        * Channel sync availability
        * Checks if a list of client channel identifiers are currently broadcasting synchronizable content
        * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
        * @param channelIdList List of client channel IDs as a comma separated list
        * @param acceptLanguage Client locale, as language-country
        */
        getReadyChannels: function (params, options) {
            return exports.DefaultApiFp.getReadyChannels(params, options)(fetch, basePath);
        },
        /**
        * Movie sync availability
        * Checks whether a list of client movie identifiers (Video On Demand) are available to be synchronized using the Dive API
        * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
        * @param clientMovieIdList List of client movie IDs, provided as a comma separated list
        * @param acceptLanguage Client locale, as language-country
        */
        getReadyMovies: function (params, options) {
            return exports.DefaultApiFp.getReadyMovies(params, options)(fetch, basePath);
        },
        /**
        * Static channel scene
        * Retrieves the list of cards related to the content currently being broadcasted in the provided channel
        * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
        * @param channelId Client channel ID
        * @param acceptLanguage Client locale, as language-country
        * @param relations Indicates if cards should contain the scene hierarchy (true) or not (false)
        * @param imageSize Size of the images returned in the response
        */
        getStaticChannelScene: function (params, options) {
            return exports.DefaultApiFp.getStaticChannelScene(params, options)(fetch, basePath);
        },
        /**
        * Static VOD scene
        * Retrieves the current list of cards related to the given movie scene
        * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
        * @param clientMovieId Client movie ID being played
        * @param timestamp Current movie timestamp in seconds
        * @param acceptLanguage Client locale, as language-country
        * @param relations Indicates if cards should contain the scene hierarchy (true) or not (false)
        * @param imageSize Size of the images returned in the response
        */
        getStaticMovieScene: function (params, options) {
            return exports.DefaultApiFp.getStaticMovieScene(params, options)(fetch, basePath);
        },
        /**
        * Add card like
        * Stores a card under current user&#39;s likes list
        * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
        * @param cardId Requested card ID
        * @param acceptLanguage Client locale, as language-country
        */
        postLikes: function (params, options) {
            return exports.DefaultApiFp.postLikes(params, options)(fetch, basePath);
        },
        /**
        * Token endpoint
        * The token endpoint is used to obtain access tokens which allow clients to make API requests
        * @param authorization Basic authorization token (&#39;Basic &lt;client_key&gt;&#39;)
        * @param grantType Grant type used to obtain the token.
        * @param acceptLanguage Client locale, as language-country
        * @param deviceId Device identifier, must uniquely identify the user or device accessing the API. Required only for \&quot;device_credentials\&quot; grant type
        * @param refreshToken Refresh token, used to issue a new token without resending client credentials. Required only for \&quot;refresh_token\&quot; grant type
        */
        postToken: function (params, options) {
            return exports.DefaultApiFp.postToken(params, options)(fetch, basePath);
        },
    };
};
;
/**
* DiveAPI - extended object-oriented interface
*/
var DiveAPIClass = /** @class */ (function (_super) {
    __extends(DiveAPIClass, _super);
    function DiveAPIClass(params) {
        var _this = _super.call(this, "", params.fetch) || this;
        _this.environment = "PRO";
        _this.noAuthServices = ["postRegisterDevice", "postRegisterEmail", "postToken", "postVersion"];
        if (typeof params !== "object") {
            console.error("You should provide initialization params.");
            throw new Error("You should provide initialization params.");
        }
        _this.apiKey = params.apiKey;
        if (params.deviceId) {
            _this.setDeviceId(params.deviceId);
        }
        _this.eventNamespace = params.eventNamespace || "dive-external-api-";
        _this.setEnvironment(params.env);
        _this.storeTokenType = params.storeToken;
        return _this;
        // this.connectionFailedObservable = Rx.Observable.fromEvent(document, `${this.eventNamespace}-connection-failed`);
        // this.internalServerErrorObservable = Rx.Observable.fromEvent(document, `${this.eventNamespace}-internal-server-error`);
        // this.serviceTemporarilyUnavailableObservable = Rx.Observable.fromEvent(document, `${this.eventNamespace}-service-unavailable`);
        // this.unsupportedMediaTypeErrorObservable = Rx.Observable.fromEvent(document, `${this.eventNamespace}-unsupported-mediatype`);
        // this.unauthorizedObservable = Rx.Observable.fromEvent(document, `${this.eventNamespace}-unauthorized`);
        // this.unauthorizedRoleObservable = Rx.Observable.fromEvent(document, `${this.eventNamespace}-unauthorized-role`);
    }
    DiveAPIClass.prototype.setDeviceId = function (deviceId) {
        this.deviceId = deviceId;
    };
    DiveAPIClass.prototype.getSavedToken = function () {
        switch (this.storeTokenType) {
            case "cookies":
                return this.getTokenFromCookies();
            default:
                if (this.getTokenFromWebStorage()) {
                    return JSON.parse(this.getTokenFromWebStorage());
                }
                break;
        }
    };
    DiveAPIClass.prototype.setEnvironment = function (env) {
        this.environment = env;
        switch (env) {
            case "DEV":
                this.basePath = BASE_PATH.replace("https://", "https://dev-");
                break;
            case "PRE":
                this.basePath = BASE_PATH.replace("https://", "https://pre-");
                break;
            case "PRO":
            default:
                this.basePath = BASE_PATH;
                break;
        }
    };
    DiveAPIClass.prototype.setLocale = function (locale) {
        this.locale = locale;
    };
    DiveAPIClass.prototype.getLocale = function () {
        return this.locale;
    };
    DiveAPIClass.prototype.writeToken = function (newToken) {
        if (newToken) {
            switch (this.storeTokenType) {
                case "cookies":
                    this.writeTokenToCookie(newToken);
                    break;
                default:
                    this.writeTokenToWebStorage(newToken);
                    break;
            }
            if (this.diveTokenRefreshInterval) {
                window.clearInterval(this.diveTokenRefreshInterval);
                this.diveTokenRefreshInterval = undefined;
            }
            if (newToken.expires_in) {
                this.diveTokenRefreshInterval = window.setInterval(this.refreshToken.bind(this), (Math.max(10000, newToken.expires_in - 60) * 1000)); // 60 seconds before expiration (in ms)
            }
        }
    };
    DiveAPIClass.prototype.gatherCommonHeaders = function (params) {
        var newParams = {};
        if (!params) {
            params = {};
        }
        // newParams["User-Agent"] = "foo";
        if (params["connection"] == null) {
            newParams.connection = "keep-alive";
        }
        if (params["acceptEncoding"] == null) {
            newParams.acceptEncoding = "gzip, deflate";
        }
        if (params["authorization"] == null && this.getSavedToken()) {
            newParams.authorization = "" + this.getSavedToken().token_type.substring(0, 1).toUpperCase() + this.getSavedToken().token_type.substring(1) + " " + this.getSavedToken().access_token;
        }
        else {
            newParams.authorization = "Basic " + this.apiKey;
        }
        if (params["acceptLanguage"] == null && this.locale !== null) {
            newParams.acceptLanguage = this.locale;
        }
        return __assign({}, newParams, params);
    };
    DiveAPIClass.prototype.deleteSavedToken = function () {
        switch (this.storeTokenType) {
            case "cookies":
                this.deleteTokenFromCookies();
                break;
            default:
                this.deleteTokenFromWebStorage();
                break;
        }
    };
    DiveAPIClass.prototype.initializeToken = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.refreshToken()
                .then(function () {
                resolve();
            })
                .catch(function (e) {
                reject(e);
            });
        });
    };
    DiveAPIClass.prototype.postTokenAndSave = function (params, options) {
        var _this = this;
        this.deleteSavedToken();
        return new Promise(function (resolve, reject) {
            var newParams = __assign({}, _this.gatherCommonHeaders(params), { deviceId: _this.deviceId });
            var request = _this.postToken(newParams, options);
            request.then(function (newToken) {
                _this.writeToken(newToken);
                resolve();
            })
                .catch(reject);
        });
    };
    DiveAPIClass.prototype.syncWithMovieVOD = function (params) {
        if (!params) {
            throw new Error("Error, missing parameters object");
        }
        if (!params.movieId) {
            throw new Error("Error, missing movieId parameter");
        }
        if (!params.timestamp) {
            throw new Error("Error, missing timestamp parameter");
        }
        this.syncWithMovie({ movieId: params.movieId, timestamp: params.timestamp, callbacks: params.callbacks });
    };
    DiveAPIClass.prototype.syncWithMovieStreaming = function (params) {
        if (!params) {
            throw new Error("Error, missing parameters object");
        }
        if (!params.channelId) {
            throw new Error("Error, missing channelId parameter");
        }
        this.syncWithMovie({ channelId: params.channelId, protocol: params.protocol, callbacks: params.callbacks });
    };
    DiveAPIClass.prototype.syncWithMovie = function (params) {
        var _this = this;
        if (!params) {
            throw new Error("Error, missing parameters object");
        }
        var protocol = params.protocol || "https";
        var url = "stream.dive.tv";
        var syncType = "channels";
        // let query: any = {token: `${this.getSavedToken().access_token}`};
        var query = {};
        switch (this.environment) {
            case "DEV":
                url = protocol + "://dev-" + url;
                break;
            case "PRE":
                url = protocol + "://pre-" + url;
                break;
            default:
                url = protocol + "://" + url;
        }
        if (!params.channelId && params.movieId && params.timestamp) {
            syncType = "movies";
            query.movie_id = params.movieId;
            query.timestamp = params.timestamp;
        }
        else {
            query.channel_id = params.channelId;
        }
        url += "/" + syncType;
        this.socket = io(url, {
            path: "/v1/stream",
            multiplex: false,
            reconnection: true,
            query: query,
            // forceNew: true,
            // rejectUnauthorized: false,
            // secure: true,
            transports: ["websocket"],
            extraHeaders: {
                'Accept-Language': this.locale,
            },
        });
        this.socket.on('connect', function () {
            _this.socket.emit('authenticate', { token: _this.getSavedToken().access_token })
                .on('authenticated', function () {
                console.log("authorized");
            })
                .on('unauthorized', function (msg) {
                console.log("unauthorized: " + JSON.stringify(msg.data));
                throw new Error(msg.data.type);
            })
                .on('error', function (error) {
                console.log("SOCKET error", error);
                if (params.callbacks && params.callbacks.onError instanceof Function) {
                    params.callbacks.onError(error);
                }
            })
                .on('movie_start', function (movie) {
                console.log("SOCKET movie_start", movie);
                if (params.callbacks && params.callbacks.onMovieStart instanceof Function) {
                    params.callbacks.onMovieStart(movie);
                }
            })
                .on('movie_end', function () {
                console.log("SOCKET movie_end");
                if (params.callbacks && params.callbacks.onMovieEnd instanceof Function) {
                    params.callbacks.onMovieEnd();
                }
            })
                .on('scene_start', function (scene) {
                console.log("SOCKET scene_start", scene);
                if (params.callbacks && params.callbacks.onSceneStart instanceof Function) {
                    params.callbacks.onSceneStart(scene);
                }
            })
                .on('scene_update', function (scene) {
                console.log("SOCKET scene_update", scene);
                if (params.callbacks && params.callbacks.onSceneUpdate instanceof Function) {
                    params.callbacks.onSceneUpdate(scene);
                }
            })
                .on('scene_end', function () {
                console.log("SOCKET scene_end");
                if (params.callbacks && params.callbacks.onSceneEnd instanceof Function) {
                    params.callbacks.onSceneEnd();
                }
            })
                .on('pause_start', function () {
                console.log("SOCKET pause_start");
                if (params.callbacks && params.callbacks.onPauseStart instanceof Function) {
                    params.callbacks.onPauseStart();
                }
            })
                .on('pause_end', function () {
                console.log("SOCKET pause_end");
                if (params.callbacks && params.callbacks.onPauseEnd instanceof Function) {
                    params.callbacks.onPauseEnd();
                }
            });
        });
    };
    DiveAPIClass.prototype.clearSocket = function () {
        if (this.socket) {
            if (this.socket.connected) {
                this.socket.disconnect(true);
            }
        }
        this.socket = undefined;
    };
    /**
    * Delete card like
    * Removes a card from current user&#39;s likes list
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param cardId Requested card ID
    * @param acceptLanguage Client locale, as language-country
    */
    DiveAPIClass.prototype.deleteLikes = function (params, options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var newParams = _this.gatherCommonHeaders(params);
            exports.DefaultApiFp.deleteLikes(newParams, options)(_this.fetch, _this.basePath)
                .then(function (result) {
                resolve(result);
            })
                .catch(function (error) {
                if (error) {
                    console.log("%c REST error - deleteLikes", "background: black; color: #FE2EF7; padding: 0 10px;", error);
                }
                if (error.status === 401 && _this.serviceRequiresToken("deleteLikes")) {
                    _this.refreshToken()
                        .catch(function (error) {
                        return _this.postTokenAndSave({ grantType: "device_credentials", deviceId: _this.deviceId });
                    })
                        .then(function () {
                        newParams = _this.gatherCommonHeaders(params);
                        return exports.DefaultApiFp.deleteLikes(newParams, options)(_this.fetch, _this.basePath);
                    })
                        .then(function (result) {
                        resolve(result);
                    })
                        .catch(function (errorRefreshingToken) {
                        reject(errorRefreshingToken);
                    });
                }
                else {
                    reject(error);
                }
            });
        });
    };
    /**
    * Full card detail
    * Retrieves a full card detail, with no relations or context
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param cardId Unique identifier for this card
    * @param acceptLanguage Client locale, as language-country
    * @param products Indicates if cards should contain commercial products when available (true) or not (false)
    * @param userData Indicates if cards should contain user data when available (true) or not (false)
    * @param imageSize Size of the images returned in the response
    */
    DiveAPIClass.prototype.getCard = function (params, options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var newParams = _this.gatherCommonHeaders(params);
            exports.DefaultApiFp.getCard(newParams, options)(_this.fetch, _this.basePath)
                .then(function (result) {
                resolve(result);
            })
                .catch(function (error) {
                if (error) {
                    console.log("%c REST error - getCard", "background: black; color: #FE2EF7; padding: 0 10px;", error);
                }
                if (error.status === 401 && _this.serviceRequiresToken("getCard")) {
                    _this.refreshToken()
                        .catch(function (error) {
                        return _this.postTokenAndSave({ grantType: "device_credentials", deviceId: _this.deviceId });
                    })
                        .then(function () {
                        newParams = _this.gatherCommonHeaders(params);
                        return exports.DefaultApiFp.getCard(newParams, options)(_this.fetch, _this.basePath);
                    })
                        .then(function (result) {
                        resolve(result);
                    })
                        .catch(function (errorRefreshingToken) {
                        reject(errorRefreshingToken);
                    });
                }
                else {
                    reject(error);
                }
            });
        });
    };
    /**
    * Full card detail with version
    * Retrieves a full card detail, and its relations to other cards in a given context (card version)
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param cardId Unique identifier for this card
    * @param version Version identifier, indicates the context where the card is being requested
    * @param acceptLanguage Client locale, as language-country
    * @param products Indicates if cards should contain commercial products when available (true) or not (false)
    * @param userData Indicates if cards should contain user data when available (true) or not (false)
    * @param relations Indicates if cards should contain the scene hierarchy (true) or not (false)
    * @param imageSize Size of the images returned in the response
    */
    DiveAPIClass.prototype.getCardVersion = function (params, options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var newParams = _this.gatherCommonHeaders(params);
            exports.DefaultApiFp.getCardVersion(newParams, options)(_this.fetch, _this.basePath)
                .then(function (result) {
                resolve(result);
            })
                .catch(function (error) {
                if (error) {
                    console.log("%c REST error - getCardVersion", "background: black; color: #FE2EF7; padding: 0 10px;", error);
                }
                if (error.status === 401 && _this.serviceRequiresToken("getCardVersion")) {
                    _this.refreshToken()
                        .catch(function (error) {
                        return _this.postTokenAndSave({ grantType: "device_credentials", deviceId: _this.deviceId });
                    })
                        .then(function () {
                        newParams = _this.gatherCommonHeaders(params);
                        return exports.DefaultApiFp.getCardVersion(newParams, options)(_this.fetch, _this.basePath);
                    })
                        .then(function (result) {
                        resolve(result);
                    })
                        .catch(function (errorRefreshingToken) {
                        reject(errorRefreshingToken);
                    });
                }
                else {
                    reject(error);
                }
            });
        });
    };
    /**
    * Movie catalog info
    * Retrieves a movie&#39;s full card by its client ID, including catalog and cast information
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param clientMovieId Client movie ID being played
    * @param acceptLanguage Client locale, as language-country
    * @param imageSize Size of the images returned in the response
    */
    DiveAPIClass.prototype.getCatalogMovie = function (params, options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var newParams = _this.gatherCommonHeaders(params);
            exports.DefaultApiFp.getCatalogMovie(newParams, options)(_this.fetch, _this.basePath)
                .then(function (result) {
                resolve(result);
            })
                .catch(function (error) {
                if (error) {
                    console.log("%c REST error - getCatalogMovie", "background: black; color: #FE2EF7; padding: 0 10px;", error);
                }
                if (error.status === 401 && _this.serviceRequiresToken("getCatalogMovie")) {
                    _this.refreshToken()
                        .catch(function (error) {
                        return _this.postTokenAndSave({ grantType: "device_credentials", deviceId: _this.deviceId });
                    })
                        .then(function () {
                        newParams = _this.gatherCommonHeaders(params);
                        return exports.DefaultApiFp.getCatalogMovie(newParams, options)(_this.fetch, _this.basePath);
                    })
                        .then(function (result) {
                        resolve(result);
                    })
                        .catch(function (errorRefreshingToken) {
                        reject(errorRefreshingToken);
                    });
                }
                else {
                    reject(error);
                }
            });
        });
    };
    /**
    * Channel events grid
    * Returns the current and upcoming grid of TV events for the given channel
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param channelId Client channel ID
    * @param acceptLanguage Client locale, as language-country
    * @param imageSize Size of the images returned in the response
    */
    DiveAPIClass.prototype.getChannelGrid = function (params, options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var newParams = _this.gatherCommonHeaders(params);
            exports.DefaultApiFp.getChannelGrid(newParams, options)(_this.fetch, _this.basePath)
                .then(function (result) {
                resolve(result);
            })
                .catch(function (error) {
                if (error) {
                    console.log("%c REST error - getChannelGrid", "background: black; color: #FE2EF7; padding: 0 10px;", error);
                }
                if (error.status === 401 && _this.serviceRequiresToken("getChannelGrid")) {
                    _this.refreshToken()
                        .catch(function (error) {
                        return _this.postTokenAndSave({ grantType: "device_credentials", deviceId: _this.deviceId });
                    })
                        .then(function () {
                        newParams = _this.gatherCommonHeaders(params);
                        return exports.DefaultApiFp.getChannelGrid(newParams, options)(_this.fetch, _this.basePath);
                    })
                        .then(function (result) {
                        resolve(result);
                    })
                        .catch(function (errorRefreshingToken) {
                        reject(errorRefreshingToken);
                    });
                }
                else {
                    reject(error);
                }
            });
        });
    };
    /**
    * Channel movie catalog info
    * Retrieves full card detail, including catalog and cast information, for the content currently being broadcasted on the channel
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param channelId Client channel ID
    * @param acceptLanguage Client locale, as language-country
    * @param imageSize Size of the images returned in the response
    */
    DiveAPIClass.prototype.getChannelMovie = function (params, options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var newParams = _this.gatherCommonHeaders(params);
            exports.DefaultApiFp.getChannelMovie(newParams, options)(_this.fetch, _this.basePath)
                .then(function (result) {
                resolve(result);
            })
                .catch(function (error) {
                if (error) {
                    console.log("%c REST error - getChannelMovie", "background: black; color: #FE2EF7; padding: 0 10px;", error);
                }
                if (error.status === 401 && _this.serviceRequiresToken("getChannelMovie")) {
                    _this.refreshToken()
                        .catch(function (error) {
                        return _this.postTokenAndSave({ grantType: "device_credentials", deviceId: _this.deviceId });
                    })
                        .then(function () {
                        newParams = _this.gatherCommonHeaders(params);
                        return exports.DefaultApiFp.getChannelMovie(newParams, options)(_this.fetch, _this.basePath);
                    })
                        .then(function (result) {
                        resolve(result);
                    })
                        .catch(function (errorRefreshingToken) {
                        reject(errorRefreshingToken);
                    });
                }
                else {
                    reject(error);
                }
            });
        });
    };
    /**
    * Get card likes
    * Returns a paginated list of cards liked by current user
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param acceptLanguage Client locale, as language-country
    * @param imageSize Size of the images returned in the response
    * @param paginateKey Paginate key
    * @param size Number of desired results
    */
    DiveAPIClass.prototype.getLikes = function (params, options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var newParams = _this.gatherCommonHeaders(params);
            exports.DefaultApiFp.getLikes(newParams, options)(_this.fetch, _this.basePath)
                .then(function (result) {
                resolve(result);
            })
                .catch(function (error) {
                if (error) {
                    console.log("%c REST error - getLikes", "background: black; color: #FE2EF7; padding: 0 10px;", error);
                }
                if (error.status === 401 && _this.serviceRequiresToken("getLikes")) {
                    _this.refreshToken()
                        .catch(function (error) {
                        return _this.postTokenAndSave({ grantType: "device_credentials", deviceId: _this.deviceId });
                    })
                        .then(function () {
                        newParams = _this.gatherCommonHeaders(params);
                        return exports.DefaultApiFp.getLikes(newParams, options)(_this.fetch, _this.basePath);
                    })
                        .then(function (result) {
                        resolve(result);
                    })
                        .catch(function (errorRefreshingToken) {
                        reject(errorRefreshingToken);
                    });
                }
                else {
                    reject(error);
                }
            });
        });
    };
    /**
    * Channel sync availability
    * Checks if a list of client channel identifiers are currently broadcasting synchronizable content
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param channelIdList List of client channel IDs as a comma separated list
    * @param acceptLanguage Client locale, as language-country
    */
    DiveAPIClass.prototype.getReadyChannels = function (params, options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var newParams = _this.gatherCommonHeaders(params);
            exports.DefaultApiFp.getReadyChannels(newParams, options)(_this.fetch, _this.basePath)
                .then(function (result) {
                resolve(result);
            })
                .catch(function (error) {
                if (error) {
                    console.log("%c REST error - getReadyChannels", "background: black; color: #FE2EF7; padding: 0 10px;", error);
                }
                if (error.status === 401 && _this.serviceRequiresToken("getReadyChannels")) {
                    _this.refreshToken()
                        .catch(function (error) {
                        return _this.postTokenAndSave({ grantType: "device_credentials", deviceId: _this.deviceId });
                    })
                        .then(function () {
                        newParams = _this.gatherCommonHeaders(params);
                        return exports.DefaultApiFp.getReadyChannels(newParams, options)(_this.fetch, _this.basePath);
                    })
                        .then(function (result) {
                        resolve(result);
                    })
                        .catch(function (errorRefreshingToken) {
                        reject(errorRefreshingToken);
                    });
                }
                else {
                    reject(error);
                }
            });
        });
    };
    /**
    * Movie sync availability
    * Checks whether a list of client movie identifiers (Video On Demand) are available to be synchronized using the Dive API
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param clientMovieIdList List of client movie IDs, provided as a comma separated list
    * @param acceptLanguage Client locale, as language-country
    */
    DiveAPIClass.prototype.getReadyMovies = function (params, options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var newParams = _this.gatherCommonHeaders(params);
            exports.DefaultApiFp.getReadyMovies(newParams, options)(_this.fetch, _this.basePath)
                .then(function (result) {
                resolve(result);
            })
                .catch(function (error) {
                if (error) {
                    console.log("%c REST error - getReadyMovies", "background: black; color: #FE2EF7; padding: 0 10px;", error);
                }
                if (error.status === 401 && _this.serviceRequiresToken("getReadyMovies")) {
                    _this.refreshToken()
                        .catch(function (error) {
                        return _this.postTokenAndSave({ grantType: "device_credentials", deviceId: _this.deviceId });
                    })
                        .then(function () {
                        newParams = _this.gatherCommonHeaders(params);
                        return exports.DefaultApiFp.getReadyMovies(newParams, options)(_this.fetch, _this.basePath);
                    })
                        .then(function (result) {
                        resolve(result);
                    })
                        .catch(function (errorRefreshingToken) {
                        reject(errorRefreshingToken);
                    });
                }
                else {
                    reject(error);
                }
            });
        });
    };
    /**
    * Static channel scene
    * Retrieves the list of cards related to the content currently being broadcasted in the provided channel
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param channelId Client channel ID
    * @param acceptLanguage Client locale, as language-country
    * @param relations Indicates if cards should contain the scene hierarchy (true) or not (false)
    * @param imageSize Size of the images returned in the response
    */
    DiveAPIClass.prototype.getStaticChannelScene = function (params, options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var newParams = _this.gatherCommonHeaders(params);
            exports.DefaultApiFp.getStaticChannelScene(newParams, options)(_this.fetch, _this.basePath)
                .then(function (result) {
                resolve(result);
            })
                .catch(function (error) {
                if (error) {
                    console.log("%c REST error - getStaticChannelScene", "background: black; color: #FE2EF7; padding: 0 10px;", error);
                }
                if (error.status === 401 && _this.serviceRequiresToken("getStaticChannelScene")) {
                    _this.refreshToken()
                        .catch(function (error) {
                        return _this.postTokenAndSave({ grantType: "device_credentials", deviceId: _this.deviceId });
                    })
                        .then(function () {
                        newParams = _this.gatherCommonHeaders(params);
                        return exports.DefaultApiFp.getStaticChannelScene(newParams, options)(_this.fetch, _this.basePath);
                    })
                        .then(function (result) {
                        resolve(result);
                    })
                        .catch(function (errorRefreshingToken) {
                        reject(errorRefreshingToken);
                    });
                }
                else {
                    reject(error);
                }
            });
        });
    };
    /**
    * Static VOD scene
    * Retrieves the current list of cards related to the given movie scene
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param clientMovieId Client movie ID being played
    * @param timestamp Current movie timestamp in seconds
    * @param acceptLanguage Client locale, as language-country
    * @param relations Indicates if cards should contain the scene hierarchy (true) or not (false)
    * @param imageSize Size of the images returned in the response
    */
    DiveAPIClass.prototype.getStaticMovieScene = function (params, options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var newParams = _this.gatherCommonHeaders(params);
            exports.DefaultApiFp.getStaticMovieScene(newParams, options)(_this.fetch, _this.basePath)
                .then(function (result) {
                resolve(result);
            })
                .catch(function (error) {
                if (error) {
                    console.log("%c REST error - getStaticMovieScene", "background: black; color: #FE2EF7; padding: 0 10px;", error);
                }
                if (error.status === 401 && _this.serviceRequiresToken("getStaticMovieScene")) {
                    _this.refreshToken()
                        .catch(function (error) {
                        return _this.postTokenAndSave({ grantType: "device_credentials", deviceId: _this.deviceId });
                    })
                        .then(function () {
                        newParams = _this.gatherCommonHeaders(params);
                        return exports.DefaultApiFp.getStaticMovieScene(newParams, options)(_this.fetch, _this.basePath);
                    })
                        .then(function (result) {
                        resolve(result);
                    })
                        .catch(function (errorRefreshingToken) {
                        reject(errorRefreshingToken);
                    });
                }
                else {
                    reject(error);
                }
            });
        });
    };
    /**
    * Add card like
    * Stores a card under current user&#39;s likes list
    * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;)
    * @param cardId Requested card ID
    * @param acceptLanguage Client locale, as language-country
    */
    DiveAPIClass.prototype.postLikes = function (params, options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var newParams = _this.gatherCommonHeaders(params);
            exports.DefaultApiFp.postLikes(newParams, options)(_this.fetch, _this.basePath)
                .then(function (result) {
                resolve(result);
            })
                .catch(function (error) {
                if (error) {
                    console.log("%c REST error - postLikes", "background: black; color: #FE2EF7; padding: 0 10px;", error);
                }
                if (error.status === 401 && _this.serviceRequiresToken("postLikes")) {
                    _this.refreshToken()
                        .catch(function (error) {
                        return _this.postTokenAndSave({ grantType: "device_credentials", deviceId: _this.deviceId });
                    })
                        .then(function () {
                        newParams = _this.gatherCommonHeaders(params);
                        return exports.DefaultApiFp.postLikes(newParams, options)(_this.fetch, _this.basePath);
                    })
                        .then(function (result) {
                        resolve(result);
                    })
                        .catch(function (errorRefreshingToken) {
                        reject(errorRefreshingToken);
                    });
                }
                else {
                    reject(error);
                }
            });
        });
    };
    /**
    * Token endpoint
    * The token endpoint is used to obtain access tokens which allow clients to make API requests
    * @param authorization Basic authorization token (&#39;Basic &lt;client_key&gt;&#39;)
    * @param grantType Grant type used to obtain the token.
    * @param acceptLanguage Client locale, as language-country
    * @param deviceId Device identifier, must uniquely identify the user or device accessing the API. Required only for \&quot;device_credentials\&quot; grant type
    * @param refreshToken Refresh token, used to issue a new token without resending client credentials. Required only for \&quot;refresh_token\&quot; grant type
    */
    DiveAPIClass.prototype.postToken = function (params, options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var newParams = _this.gatherCommonHeaders(params);
            exports.DefaultApiFp.postToken(newParams, options)(_this.fetch, _this.basePath)
                .then(function (result) {
                resolve(result);
            })
                .catch(function (error) {
                if (error) {
                    console.log("%c REST error - postToken", "background: black; color: #FE2EF7; padding: 0 10px;", error);
                }
                if (error.status === 401 && _this.serviceRequiresToken("postToken")) {
                    _this.refreshToken()
                        .catch(function (error) {
                        return _this.postTokenAndSave({ grantType: "device_credentials", deviceId: _this.deviceId });
                    })
                        .then(function () {
                        newParams = _this.gatherCommonHeaders(params);
                        return exports.DefaultApiFp.postToken(newParams, options)(_this.fetch, _this.basePath);
                    })
                        .then(function (result) {
                        resolve(result);
                    })
                        .catch(function (errorRefreshingToken) {
                        reject(errorRefreshingToken);
                    });
                }
                else {
                    reject(error);
                }
            });
        });
    };
    DiveAPIClass.prototype.serviceRequiresToken = function (methodName) {
        return this.noAuthServices.indexOf(methodName) === -1;
    };
    DiveAPIClass.prototype.writeTokenToCookie = function (newToken) {
        return this.setCookie("dive_token", JSON.stringify(newToken), newToken.expires_in);
    };
    DiveAPIClass.prototype.writeTokenToWebStorage = function (newToken) {
        if (window.localStorage) {
            window.localStorage.setItem("dive_token", JSON.stringify(newToken));
        }
    };
    DiveAPIClass.prototype.refreshToken = function () {
        var currToken = this.getSavedToken();
        var auth = "Basic " + this.apiKey;
        if (currToken && currToken.refresh_token) {
            return this.postTokenAndSave({ grantType: "refresh_token", refreshToken: currToken.refresh_token });
        }
        else {
            return this.postTokenAndSave({ grantType: "device_credentials", deviceId: this.deviceId });
        }
    };
    DiveAPIClass.prototype.setCookie = function (cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
    };
    DiveAPIClass.prototype.getCookie = function (cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        return "";
    };
    DiveAPIClass.prototype.getTokenFromCookies = function () {
        var token = this.getCookie("dive_token");
        if (token) {
            try {
                return JSON.parse(token);
            }
            catch (e) {
                return undefined;
            }
        }
        else {
            return undefined;
        }
    };
    DiveAPIClass.prototype.getTokenFromWebStorage = function () {
        if (window.localStorage) {
            try {
                return window.localStorage.getItem("dive_token");
            }
            catch (e) {
                return undefined;
            }
        }
    };
    DiveAPIClass.prototype.deleteTokenFromWebStorage = function () {
        if (window.localStorage) {
            window.localStorage.removeItem("dive_token");
        }
    };
    DiveAPIClass.prototype.deleteTokenFromCookies = function () {
        var name = "dive_token";
        document.cookie = name + '=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    };
    return DiveAPIClass;
}(DefaultApi));
exports.DiveAPIClass = DiveAPIClass;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var punycode = __webpack_require__(35);
var util = __webpack_require__(36);

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = __webpack_require__(13);

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return punycode;
		}.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)(module), __webpack_require__(0)))

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

// the whatwg-fetch polyfill installs the fetch() function
// on the global object (window or self)
//
// Return that as the export for use in Webpack, Browserify etc.
__webpack_require__(38);
module.exports = self.fetch.bind(self);


/***/ }),
/* 38 */
/***/ (function(module, exports) {

(function(self) {
  'use strict';

  if (self.fetch) {
    return
  }

  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob: 'FileReader' in self && 'Blob' in self && (function() {
      try {
        new Blob()
        return true
      } catch(e) {
        return false
      }
    })(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  }

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ]

    var isDataView = function(obj) {
      return obj && DataView.prototype.isPrototypeOf(obj)
    }

    var isArrayBufferView = ArrayBuffer.isView || function(obj) {
      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
    }
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name)
    }
    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value)
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift()
        return {done: value === undefined, value: value}
      }
    }

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      }
    }

    return iterator
  }

  function Headers(headers) {
    this.map = {}

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value)
      }, this)
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        this.append(header[0], header[1])
      }, this)
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name])
      }, this)
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name)
    value = normalizeValue(value)
    var oldValue = this.map[name]
    this.map[name] = oldValue ? oldValue+','+value : value
  }

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)]
  }

  Headers.prototype.get = function(name) {
    name = normalizeName(name)
    return this.has(name) ? this.map[name] : null
  }

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  }

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value)
  }

  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this)
      }
    }
  }

  Headers.prototype.keys = function() {
    var items = []
    this.forEach(function(value, name) { items.push(name) })
    return iteratorFor(items)
  }

  Headers.prototype.values = function() {
    var items = []
    this.forEach(function(value) { items.push(value) })
    return iteratorFor(items)
  }

  Headers.prototype.entries = function() {
    var items = []
    this.forEach(function(value, name) { items.push([name, value]) })
    return iteratorFor(items)
  }

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result)
      }
      reader.onerror = function() {
        reject(reader.error)
      }
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader()
    var promise = fileReaderReady(reader)
    reader.readAsArrayBuffer(blob)
    return promise
  }

  function readBlobAsText(blob) {
    var reader = new FileReader()
    var promise = fileReaderReady(reader)
    reader.readAsText(blob)
    return promise
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf)
    var chars = new Array(view.length)

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i])
    }
    return chars.join('')
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength)
      view.set(new Uint8Array(buf))
      return view.buffer
    }
  }

  function Body() {
    this.bodyUsed = false

    this._initBody = function(body) {
      this._bodyInit = body
      if (!body) {
        this._bodyText = ''
      } else if (typeof body === 'string') {
        this._bodyText = body
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString()
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer)
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer])
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body)
      } else {
        throw new Error('unsupported BodyInit type')
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8')
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type)
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
        }
      }
    }

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this)
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      }

      this.arrayBuffer = function() {
        if (this._bodyArrayBuffer) {
          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
        } else {
          return this.blob().then(readBlobAsArrayBuffer)
        }
      }
    }

    this.text = function() {
      var rejected = consumed(this)
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text')
      } else {
        return Promise.resolve(this._bodyText)
      }
    }

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      }
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    }

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']

  function normalizeMethod(method) {
    var upcased = method.toUpperCase()
    return (methods.indexOf(upcased) > -1) ? upcased : method
  }

  function Request(input, options) {
    options = options || {}
    var body = options.body

    if (input instanceof Request) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url
      this.credentials = input.credentials
      if (!options.headers) {
        this.headers = new Headers(input.headers)
      }
      this.method = input.method
      this.mode = input.mode
      if (!body && input._bodyInit != null) {
        body = input._bodyInit
        input.bodyUsed = true
      }
    } else {
      this.url = String(input)
    }

    this.credentials = options.credentials || this.credentials || 'omit'
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers)
    }
    this.method = normalizeMethod(options.method || this.method || 'GET')
    this.mode = options.mode || this.mode || null
    this.referrer = null

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body)
  }

  Request.prototype.clone = function() {
    return new Request(this, { body: this._bodyInit })
  }

  function decode(body) {
    var form = new FormData()
    body.trim().split('&').forEach(function(bytes) {
      if (bytes) {
        var split = bytes.split('=')
        var name = split.shift().replace(/\+/g, ' ')
        var value = split.join('=').replace(/\+/g, ' ')
        form.append(decodeURIComponent(name), decodeURIComponent(value))
      }
    })
    return form
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers()
    rawHeaders.split(/\r?\n/).forEach(function(line) {
      var parts = line.split(':')
      var key = parts.shift().trim()
      if (key) {
        var value = parts.join(':').trim()
        headers.append(key, value)
      }
    })
    return headers
  }

  Body.call(Request.prototype)

  function Response(bodyInit, options) {
    if (!options) {
      options = {}
    }

    this.type = 'default'
    this.status = 'status' in options ? options.status : 200
    this.ok = this.status >= 200 && this.status < 300
    this.statusText = 'statusText' in options ? options.statusText : 'OK'
    this.headers = new Headers(options.headers)
    this.url = options.url || ''
    this._initBody(bodyInit)
  }

  Body.call(Response.prototype)

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  }

  Response.error = function() {
    var response = new Response(null, {status: 0, statusText: ''})
    response.type = 'error'
    return response
  }

  var redirectStatuses = [301, 302, 303, 307, 308]

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  }

  self.Headers = Headers
  self.Request = Request
  self.Response = Response

  self.fetch = function(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init)
      var xhr = new XMLHttpRequest()

      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        }
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
        var body = 'response' in xhr ? xhr.response : xhr.responseText
        resolve(new Response(body, options))
      }

      xhr.onerror = function() {
        reject(new TypeError('Network request failed'))
      }

      xhr.ontimeout = function() {
        reject(new TypeError('Network request failed'))
      }

      xhr.open(request.method, request.url, true)

      if (request.credentials === 'include') {
        xhr.withCredentials = true
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob'
      }

      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value)
      })

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
    })
  }
  self.fetch.polyfill = true
})(typeof self !== 'undefined' ? self : this);


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var url = __webpack_require__(40);
var parser = __webpack_require__(6);
var Manager = __webpack_require__(18);
var debug = __webpack_require__(1)('socket.io-client');

/**
 * Module exports.
 */

module.exports = exports = lookup;

/**
 * Managers cache.
 */

var cache = exports.managers = {};

/**
 * Looks up an existing `Manager` for multiplexing.
 * If the user summons:
 *
 *   `io('http://localhost/a');`
 *   `io('http://localhost/b');`
 *
 * We reuse the existing instance based on same scheme/port/host,
 * and we initialize sockets for each namespace.
 *
 * @api public
 */

function lookup (uri, opts) {
  if (typeof uri === 'object') {
    opts = uri;
    uri = undefined;
  }

  opts = opts || {};

  var parsed = url(uri);
  var source = parsed.source;
  var id = parsed.id;
  var path = parsed.path;
  var sameNamespace = cache[id] && path in cache[id].nsps;
  var newConnection = opts.forceNew || opts['force new connection'] ||
                      false === opts.multiplex || sameNamespace;

  var io;

  if (newConnection) {
    debug('ignoring socket cache for %s', source);
    io = Manager(source, opts);
  } else {
    if (!cache[id]) {
      debug('new io instance for %s', source);
      cache[id] = Manager(source, opts);
    }
    io = cache[id];
  }
  if (parsed.query && !opts.query) {
    opts.query = parsed.query;
  }
  return io.socket(parsed.path, opts);
}

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = parser.protocol;

/**
 * `connect`.
 *
 * @param {String} uri
 * @api public
 */

exports.connect = lookup;

/**
 * Expose constructors for standalone build.
 *
 * @api public
 */

exports.Manager = __webpack_require__(18);
exports.Socket = __webpack_require__(23);


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module dependencies.
 */

var parseuri = __webpack_require__(15);
var debug = __webpack_require__(1)('socket.io-client:url');

/**
 * Module exports.
 */

module.exports = url;

/**
 * URL parser.
 *
 * @param {String} url
 * @param {Object} An object meant to mimic window.location.
 *                 Defaults to window.location.
 * @api public
 */

function url (uri, loc) {
  var obj = uri;

  // default to window.location
  loc = loc || global.location;
  if (null == uri) uri = loc.protocol + '//' + loc.host;

  // relative path support
  if ('string' === typeof uri) {
    if ('/' === uri.charAt(0)) {
      if ('/' === uri.charAt(1)) {
        uri = loc.protocol + uri;
      } else {
        uri = loc.host + uri;
      }
    }

    if (!/^(https?|wss?):\/\//.test(uri)) {
      debug('protocol-less url %s', uri);
      if ('undefined' !== typeof loc) {
        uri = loc.protocol + '//' + uri;
      } else {
        uri = 'https://' + uri;
      }
    }

    // parse
    debug('parse %s', uri);
    obj = parseuri(uri);
  }

  // make sure we treat `localhost:80` and `localhost` equally
  if (!obj.port) {
    if (/^(http|ws)$/.test(obj.protocol)) {
      obj.port = '80';
    } else if (/^(http|ws)s$/.test(obj.protocol)) {
      obj.port = '443';
    }
  }

  obj.path = obj.path || '/';

  var ipv6 = obj.host.indexOf(':') !== -1;
  var host = ipv6 ? '[' + obj.host + ']' : obj.host;

  // define unique id
  obj.id = obj.protocol + '://' + host + ':' + obj.port;
  // define href
  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : (':' + obj.port));

  return obj;
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 41 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(43);

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  return debug;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),
/* 43 */
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}


/***/ }),
/* 44 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/*global Blob,File*/

/**
 * Module requirements
 */

var isArray = __webpack_require__(46);
var isBuf = __webpack_require__(17);
var toString = Object.prototype.toString;
var withNativeBlob = typeof global.Blob === 'function' || toString.call(global.Blob) === '[object BlobConstructor]';
var withNativeFile = typeof global.File === 'function' || toString.call(global.File) === '[object FileConstructor]';

/**
 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
 * Anything with blobs or files should be fed through removeBlobs before coming
 * here.
 *
 * @param {Object} packet - socket.io event packet
 * @return {Object} with deconstructed packet and list of buffers
 * @api public
 */

exports.deconstructPacket = function(packet) {
  var buffers = [];
  var packetData = packet.data;
  var pack = packet;
  pack.data = _deconstructPacket(packetData, buffers);
  pack.attachments = buffers.length; // number of binary 'attachments'
  return {packet: pack, buffers: buffers};
};

function _deconstructPacket(data, buffers) {
  if (!data) return data;

  if (isBuf(data)) {
    var placeholder = { _placeholder: true, num: buffers.length };
    buffers.push(data);
    return placeholder;
  } else if (isArray(data)) {
    var newData = new Array(data.length);
    for (var i = 0; i < data.length; i++) {
      newData[i] = _deconstructPacket(data[i], buffers);
    }
    return newData;
  } else if (typeof data === 'object' && !(data instanceof Date)) {
    var newData = {};
    for (var key in data) {
      newData[key] = _deconstructPacket(data[key], buffers);
    }
    return newData;
  }
  return data;
}

/**
 * Reconstructs a binary packet from its placeholder packet and buffers
 *
 * @param {Object} packet - event packet with placeholders
 * @param {Array} buffers - binary buffers to put in placeholder positions
 * @return {Object} reconstructed packet
 * @api public
 */

exports.reconstructPacket = function(packet, buffers) {
  packet.data = _reconstructPacket(packet.data, buffers);
  packet.attachments = undefined; // no longer useful
  return packet;
};

function _reconstructPacket(data, buffers) {
  if (!data) return data;

  if (data && data._placeholder) {
    return buffers[data.num]; // appropriate buffer (should be natural order anyway)
  } else if (isArray(data)) {
    for (var i = 0; i < data.length; i++) {
      data[i] = _reconstructPacket(data[i], buffers);
    }
  } else if (typeof data === 'object') {
    for (var key in data) {
      data[key] = _reconstructPacket(data[key], buffers);
    }
  }

  return data;
}

/**
 * Asynchronously removes Blobs or Files from data via
 * FileReader's readAsArrayBuffer method. Used before encoding
 * data as msgpack. Calls callback with the blobless data.
 *
 * @param {Object} data
 * @param {Function} callback
 * @api private
 */

exports.removeBlobs = function(data, callback) {
  function _removeBlobs(obj, curKey, containingObject) {
    if (!obj) return obj;

    // convert any blob
    if ((withNativeBlob && obj instanceof Blob) ||
        (withNativeFile && obj instanceof File)) {
      pendingBlobs++;

      // async filereader
      var fileReader = new FileReader();
      fileReader.onload = function() { // this.result == arraybuffer
        if (containingObject) {
          containingObject[curKey] = this.result;
        }
        else {
          bloblessData = this.result;
        }

        // if nothing pending its callback time
        if(! --pendingBlobs) {
          callback(bloblessData);
        }
      };

      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
    } else if (isArray(obj)) { // handle array
      for (var i = 0; i < obj.length; i++) {
        _removeBlobs(obj[i], i, obj);
      }
    } else if (typeof obj === 'object' && !isBuf(obj)) { // and object
      for (var key in obj) {
        _removeBlobs(obj[key], key, obj);
      }
    }
  }

  var pendingBlobs = 0;
  var bloblessData = data;
  _removeBlobs(bloblessData);
  if (!pendingBlobs) {
    callback(bloblessData);
  }
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 46 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {


module.exports = __webpack_require__(48);


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {


module.exports = __webpack_require__(49);

/**
 * Exports parser
 *
 * @api public
 *
 */
module.exports.parser = __webpack_require__(3);


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Module dependencies.
 */

var transports = __webpack_require__(19);
var Emitter = __webpack_require__(2);
var debug = __webpack_require__(1)('engine.io-client:socket');
var index = __webpack_require__(22);
var parser = __webpack_require__(3);
var parseuri = __webpack_require__(15);
var parsejson = __webpack_require__(61);
var parseqs = __webpack_require__(4);

/**
 * Module exports.
 */

module.exports = Socket;

/**
 * Socket constructor.
 *
 * @param {String|Object} uri or options
 * @param {Object} options
 * @api public
 */

function Socket (uri, opts) {
  if (!(this instanceof Socket)) return new Socket(uri, opts);

  opts = opts || {};

  if (uri && 'object' === typeof uri) {
    opts = uri;
    uri = null;
  }

  if (uri) {
    uri = parseuri(uri);
    opts.hostname = uri.host;
    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
    opts.port = uri.port;
    if (uri.query) opts.query = uri.query;
  } else if (opts.host) {
    opts.hostname = parseuri(opts.host).host;
  }

  this.secure = null != opts.secure ? opts.secure
    : (global.location && 'https:' === location.protocol);

  if (opts.hostname && !opts.port) {
    // if no port is specified manually, use the protocol default
    opts.port = this.secure ? '443' : '80';
  }

  this.agent = opts.agent || false;
  this.hostname = opts.hostname ||
    (global.location ? location.hostname : 'localhost');
  this.port = opts.port || (global.location && location.port
      ? location.port
      : (this.secure ? 443 : 80));
  this.query = opts.query || {};
  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);
  this.upgrade = false !== opts.upgrade;
  this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
  this.forceJSONP = !!opts.forceJSONP;
  this.jsonp = false !== opts.jsonp;
  this.forceBase64 = !!opts.forceBase64;
  this.enablesXDR = !!opts.enablesXDR;
  this.timestampParam = opts.timestampParam || 't';
  this.timestampRequests = opts.timestampRequests;
  this.transports = opts.transports || ['polling', 'websocket'];
  this.transportOptions = opts.transportOptions || {};
  this.readyState = '';
  this.writeBuffer = [];
  this.prevBufferLen = 0;
  this.policyPort = opts.policyPort || 843;
  this.rememberUpgrade = opts.rememberUpgrade || false;
  this.binaryType = null;
  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;

  if (true === this.perMessageDeflate) this.perMessageDeflate = {};
  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
    this.perMessageDeflate.threshold = 1024;
  }

  // SSL options for Node.js client
  this.pfx = opts.pfx || null;
  this.key = opts.key || null;
  this.passphrase = opts.passphrase || null;
  this.cert = opts.cert || null;
  this.ca = opts.ca || null;
  this.ciphers = opts.ciphers || null;
  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;
  this.forceNode = !!opts.forceNode;

  // other options for Node.js client
  var freeGlobal = typeof global === 'object' && global;
  if (freeGlobal.global === freeGlobal) {
    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
      this.extraHeaders = opts.extraHeaders;
    }

    if (opts.localAddress) {
      this.localAddress = opts.localAddress;
    }
  }

  // set on handshake
  this.id = null;
  this.upgrades = null;
  this.pingInterval = null;
  this.pingTimeout = null;

  // set on heartbeat
  this.pingIntervalTimer = null;
  this.pingTimeoutTimer = null;

  this.open();
}

Socket.priorWebsocketSuccess = false;

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Protocol version.
 *
 * @api public
 */

Socket.protocol = parser.protocol; // this is an int

/**
 * Expose deps for legacy compatibility
 * and standalone browser access.
 */

Socket.Socket = Socket;
Socket.Transport = __webpack_require__(8);
Socket.transports = __webpack_require__(19);
Socket.parser = __webpack_require__(3);

/**
 * Creates transport of the given type.
 *
 * @param {String} transport name
 * @return {Transport}
 * @api private
 */

Socket.prototype.createTransport = function (name) {
  debug('creating transport "%s"', name);
  var query = clone(this.query);

  // append engine.io protocol identifier
  query.EIO = parser.protocol;

  // transport name
  query.transport = name;

  // per-transport options
  var options = this.transportOptions[name] || {};

  // session id if we already have one
  if (this.id) query.sid = this.id;

  var transport = new transports[name]({
    query: query,
    socket: this,
    agent: options.agent || this.agent,
    hostname: options.hostname || this.hostname,
    port: options.port || this.port,
    secure: options.secure || this.secure,
    path: options.path || this.path,
    forceJSONP: options.forceJSONP || this.forceJSONP,
    jsonp: options.jsonp || this.jsonp,
    forceBase64: options.forceBase64 || this.forceBase64,
    enablesXDR: options.enablesXDR || this.enablesXDR,
    timestampRequests: options.timestampRequests || this.timestampRequests,
    timestampParam: options.timestampParam || this.timestampParam,
    policyPort: options.policyPort || this.policyPort,
    pfx: options.pfx || this.pfx,
    key: options.key || this.key,
    passphrase: options.passphrase || this.passphrase,
    cert: options.cert || this.cert,
    ca: options.ca || this.ca,
    ciphers: options.ciphers || this.ciphers,
    rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,
    perMessageDeflate: options.perMessageDeflate || this.perMessageDeflate,
    extraHeaders: options.extraHeaders || this.extraHeaders,
    forceNode: options.forceNode || this.forceNode,
    localAddress: options.localAddress || this.localAddress,
    requestTimeout: options.requestTimeout || this.requestTimeout,
    protocols: options.protocols || void (0)
  });

  return transport;
};

function clone (obj) {
  var o = {};
  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      o[i] = obj[i];
    }
  }
  return o;
}

/**
 * Initializes transport to use and starts probe.
 *
 * @api private
 */
Socket.prototype.open = function () {
  var transport;
  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {
    transport = 'websocket';
  } else if (0 === this.transports.length) {
    // Emit error on next tick so it can be listened to
    var self = this;
    setTimeout(function () {
      self.emit('error', 'No transports available');
    }, 0);
    return;
  } else {
    transport = this.transports[0];
  }
  this.readyState = 'opening';

  // Retry with the next transport if the transport is disabled (jsonp: false)
  try {
    transport = this.createTransport(transport);
  } catch (e) {
    this.transports.shift();
    this.open();
    return;
  }

  transport.open();
  this.setTransport(transport);
};

/**
 * Sets the current transport. Disables the existing one (if any).
 *
 * @api private
 */

Socket.prototype.setTransport = function (transport) {
  debug('setting transport %s', transport.name);
  var self = this;

  if (this.transport) {
    debug('clearing existing transport %s', this.transport.name);
    this.transport.removeAllListeners();
  }

  // set up transport
  this.transport = transport;

  // set up transport listeners
  transport
  .on('drain', function () {
    self.onDrain();
  })
  .on('packet', function (packet) {
    self.onPacket(packet);
  })
  .on('error', function (e) {
    self.onError(e);
  })
  .on('close', function () {
    self.onClose('transport close');
  });
};

/**
 * Probes a transport.
 *
 * @param {String} transport name
 * @api private
 */

Socket.prototype.probe = function (name) {
  debug('probing transport "%s"', name);
  var transport = this.createTransport(name, { probe: 1 });
  var failed = false;
  var self = this;

  Socket.priorWebsocketSuccess = false;

  function onTransportOpen () {
    if (self.onlyBinaryUpgrades) {
      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
      failed = failed || upgradeLosesBinary;
    }
    if (failed) return;

    debug('probe transport "%s" opened', name);
    transport.send([{ type: 'ping', data: 'probe' }]);
    transport.once('packet', function (msg) {
      if (failed) return;
      if ('pong' === msg.type && 'probe' === msg.data) {
        debug('probe transport "%s" pong', name);
        self.upgrading = true;
        self.emit('upgrading', transport);
        if (!transport) return;
        Socket.priorWebsocketSuccess = 'websocket' === transport.name;

        debug('pausing current transport "%s"', self.transport.name);
        self.transport.pause(function () {
          if (failed) return;
          if ('closed' === self.readyState) return;
          debug('changing transport and sending upgrade packet');

          cleanup();

          self.setTransport(transport);
          transport.send([{ type: 'upgrade' }]);
          self.emit('upgrade', transport);
          transport = null;
          self.upgrading = false;
          self.flush();
        });
      } else {
        debug('probe transport "%s" failed', name);
        var err = new Error('probe error');
        err.transport = transport.name;
        self.emit('upgradeError', err);
      }
    });
  }

  function freezeTransport () {
    if (failed) return;

    // Any callback called by transport should be ignored since now
    failed = true;

    cleanup();

    transport.close();
    transport = null;
  }

  // Handle any error that happens while probing
  function onerror (err) {
    var error = new Error('probe error: ' + err);
    error.transport = transport.name;

    freezeTransport();

    debug('probe transport "%s" failed because of error: %s', name, err);

    self.emit('upgradeError', error);
  }

  function onTransportClose () {
    onerror('transport closed');
  }

  // When the socket is closed while we're probing
  function onclose () {
    onerror('socket closed');
  }

  // When the socket is upgraded while we're probing
  function onupgrade (to) {
    if (transport && to.name !== transport.name) {
      debug('"%s" works - aborting "%s"', to.name, transport.name);
      freezeTransport();
    }
  }

  // Remove all listeners on the transport and on self
  function cleanup () {
    transport.removeListener('open', onTransportOpen);
    transport.removeListener('error', onerror);
    transport.removeListener('close', onTransportClose);
    self.removeListener('close', onclose);
    self.removeListener('upgrading', onupgrade);
  }

  transport.once('open', onTransportOpen);
  transport.once('error', onerror);
  transport.once('close', onTransportClose);

  this.once('close', onclose);
  this.once('upgrading', onupgrade);

  transport.open();
};

/**
 * Called when connection is deemed open.
 *
 * @api public
 */

Socket.prototype.onOpen = function () {
  debug('socket open');
  this.readyState = 'open';
  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;
  this.emit('open');
  this.flush();

  // we check for `readyState` in case an `open`
  // listener already closed the socket
  if ('open' === this.readyState && this.upgrade && this.transport.pause) {
    debug('starting upgrade probes');
    for (var i = 0, l = this.upgrades.length; i < l; i++) {
      this.probe(this.upgrades[i]);
    }
  }
};

/**
 * Handles a packet.
 *
 * @api private
 */

Socket.prototype.onPacket = function (packet) {
  if ('opening' === this.readyState || 'open' === this.readyState ||
      'closing' === this.readyState) {
    debug('socket receive: type "%s", data "%s"', packet.type, packet.data);

    this.emit('packet', packet);

    // Socket is live - any packet counts
    this.emit('heartbeat');

    switch (packet.type) {
      case 'open':
        this.onHandshake(parsejson(packet.data));
        break;

      case 'pong':
        this.setPing();
        this.emit('pong');
        break;

      case 'error':
        var err = new Error('server error');
        err.code = packet.data;
        this.onError(err);
        break;

      case 'message':
        this.emit('data', packet.data);
        this.emit('message', packet.data);
        break;
    }
  } else {
    debug('packet received with socket readyState "%s"', this.readyState);
  }
};

/**
 * Called upon handshake completion.
 *
 * @param {Object} handshake obj
 * @api private
 */

Socket.prototype.onHandshake = function (data) {
  this.emit('handshake', data);
  this.id = data.sid;
  this.transport.query.sid = data.sid;
  this.upgrades = this.filterUpgrades(data.upgrades);
  this.pingInterval = data.pingInterval;
  this.pingTimeout = data.pingTimeout;
  this.onOpen();
  // In case open handler closes socket
  if ('closed' === this.readyState) return;
  this.setPing();

  // Prolong liveness of socket on heartbeat
  this.removeListener('heartbeat', this.onHeartbeat);
  this.on('heartbeat', this.onHeartbeat);
};

/**
 * Resets ping timeout.
 *
 * @api private
 */

Socket.prototype.onHeartbeat = function (timeout) {
  clearTimeout(this.pingTimeoutTimer);
  var self = this;
  self.pingTimeoutTimer = setTimeout(function () {
    if ('closed' === self.readyState) return;
    self.onClose('ping timeout');
  }, timeout || (self.pingInterval + self.pingTimeout));
};

/**
 * Pings server every `this.pingInterval` and expects response
 * within `this.pingTimeout` or closes connection.
 *
 * @api private
 */

Socket.prototype.setPing = function () {
  var self = this;
  clearTimeout(self.pingIntervalTimer);
  self.pingIntervalTimer = setTimeout(function () {
    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
    self.ping();
    self.onHeartbeat(self.pingTimeout);
  }, self.pingInterval);
};

/**
* Sends a ping packet.
*
* @api private
*/

Socket.prototype.ping = function () {
  var self = this;
  this.sendPacket('ping', function () {
    self.emit('ping');
  });
};

/**
 * Called on `drain` event
 *
 * @api private
 */

Socket.prototype.onDrain = function () {
  this.writeBuffer.splice(0, this.prevBufferLen);

  // setting prevBufferLen = 0 is very important
  // for example, when upgrading, upgrade packet is sent over,
  // and a nonzero prevBufferLen could cause problems on `drain`
  this.prevBufferLen = 0;

  if (0 === this.writeBuffer.length) {
    this.emit('drain');
  } else {
    this.flush();
  }
};

/**
 * Flush write buffers.
 *
 * @api private
 */

Socket.prototype.flush = function () {
  if ('closed' !== this.readyState && this.transport.writable &&
    !this.upgrading && this.writeBuffer.length) {
    debug('flushing %d packets in socket', this.writeBuffer.length);
    this.transport.send(this.writeBuffer);
    // keep track of current length of writeBuffer
    // splice writeBuffer and callbackBuffer on `drain`
    this.prevBufferLen = this.writeBuffer.length;
    this.emit('flush');
  }
};

/**
 * Sends a message.
 *
 * @param {String} message.
 * @param {Function} callback function.
 * @param {Object} options.
 * @return {Socket} for chaining.
 * @api public
 */

Socket.prototype.write =
Socket.prototype.send = function (msg, options, fn) {
  this.sendPacket('message', msg, options, fn);
  return this;
};

/**
 * Sends a packet.
 *
 * @param {String} packet type.
 * @param {String} data.
 * @param {Object} options.
 * @param {Function} callback function.
 * @api private
 */

Socket.prototype.sendPacket = function (type, data, options, fn) {
  if ('function' === typeof data) {
    fn = data;
    data = undefined;
  }

  if ('function' === typeof options) {
    fn = options;
    options = null;
  }

  if ('closing' === this.readyState || 'closed' === this.readyState) {
    return;
  }

  options = options || {};
  options.compress = false !== options.compress;

  var packet = {
    type: type,
    data: data,
    options: options
  };
  this.emit('packetCreate', packet);
  this.writeBuffer.push(packet);
  if (fn) this.once('flush', fn);
  this.flush();
};

/**
 * Closes the connection.
 *
 * @api private
 */

Socket.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.readyState = 'closing';

    var self = this;

    if (this.writeBuffer.length) {
      this.once('drain', function () {
        if (this.upgrading) {
          waitForUpgrade();
        } else {
          close();
        }
      });
    } else if (this.upgrading) {
      waitForUpgrade();
    } else {
      close();
    }
  }

  function close () {
    self.onClose('forced close');
    debug('socket closing - telling transport to close');
    self.transport.close();
  }

  function cleanupAndClose () {
    self.removeListener('upgrade', cleanupAndClose);
    self.removeListener('upgradeError', cleanupAndClose);
    close();
  }

  function waitForUpgrade () {
    // wait for upgrade to finish since we can't send packets while pausing a transport
    self.once('upgrade', cleanupAndClose);
    self.once('upgradeError', cleanupAndClose);
  }

  return this;
};

/**
 * Called upon transport error
 *
 * @api private
 */

Socket.prototype.onError = function (err) {
  debug('socket error %j', err);
  Socket.priorWebsocketSuccess = false;
  this.emit('error', err);
  this.onClose('transport error', err);
};

/**
 * Called upon transport close.
 *
 * @api private
 */

Socket.prototype.onClose = function (reason, desc) {
  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
    debug('socket close with reason: "%s"', reason);
    var self = this;

    // clear timers
    clearTimeout(this.pingIntervalTimer);
    clearTimeout(this.pingTimeoutTimer);

    // stop event from firing again for transport
    this.transport.removeAllListeners('close');

    // ensure transport won't stay open
    this.transport.close();

    // ignore further transport communication
    this.transport.removeAllListeners();

    // set ready state
    this.readyState = 'closed';

    // clear session id
    this.id = null;

    // emit close event
    this.emit('close', reason, desc);

    // clean buffers after, so users can still
    // grab the buffers on `close` event
    self.writeBuffer = [];
    self.prevBufferLen = 0;
  }
};

/**
 * Filters upgrades, returning only those matching client transports.
 *
 * @param {Array} server upgrades
 * @api private
 *
 */

Socket.prototype.filterUpgrades = function (upgrades) {
  var filteredUpgrades = [];
  for (var i = 0, j = upgrades.length; i < j; i++) {
    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
  }
  return filteredUpgrades;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 50 */
/***/ (function(module, exports) {


/**
 * Module exports.
 *
 * Logic borrowed from Modernizr:
 *
 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
 */

try {
  module.exports = typeof XMLHttpRequest !== 'undefined' &&
    'withCredentials' in new XMLHttpRequest();
} catch (err) {
  // if XMLHttp support is disabled in IE then it will throw
  // when trying to create
  module.exports = false;
}


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Module requirements.
 */

var XMLHttpRequest = __webpack_require__(7);
var Polling = __webpack_require__(20);
var Emitter = __webpack_require__(2);
var inherit = __webpack_require__(5);
var debug = __webpack_require__(1)('engine.io-client:polling-xhr');

/**
 * Module exports.
 */

module.exports = XHR;
module.exports.Request = Request;

/**
 * Empty function
 */

function empty () {}

/**
 * XHR Polling constructor.
 *
 * @param {Object} opts
 * @api public
 */

function XHR (opts) {
  Polling.call(this, opts);
  this.requestTimeout = opts.requestTimeout;
  this.extraHeaders = opts.extraHeaders;

  if (global.location) {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    this.xd = opts.hostname !== global.location.hostname ||
      port !== opts.port;
    this.xs = opts.secure !== isSSL;
  }
}

/**
 * Inherits from Polling.
 */

inherit(XHR, Polling);

/**
 * XHR supports binary
 */

XHR.prototype.supportsBinary = true;

/**
 * Creates a request.
 *
 * @param {String} method
 * @api private
 */

XHR.prototype.request = function (opts) {
  opts = opts || {};
  opts.uri = this.uri();
  opts.xd = this.xd;
  opts.xs = this.xs;
  opts.agent = this.agent || false;
  opts.supportsBinary = this.supportsBinary;
  opts.enablesXDR = this.enablesXDR;

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;
  opts.requestTimeout = this.requestTimeout;

  // other options for Node.js client
  opts.extraHeaders = this.extraHeaders;

  return new Request(opts);
};

/**
 * Sends data.
 *
 * @param {String} data to send.
 * @param {Function} called upon flush.
 * @api private
 */

XHR.prototype.doWrite = function (data, fn) {
  var isBinary = typeof data !== 'string' && data !== undefined;
  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
  var self = this;
  req.on('success', fn);
  req.on('error', function (err) {
    self.onError('xhr post error', err);
  });
  this.sendXhr = req;
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

XHR.prototype.doPoll = function () {
  debug('xhr poll');
  var req = this.request();
  var self = this;
  req.on('data', function (data) {
    self.onData(data);
  });
  req.on('error', function (err) {
    self.onError('xhr poll error', err);
  });
  this.pollXhr = req;
};

/**
 * Request constructor
 *
 * @param {Object} options
 * @api public
 */

function Request (opts) {
  this.method = opts.method || 'GET';
  this.uri = opts.uri;
  this.xd = !!opts.xd;
  this.xs = !!opts.xs;
  this.async = false !== opts.async;
  this.data = undefined !== opts.data ? opts.data : null;
  this.agent = opts.agent;
  this.isBinary = opts.isBinary;
  this.supportsBinary = opts.supportsBinary;
  this.enablesXDR = opts.enablesXDR;
  this.requestTimeout = opts.requestTimeout;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;

  this.create();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Request.prototype);

/**
 * Creates the XHR object and sends the request.
 *
 * @api private
 */

Request.prototype.create = function () {
  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;

  var xhr = this.xhr = new XMLHttpRequest(opts);
  var self = this;

  try {
    debug('xhr open %s: %s', this.method, this.uri);
    xhr.open(this.method, this.uri, this.async);
    try {
      if (this.extraHeaders) {
        xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
        for (var i in this.extraHeaders) {
          if (this.extraHeaders.hasOwnProperty(i)) {
            xhr.setRequestHeader(i, this.extraHeaders[i]);
          }
        }
      }
    } catch (e) {}

    if ('POST' === this.method) {
      try {
        if (this.isBinary) {
          xhr.setRequestHeader('Content-type', 'application/octet-stream');
        } else {
          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
        }
      } catch (e) {}
    }

    try {
      xhr.setRequestHeader('Accept', '*/*');
    } catch (e) {}

    // ie6 check
    if ('withCredentials' in xhr) {
      xhr.withCredentials = true;
    }

    if (this.requestTimeout) {
      xhr.timeout = this.requestTimeout;
    }

    if (this.hasXDR()) {
      xhr.onload = function () {
        self.onLoad();
      };
      xhr.onerror = function () {
        self.onError(xhr.responseText);
      };
    } else {
      xhr.onreadystatechange = function () {
        if (xhr.readyState === 2) {
          var contentType;
          try {
            contentType = xhr.getResponseHeader('Content-Type');
          } catch (e) {}
          if (contentType === 'application/octet-stream') {
            xhr.responseType = 'arraybuffer';
          }
        }
        if (4 !== xhr.readyState) return;
        if (200 === xhr.status || 1223 === xhr.status) {
          self.onLoad();
        } else {
          // make sure the `error` event handler that's user-set
          // does not throw in the same tick and gets caught here
          setTimeout(function () {
            self.onError(xhr.status);
          }, 0);
        }
      };
    }

    debug('xhr data %s', this.data);
    xhr.send(this.data);
  } catch (e) {
    // Need to defer since .create() is called directly fhrom the constructor
    // and thus the 'error' event can only be only bound *after* this exception
    // occurs.  Therefore, also, we cannot throw here at all.
    setTimeout(function () {
      self.onError(e);
    }, 0);
    return;
  }

  if (global.document) {
    this.index = Request.requestsCount++;
    Request.requests[this.index] = this;
  }
};

/**
 * Called upon successful response.
 *
 * @api private
 */

Request.prototype.onSuccess = function () {
  this.emit('success');
  this.cleanup();
};

/**
 * Called if we have data.
 *
 * @api private
 */

Request.prototype.onData = function (data) {
  this.emit('data', data);
  this.onSuccess();
};

/**
 * Called upon error.
 *
 * @api private
 */

Request.prototype.onError = function (err) {
  this.emit('error', err);
  this.cleanup(true);
};

/**
 * Cleans up house.
 *
 * @api private
 */

Request.prototype.cleanup = function (fromError) {
  if ('undefined' === typeof this.xhr || null === this.xhr) {
    return;
  }
  // xmlhttprequest
  if (this.hasXDR()) {
    this.xhr.onload = this.xhr.onerror = empty;
  } else {
    this.xhr.onreadystatechange = empty;
  }

  if (fromError) {
    try {
      this.xhr.abort();
    } catch (e) {}
  }

  if (global.document) {
    delete Request.requests[this.index];
  }

  this.xhr = null;
};

/**
 * Called upon load.
 *
 * @api private
 */

Request.prototype.onLoad = function () {
  var data;
  try {
    var contentType;
    try {
      contentType = this.xhr.getResponseHeader('Content-Type');
    } catch (e) {}
    if (contentType === 'application/octet-stream') {
      data = this.xhr.response || this.xhr.responseText;
    } else {
      data = this.xhr.responseText;
    }
  } catch (e) {
    this.onError(e);
  }
  if (null != data) {
    this.onData(data);
  }
};

/**
 * Check if it has XDomainRequest.
 *
 * @api private
 */

Request.prototype.hasXDR = function () {
  return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;
};

/**
 * Aborts the request.
 *
 * @api public
 */

Request.prototype.abort = function () {
  this.cleanup();
};

/**
 * Aborts pending requests when unloading the window. This is needed to prevent
 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
 * emitted.
 */

Request.requestsCount = 0;
Request.requests = {};

if (global.document) {
  if (global.attachEvent) {
    global.attachEvent('onunload', unloadHandler);
  } else if (global.addEventListener) {
    global.addEventListener('beforeunload', unloadHandler, false);
  }
}

function unloadHandler () {
  for (var i in Request.requests) {
    if (Request.requests.hasOwnProperty(i)) {
      Request.requests[i].abort();
    }
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 52 */
/***/ (function(module, exports) {


/**
 * Gets the keys for an object.
 *
 * @return {Array} keys
 * @api private
 */

module.exports = Object.keys || function keys (obj){
  var arr = [];
  var has = Object.prototype.hasOwnProperty;

  for (var i in obj) {
    if (has.call(obj, i)) {
      arr.push(i);
    }
  }
  return arr;
};


/***/ }),
/* 53 */
/***/ (function(module, exports) {

/**
 * An abstraction for slicing an arraybuffer even when
 * ArrayBuffer.prototype.slice is not supported
 *
 * @api public
 */

module.exports = function(arraybuffer, start, end) {
  var bytes = arraybuffer.byteLength;
  start = start || 0;
  end = end || bytes;

  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }

  if (start < 0) { start += bytes; }
  if (end < 0) { end += bytes; }
  if (end > bytes) { end = bytes; }

  if (start >= bytes || start >= end || bytes === 0) {
    return new ArrayBuffer(0);
  }

  var abv = new Uint8Array(arraybuffer);
  var result = new Uint8Array(end - start);
  for (var i = start, ii = 0; i < end; i++, ii++) {
    result[ii] = abv[i];
  }
  return result.buffer;
};


/***/ }),
/* 54 */
/***/ (function(module, exports) {

module.exports = after

function after(count, callback, err_cb) {
    var bail = false
    err_cb = err_cb || noop
    proxy.count = count

    return (count === 0) ? callback() : proxy

    function proxy(err, result) {
        if (proxy.count <= 0) {
            throw new Error('after called too many times')
        }
        --proxy.count

        // after first error, rest are passed to err_cb
        if (err) {
            bail = true
            callback(err)
            // future error callbacks will go to error handler
            callback = err_cb
        } else if (proxy.count === 0 && !bail) {
            callback(null, result)
        }
    }
}

function noop() {}


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/utf8js v2.1.2 by @mathias */
;(function(root) {

	// Detect free variables `exports`
	var freeExports = typeof exports == 'object' && exports;

	// Detect free variable `module`
	var freeModule = typeof module == 'object' && module &&
		module.exports == freeExports && module;

	// Detect free variable `global`, from Node.js or Browserified code,
	// and use it as `root`
	var freeGlobal = typeof global == 'object' && global;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
		root = freeGlobal;
	}

	/*--------------------------------------------------------------------------*/

	var stringFromCharCode = String.fromCharCode;

	// Taken from https://mths.be/punycode
	function ucs2decode(string) {
		var output = [];
		var counter = 0;
		var length = string.length;
		var value;
		var extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	// Taken from https://mths.be/punycode
	function ucs2encode(array) {
		var length = array.length;
		var index = -1;
		var value;
		var output = '';
		while (++index < length) {
			value = array[index];
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
		}
		return output;
	}

	function checkScalarValue(codePoint, strict) {
		if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
			if (strict) {
				throw Error(
					'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
					' is not a scalar value'
				);
			}
			return false;
		}
		return true;
	}
	/*--------------------------------------------------------------------------*/

	function createByte(codePoint, shift) {
		return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
	}

	function encodeCodePoint(codePoint, strict) {
		if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
			return stringFromCharCode(codePoint);
		}
		var symbol = '';
		if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
			symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
		}
		else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
			if (!checkScalarValue(codePoint, strict)) {
				codePoint = 0xFFFD;
			}
			symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
			symbol += createByte(codePoint, 6);
		}
		else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
			symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
			symbol += createByte(codePoint, 12);
			symbol += createByte(codePoint, 6);
		}
		symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
		return symbol;
	}

	function utf8encode(string, opts) {
		opts = opts || {};
		var strict = false !== opts.strict;

		var codePoints = ucs2decode(string);
		var length = codePoints.length;
		var index = -1;
		var codePoint;
		var byteString = '';
		while (++index < length) {
			codePoint = codePoints[index];
			byteString += encodeCodePoint(codePoint, strict);
		}
		return byteString;
	}

	/*--------------------------------------------------------------------------*/

	function readContinuationByte() {
		if (byteIndex >= byteCount) {
			throw Error('Invalid byte index');
		}

		var continuationByte = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		if ((continuationByte & 0xC0) == 0x80) {
			return continuationByte & 0x3F;
		}

		// If we end up here, it’s not a continuation byte
		throw Error('Invalid continuation byte');
	}

	function decodeSymbol(strict) {
		var byte1;
		var byte2;
		var byte3;
		var byte4;
		var codePoint;

		if (byteIndex > byteCount) {
			throw Error('Invalid byte index');
		}

		if (byteIndex == byteCount) {
			return false;
		}

		// Read first byte
		byte1 = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		// 1-byte sequence (no continuation bytes)
		if ((byte1 & 0x80) == 0) {
			return byte1;
		}

		// 2-byte sequence
		if ((byte1 & 0xE0) == 0xC0) {
			byte2 = readContinuationByte();
			codePoint = ((byte1 & 0x1F) << 6) | byte2;
			if (codePoint >= 0x80) {
				return codePoint;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 3-byte sequence (may include unpaired surrogates)
		if ((byte1 & 0xF0) == 0xE0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
			if (codePoint >= 0x0800) {
				return checkScalarValue(codePoint, strict) ? codePoint : 0xFFFD;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 4-byte sequence
		if ((byte1 & 0xF8) == 0xF0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			byte4 = readContinuationByte();
			codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |
				(byte3 << 0x06) | byte4;
			if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
				return codePoint;
			}
		}

		throw Error('Invalid UTF-8 detected');
	}

	var byteArray;
	var byteCount;
	var byteIndex;
	function utf8decode(byteString, opts) {
		opts = opts || {};
		var strict = false !== opts.strict;

		byteArray = ucs2decode(byteString);
		byteCount = byteArray.length;
		byteIndex = 0;
		var codePoints = [];
		var tmp;
		while ((tmp = decodeSymbol(strict)) !== false) {
			codePoints.push(tmp);
		}
		return ucs2encode(codePoints);
	}

	/*--------------------------------------------------------------------------*/

	var utf8 = {
		'version': '2.1.2',
		'encode': utf8encode,
		'decode': utf8decode
	};

	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return utf8;
		}.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}	else if (freeExports && !freeExports.nodeType) {
		if (freeModule) { // in Node.js or RingoJS v0.8.0+
			freeModule.exports = utf8;
		} else { // in Narwhal or RingoJS v0.7.0-
			var object = {};
			var hasOwnProperty = object.hasOwnProperty;
			for (var key in utf8) {
				hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);
			}
		}
	} else { // in Rhino or a web browser
		root.utf8 = utf8;
	}

}(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)(module), __webpack_require__(0)))

/***/ }),
/* 56 */
/***/ (function(module, exports) {

/*
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */
(function(){
  "use strict";

  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

  // Use a lookup table to find the index.
  var lookup = new Uint8Array(256);
  for (var i = 0; i < chars.length; i++) {
    lookup[chars.charCodeAt(i)] = i;
  }

  exports.encode = function(arraybuffer) {
    var bytes = new Uint8Array(arraybuffer),
    i, len = bytes.length, base64 = "";

    for (i = 0; i < len; i+=3) {
      base64 += chars[bytes[i] >> 2];
      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
      base64 += chars[bytes[i + 2] & 63];
    }

    if ((len % 3) === 2) {
      base64 = base64.substring(0, base64.length - 1) + "=";
    } else if (len % 3 === 1) {
      base64 = base64.substring(0, base64.length - 2) + "==";
    }

    return base64;
  };

  exports.decode =  function(base64) {
    var bufferLength = base64.length * 0.75,
    len = base64.length, i, p = 0,
    encoded1, encoded2, encoded3, encoded4;

    if (base64[base64.length - 1] === "=") {
      bufferLength--;
      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }

    var arraybuffer = new ArrayBuffer(bufferLength),
    bytes = new Uint8Array(arraybuffer);

    for (i = 0; i < len; i+=4) {
      encoded1 = lookup[base64.charCodeAt(i)];
      encoded2 = lookup[base64.charCodeAt(i+1)];
      encoded3 = lookup[base64.charCodeAt(i+2)];
      encoded4 = lookup[base64.charCodeAt(i+3)];

      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
    }

    return arraybuffer;
  };
})();


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Create a blob builder even when vendor prefixes exist
 */

var BlobBuilder = global.BlobBuilder
  || global.WebKitBlobBuilder
  || global.MSBlobBuilder
  || global.MozBlobBuilder;

/**
 * Check if Blob constructor is supported
 */

var blobSupported = (function() {
  try {
    var a = new Blob(['hi']);
    return a.size === 2;
  } catch(e) {
    return false;
  }
})();

/**
 * Check if Blob constructor supports ArrayBufferViews
 * Fails in Safari 6, so we need to map to ArrayBuffers there.
 */

var blobSupportsArrayBufferView = blobSupported && (function() {
  try {
    var b = new Blob([new Uint8Array([1,2])]);
    return b.size === 2;
  } catch(e) {
    return false;
  }
})();

/**
 * Check if BlobBuilder is supported
 */

var blobBuilderSupported = BlobBuilder
  && BlobBuilder.prototype.append
  && BlobBuilder.prototype.getBlob;

/**
 * Helper function that maps ArrayBufferViews to ArrayBuffers
 * Used by BlobBuilder constructor and old browsers that didn't
 * support it in the Blob constructor.
 */

function mapArrayBufferViews(ary) {
  for (var i = 0; i < ary.length; i++) {
    var chunk = ary[i];
    if (chunk.buffer instanceof ArrayBuffer) {
      var buf = chunk.buffer;

      // if this is a subarray, make a copy so we only
      // include the subarray region from the underlying buffer
      if (chunk.byteLength !== buf.byteLength) {
        var copy = new Uint8Array(chunk.byteLength);
        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
        buf = copy.buffer;
      }

      ary[i] = buf;
    }
  }
}

function BlobBuilderConstructor(ary, options) {
  options = options || {};

  var bb = new BlobBuilder();
  mapArrayBufferViews(ary);

  for (var i = 0; i < ary.length; i++) {
    bb.append(ary[i]);
  }

  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();
};

function BlobConstructor(ary, options) {
  mapArrayBufferViews(ary);
  return new Blob(ary, options || {});
};

module.exports = (function() {
  if (blobSupported) {
    return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;
  } else if (blobBuilderSupported) {
    return BlobBuilderConstructor;
  } else {
    return undefined;
  }
})();

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module requirements.
 */

var Polling = __webpack_require__(20);
var inherit = __webpack_require__(5);

/**
 * Module exports.
 */

module.exports = JSONPPolling;

/**
 * Cached regular expressions.
 */

var rNewline = /\n/g;
var rEscapedNewline = /\\n/g;

/**
 * Global JSONP callbacks.
 */

var callbacks;

/**
 * Noop.
 */

function empty () { }

/**
 * JSONP Polling constructor.
 *
 * @param {Object} opts.
 * @api public
 */

function JSONPPolling (opts) {
  Polling.call(this, opts);

  this.query = this.query || {};

  // define global callbacks array if not present
  // we do this here (lazily) to avoid unneeded global pollution
  if (!callbacks) {
    // we need to consider multiple engines in the same page
    if (!global.___eio) global.___eio = [];
    callbacks = global.___eio;
  }

  // callback identifier
  this.index = callbacks.length;

  // add callback to jsonp global
  var self = this;
  callbacks.push(function (msg) {
    self.onData(msg);
  });

  // append to query string
  this.query.j = this.index;

  // prevent spurious errors from being emitted when the window is unloaded
  if (global.document && global.addEventListener) {
    global.addEventListener('beforeunload', function () {
      if (self.script) self.script.onerror = empty;
    }, false);
  }
}

/**
 * Inherits from Polling.
 */

inherit(JSONPPolling, Polling);

/*
 * JSONP only supports binary as base64 encoded strings
 */

JSONPPolling.prototype.supportsBinary = false;

/**
 * Closes the socket.
 *
 * @api private
 */

JSONPPolling.prototype.doClose = function () {
  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  if (this.form) {
    this.form.parentNode.removeChild(this.form);
    this.form = null;
    this.iframe = null;
  }

  Polling.prototype.doClose.call(this);
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

JSONPPolling.prototype.doPoll = function () {
  var self = this;
  var script = document.createElement('script');

  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  script.async = true;
  script.src = this.uri();
  script.onerror = function (e) {
    self.onError('jsonp poll error', e);
  };

  var insertAt = document.getElementsByTagName('script')[0];
  if (insertAt) {
    insertAt.parentNode.insertBefore(script, insertAt);
  } else {
    (document.head || document.body).appendChild(script);
  }
  this.script = script;

  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);

  if (isUAgecko) {
    setTimeout(function () {
      var iframe = document.createElement('iframe');
      document.body.appendChild(iframe);
      document.body.removeChild(iframe);
    }, 100);
  }
};

/**
 * Writes with a hidden iframe.
 *
 * @param {String} data to send
 * @param {Function} called upon flush.
 * @api private
 */

JSONPPolling.prototype.doWrite = function (data, fn) {
  var self = this;

  if (!this.form) {
    var form = document.createElement('form');
    var area = document.createElement('textarea');
    var id = this.iframeId = 'eio_iframe_' + this.index;
    var iframe;

    form.className = 'socketio';
    form.style.position = 'absolute';
    form.style.top = '-1000px';
    form.style.left = '-1000px';
    form.target = id;
    form.method = 'POST';
    form.setAttribute('accept-charset', 'utf-8');
    area.name = 'd';
    form.appendChild(area);
    document.body.appendChild(form);

    this.form = form;
    this.area = area;
  }

  this.form.action = this.uri();

  function complete () {
    initIframe();
    fn();
  }

  function initIframe () {
    if (self.iframe) {
      try {
        self.form.removeChild(self.iframe);
      } catch (e) {
        self.onError('jsonp polling iframe removal error', e);
      }
    }

    try {
      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
      var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
      iframe = document.createElement(html);
    } catch (e) {
      iframe = document.createElement('iframe');
      iframe.name = self.iframeId;
      iframe.src = 'javascript:0';
    }

    iframe.id = self.iframeId;

    self.form.appendChild(iframe);
    self.iframe = iframe;
  }

  initIframe();

  // escape \n to prevent it from being converted into \r\n by some UAs
  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
  data = data.replace(rEscapedNewline, '\\\n');
  this.area.value = data.replace(rNewline, '\\n');

  try {
    this.form.submit();
  } catch (e) {}

  if (this.iframe.attachEvent) {
    this.iframe.onreadystatechange = function () {
      if (self.iframe.readyState === 'complete') {
        complete();
      }
    };
  } else {
    this.iframe.onload = complete;
  }
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Module dependencies.
 */

var Transport = __webpack_require__(8);
var parser = __webpack_require__(3);
var parseqs = __webpack_require__(4);
var inherit = __webpack_require__(5);
var yeast = __webpack_require__(21);
var debug = __webpack_require__(1)('engine.io-client:websocket');
var BrowserWebSocket = global.WebSocket || global.MozWebSocket;
var NodeWebSocket;
if (typeof window === 'undefined') {
  try {
    NodeWebSocket = __webpack_require__(60);
  } catch (e) { }
}

/**
 * Get either the `WebSocket` or `MozWebSocket` globals
 * in the browser or try to resolve WebSocket-compatible
 * interface exposed by `ws` for Node-like environment.
 */

var WebSocket = BrowserWebSocket;
if (!WebSocket && typeof window === 'undefined') {
  WebSocket = NodeWebSocket;
}

/**
 * Module exports.
 */

module.exports = WS;

/**
 * WebSocket transport constructor.
 *
 * @api {Object} connection options
 * @api public
 */

function WS (opts) {
  var forceBase64 = (opts && opts.forceBase64);
  if (forceBase64) {
    this.supportsBinary = false;
  }
  this.perMessageDeflate = opts.perMessageDeflate;
  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;
  this.protocols = opts.protocols;
  if (!this.usingBrowserWebSocket) {
    WebSocket = NodeWebSocket;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(WS, Transport);

/**
 * Transport name.
 *
 * @api public
 */

WS.prototype.name = 'websocket';

/*
 * WebSockets support binary
 */

WS.prototype.supportsBinary = true;

/**
 * Opens socket.
 *
 * @api private
 */

WS.prototype.doOpen = function () {
  if (!this.check()) {
    // let probe timeout
    return;
  }

  var uri = this.uri();
  var protocols = this.protocols;
  var opts = {
    agent: this.agent,
    perMessageDeflate: this.perMessageDeflate
  };

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;
  if (this.extraHeaders) {
    opts.headers = this.extraHeaders;
  }
  if (this.localAddress) {
    opts.localAddress = this.localAddress;
  }

  try {
    this.ws = this.usingBrowserWebSocket ? (protocols ? new WebSocket(uri, protocols) : new WebSocket(uri)) : new WebSocket(uri, protocols, opts);
  } catch (err) {
    return this.emit('error', err);
  }

  if (this.ws.binaryType === undefined) {
    this.supportsBinary = false;
  }

  if (this.ws.supports && this.ws.supports.binary) {
    this.supportsBinary = true;
    this.ws.binaryType = 'nodebuffer';
  } else {
    this.ws.binaryType = 'arraybuffer';
  }

  this.addEventListeners();
};

/**
 * Adds event listeners to the socket
 *
 * @api private
 */

WS.prototype.addEventListeners = function () {
  var self = this;

  this.ws.onopen = function () {
    self.onOpen();
  };
  this.ws.onclose = function () {
    self.onClose();
  };
  this.ws.onmessage = function (ev) {
    self.onData(ev.data);
  };
  this.ws.onerror = function (e) {
    self.onError('websocket error', e);
  };
};

/**
 * Writes data to socket.
 *
 * @param {Array} array of packets.
 * @api private
 */

WS.prototype.write = function (packets) {
  var self = this;
  this.writable = false;

  // encodePacket efficient as it uses WS framing
  // no need for encodePayload
  var total = packets.length;
  for (var i = 0, l = total; i < l; i++) {
    (function (packet) {
      parser.encodePacket(packet, self.supportsBinary, function (data) {
        if (!self.usingBrowserWebSocket) {
          // always create a new object (GH-437)
          var opts = {};
          if (packet.options) {
            opts.compress = packet.options.compress;
          }

          if (self.perMessageDeflate) {
            var len = 'string' === typeof data ? global.Buffer.byteLength(data) : data.length;
            if (len < self.perMessageDeflate.threshold) {
              opts.compress = false;
            }
          }
        }

        // Sometimes the websocket has already been closed but the browser didn't
        // have a chance of informing us about it yet, in that case send will
        // throw an error
        try {
          if (self.usingBrowserWebSocket) {
            // TypeError is thrown when passing the second argument on Safari
            self.ws.send(data);
          } else {
            self.ws.send(data, opts);
          }
        } catch (e) {
          debug('websocket closed before onclose event');
        }

        --total || done();
      });
    })(packets[i]);
  }

  function done () {
    self.emit('flush');

    // fake drain
    // defer to next tick to allow Socket to clear writeBuffer
    setTimeout(function () {
      self.writable = true;
      self.emit('drain');
    }, 0);
  }
};

/**
 * Called upon close
 *
 * @api private
 */

WS.prototype.onClose = function () {
  Transport.prototype.onClose.call(this);
};

/**
 * Closes socket.
 *
 * @api private
 */

WS.prototype.doClose = function () {
  if (typeof this.ws !== 'undefined') {
    this.ws.close();
  }
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

WS.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'wss' : 'ws';
  var port = '';

  // avoid port if default for schema
  if (this.port && (('wss' === schema && Number(this.port) !== 443) ||
    ('ws' === schema && Number(this.port) !== 80))) {
    port = ':' + this.port;
  }

  // append timestamp to URI
  if (this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  // communicate binary support capabilities
  if (!this.supportsBinary) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};

/**
 * Feature detection for WebSocket.
 *
 * @return {Boolean} whether this transport is available.
 * @api public
 */

WS.prototype.check = function () {
  return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 60 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * JSON parse.
 *
 * @see Based on jQuery#parseJSON (MIT) and JSON2
 * @api private
 */

var rvalidchars = /^[\],:{}\s]*$/;
var rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
var rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
var rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g;
var rtrimLeft = /^\s+/;
var rtrimRight = /\s+$/;

module.exports = function parsejson(data) {
  if ('string' != typeof data || !data) {
    return null;
  }

  data = data.replace(rtrimLeft, '').replace(rtrimRight, '');

  // Attempt to parse using the native JSON parser first
  if (global.JSON && JSON.parse) {
    return JSON.parse(data);
  }

  if (rvalidchars.test(data.replace(rvalidescape, '@')
      .replace(rvalidtokens, ']')
      .replace(rvalidbraces, ''))) {
    return (new Function('return ' + data))();
  }
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 62 */
/***/ (function(module, exports) {

module.exports = toArray

function toArray(list, index) {
    var array = []

    index = index || 0

    for (var i = index || 0; i < list.length; i++) {
        array[i - index] = list[i]
    }

    return array
}


/***/ }),
/* 63 */
/***/ (function(module, exports) {


/**
 * Expose `Backoff`.
 */

module.exports = Backoff;

/**
 * Initialize backoff timer with `opts`.
 *
 * - `min` initial timeout in milliseconds [100]
 * - `max` max timeout [10000]
 * - `jitter` [0]
 * - `factor` [2]
 *
 * @param {Object} opts
 * @api public
 */

function Backoff(opts) {
  opts = opts || {};
  this.ms = opts.min || 100;
  this.max = opts.max || 10000;
  this.factor = opts.factor || 2;
  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
  this.attempts = 0;
}

/**
 * Return the backoff duration.
 *
 * @return {Number}
 * @api public
 */

Backoff.prototype.duration = function(){
  var ms = this.ms * Math.pow(this.factor, this.attempts++);
  if (this.jitter) {
    var rand =  Math.random();
    var deviation = Math.floor(rand * this.jitter * ms);
    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
  }
  return Math.min(ms, this.max) | 0;
};

/**
 * Reset the number of attempts.
 *
 * @api public
 */

Backoff.prototype.reset = function(){
  this.attempts = 0;
};

/**
 * Set the minimum duration
 *
 * @api public
 */

Backoff.prototype.setMin = function(min){
  this.ms = min;
};

/**
 * Set the maximum duration
 *
 * @api public
 */

Backoff.prototype.setMax = function(max){
  this.max = max;
};

/**
 * Set the jitter
 *
 * @api public
 */

Backoff.prototype.setJitter = function(jitter){
  this.jitter = jitter;
};



/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(65);
module.exports = __webpack_require__(26).Object.assign;


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(66);

$export($export.S + $export.F, 'Object', { assign: __webpack_require__(76) });


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(9);
var core = __webpack_require__(26);
var ctx = __webpack_require__(67);
var hide = __webpack_require__(69);
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && key in exports) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function (C) {
      var F = function (a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0: return new C();
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(68);
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),
/* 68 */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(70);
var createDesc = __webpack_require__(75);
module.exports = __webpack_require__(11) ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(71);
var IE8_DOM_DEFINE = __webpack_require__(72);
var toPrimitive = __webpack_require__(74);
var dP = Object.defineProperty;

exports.f = __webpack_require__(11) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(10);
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(11) && !__webpack_require__(12)(function () {
  return Object.defineProperty(__webpack_require__(73)('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(10);
var document = __webpack_require__(9).document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(10);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),
/* 75 */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = __webpack_require__(77);
var gOPS = __webpack_require__(88);
var pIE = __webpack_require__(89);
var toObject = __webpack_require__(90);
var IObject = __webpack_require__(28);
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(12)(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(78);
var enumBugKeys = __webpack_require__(87);

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(79);
var toIObject = __webpack_require__(27);
var arrayIndexOf = __webpack_require__(81)(false);
var IE_PROTO = __webpack_require__(84)('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),
/* 79 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),
/* 80 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(27);
var toLength = __webpack_require__(82);
var toAbsoluteIndex = __webpack_require__(83);
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(30);
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(30);
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(85)('keys');
var uid = __webpack_require__(86);
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(9);
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});
module.exports = function (key) {
  return store[key] || (store[key] = {});
};


/***/ }),
/* 86 */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),
/* 87 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),
/* 88 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 89 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(29);
module.exports = function (it) {
  return Object(defined(it));
};


/***/ })
/******/ ]);
});

/***/ }),

/***/ 312:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(313);


/***/ }),

/***/ 313:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(4);
var ReactDOM = __webpack_require__(91);
var react_redux_1 = __webpack_require__(52);
var history_1 = __webpack_require__(235);
var react_shadow_1 = __webpack_require__(437);
var store_1 = __webpack_require__(438);
var Containers_1 = __webpack_require__(99);
var api_typescript_library_1 = __webpack_require__(276);
var history = history_1.createBrowserHistory();
exports.init = function (params) {
    if ((typeof params === "undefined" ? "undefined" : _typeof(params)) !== "object") {
        console.error("You should provide initialization parameters as an object.");
        throw new Error("You should provide initialization parameters as an object.");
    }
    if (typeof params.apiKey !== "string") {
        console.error("You should provide a Dive API KEY in the initialization parameter 'apiKey");
        throw new Error("You should provide a Dive API KEY in the initialization parameter 'apiKey");
    }
    if (typeof params.deviceId !== "string") {
        console.error("You should provide a unique client id in order to authenticate him,\n      provide it through the initialization parameter 'clientId'");
        throw new Error("You should provide a unique client id in order to authenticate him,\n      provide it through the initialization parameter 'clientId'");
    }
    var APIinstance = new api_typescript_library_1.DiveAPIClass({ env: "PRE", storeToken: "cookies", apiKey: params.apiKey, deviceId: params.deviceId });
    APIinstance.setLocale("es-ES");
    window.DiveAPI = APIinstance;
    APIinstance.postTokenAndSave({ deviceId: _this.deviceId, grantType: "device_credentials" }).then(function (response) {
        console.log("Authorized!");
        window.DiveAPI = APIinstance;
        console.log("DiveAPI generated, available through DiveSDK.API or window.DiveAPI (global)");
        if (typeof params.selector !== "string") {
            console.error("You should provide a selector that resolves to an existing DOM Element\n        in the initialization parameter 'selector'");
            throw new Error("You should provide a selector that resolves to an existing DOM Element\n        in the initialization parameter 'selector'");
        }
    }).then(function () {
        ReactDOM.render(React.createElement(react_shadow_1.default, { include: 'styles.css' }, React.createElement("div", { className: "diveContainer" }, React.createElement(react_redux_1.Provider, { store: store_1.store }, React.createElement(Containers_1.App, null)))), document.querySelector(params.selector));
    }).catch(function (error) {
        console.error("CARDS FROM MOVIE ERROR", error);
    });
};

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "main.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 33:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

function __export(m) {
    for (var p in m) {
        if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(553));
__export(__webpack_require__(554));
__export(__webpack_require__(276));

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "index.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 438:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var redux_1 = __webpack_require__(80);
var redux_thunk_1 = __webpack_require__(439);
var socket_middleware_1 = __webpack_require__(440);
var Reducers_1 = __webpack_require__(517);
var windowIfDefined = typeof window === 'undefined' ? null : window;
var composeEnhancers = windowIfDefined.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || redux_1.compose;
var getMiddlewares = function getMiddlewares() {
    return redux_1.applyMiddleware(redux_thunk_1.default, socket_middleware_1.default());
};
exports.store = redux_1.createStore(redux_1.combineReducers({
    nav: Reducers_1.NavReducer,
    carousel: Reducers_1.SyncReducer,
    ui: Reducers_1.UIReducer
}), composeEnhancers(getMiddlewares()));

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "store.ts" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 440:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Actions_1 = __webpack_require__(61);
var io = __webpack_require__(487);
var Constants_1 = __webpack_require__(266);
var socketMiddleware = function socketMiddleware() {
    var socket;
    var onOpen = function onOpen(socketIo, store, channel) {
        return function (evt) {
            store.dispatch(Actions_1.SocketActions.socketConnected());
            if (socket !== undefined) {
                socket.on('channelStatus', onMessage(socket, store));
                socket.emit('tuneChannel', channel);
            }
        };
    };
    var onClose = function onClose(socketIo, store) {
        return function (evt) {
            if (socket !== undefined) {
                socket.close();
            }
            store.dispatch(Actions_1.SocketActions.socketDisconnected());
        };
    };
    var onEnd = function onEnd(socketIo, store) {
        return function (evt) {
            if (socket !== undefined) {
                socket.close();
            }
            store.dispatch(Actions_1.SocketActions.socketDisconnected());
        };
    };
    var onError = function onError(socketIo, store) {
        return function (evt) {
            if (socket !== undefined) {
                socket.close();
            }
            store.dispatch(Actions_1.SocketActions.socketDisconnected());
        };
    };
    var onTimeout = function onTimeout(socketIo, store) {
        return function (evt) {
            if (socket !== undefined) {
                socket.close();
            }
            store.dispatch(Actions_1.SocketActions.socketDisconnected());
        };
    };
    var onMessage = function onMessage(socketIo, store) {
        return function (evt) {
            var next = store.dispatch;
            var data = evt;
            var status = data.status;
            switch (status) {
                case "authenticated":
                    store.dispatch(Actions_1.SocketActions.authReceived());
                    break;
                case "unauthorized":
                    store.dispatch(Actions_1.SocketActions.unauthReceived({ message: data.message, code: data.code, type: data.type }));
                    break;
                case "error":
                    store.dispatch(Actions_1.SocketActions.errorReceived({ status: data.status, description: data.description }));
                    break;
                case "movie_start":
                    store.dispatch(Actions_1.SocketActions.movieStartReceived({ movie_id: data.movie_id }));
                    break;
                case "movie_end":
                    store.dispatch(Actions_1.SocketActions.movieEndRecieved());
                    break;
                case "scene_start":
                    store.dispatch(Actions_1.SocketActions.sceneStartReceived({ cards: data.cards }));
                    break;
                case "scene_update":
                    store.dispatch(Actions_1.SocketActions.sceneUpdateReceived({ cards: data.cards }));
                    break;
                case "scene_end":
                    store.dispatch(Actions_1.SocketActions.sceneEndReceived());
                    break;
                default:
                    break;
            }
        };
    };
    var getUrl = function getUrl(env) {
        var socketPath = 'stream.dive.tv';
        switch (env) {
            case "DEV":
                return "https://dev-" + socketPath;
            case "PRE":
                return "https://pre-" + socketPath;
            case "PRO":
            default:
                return 'https://' + socketPath;
        }
    };
    var handler = function handler(store) {
        return function (next) {
            return function (action) {
                switch (action.type) {
                    case 'CONNECT':
                        if (socket !== undefined) {
                            socket.close();
                        }
                        store.dispatch(Actions_1.SocketActions.socketConnecting());
                        var diveToken = DiveAPI.getSavedToken();
                        if (diveToken === undefined) {
                            console.error("No token present while trying to connect the socket");
                            throw new Error("No token present while trying to connect the socket");
                        }
                        var url = action.payload.url !== undefined ? action.payload.url : getUrl(Constants_1.DIVE_ENVIRONMENT);
                        socket = io.connect(url, {
                            forceNew: true,
                            query: "token=" + diveToken.access_token,
                            rejectUnauthorized: false,
                            secure: true,
                            transports: ["websocket", "xhr-polling", "polling", "htmlfile"]
                        });
                        var channel = action.payload.channelId;
                        socket.on('connect', onOpen(socket, store, channel));
                        socket.on('connect_error', onError(socket, store));
                        socket.on('error', onError(socket, store));
                        socket.on('connect_timeout', onTimeout(socket, store));
                        socket.on('disconnect', onClose(socket, store));
                        socket.on('end', onEnd(socket, store));
                        break;
                    case 'DISCONNECT':
                        if (socket !== undefined) {
                            socket.close();
                        }
                        socket = undefined;
                        store.dispatch(Actions_1.SocketActions.socketDisconnected());
                        break;
                    default:
                        return next(action);
                }
            };
        };
    };
    return handler;
};
exports.default = socketMiddleware;

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "socket.middleware.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 441:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var redux_actions_1 = __webpack_require__(96);
exports.uiCreateAction = function (type, payload) {
    return redux_actions_1.createAction(type, payload);
};
exports.UIActions = {
    goBack: exports.uiCreateAction("UI/UI_BACK", function () {
        return 0;
    }),
    setDivider: exports.uiCreateAction("UI/SET_DIVIDER", function (divider) {
        return divider;
    }),
    openCard: function openCard(cardId, relations) {
        return function (dispatch) {
            if (cardId && cardId.length > 0) {
                dispatch(exports.UIActions.performOpenCard());
            }
            DiveAPI.getCard({ cardId: cardId }).then(function (card) {
                dispatch(exports.UIActions.performOpenCard(card));
            }).catch(function (error) {
                console.error("Error getting card", error);
            });
        };
    },
    performOpenCard: exports.uiCreateAction("UI/OPEN_CARD", function (card) {
        return card;
    }),
    openSync: exports.uiCreateAction("UI/OPEN_SYNC"),
    open: function open(group) {
        return function (dispatch) {
            dispatch(exports.UIActions.performOpen(group));
        };
    },
    performOpen: exports.uiCreateAction("UI/OPEN", function (group) {
        return group;
    }),
    addTestCards: exports.uiCreateAction("UI/ADD_TEST_CARDS", function (cards) {
        return cards;
    })
};

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "ui.actions.ts" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 483:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var redux_actions_1 = __webpack_require__(96);
exports.navCreateAction = function (type, payload) {
    return redux_actions_1.createAction(type, payload);
};
exports.NavActions = {
    addNode: exports.navCreateAction('NAV/ADD_NODE', function (nav) {
        return nav;
    }),
    setLastKey: exports.navCreateAction('NAV/KEY', function (key) {
        return key;
    }),
    setSelected: exports.navCreateAction('NAV/SELECTED', function (id) {
        return id;
    }),
    setLeaf: exports.navCreateAction('NAV/SELECT_LEAF', function (id) {
        return id;
    }),
    setActivated: exports.navCreateAction('NAV/ACTIVATED', function (id) {
        return id;
    }),
    moveHorizontal: exports.navCreateAction('NAV/MOVE_HORIZONTAL', function (id) {
        return id;
    }),
    moveVertical: exports.navCreateAction('NAV/MOVE_VERTICAL', function (id) {
        return id;
    }),
    deleteNode: exports.navCreateAction('NAV/DELETE_NODE', function (id) {
        return id;
    }),
    setNodeByName: exports.navCreateAction('NAV/SELECT_BY_NAME', function (name) {
        return name;
    }),
    setNodeById: exports.navCreateAction('NAV/SELECT_BY_ID', function (id) {
        return id;
    })
};

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "nav.actions.ts" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 484:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var redux_actions_1 = __webpack_require__(96);
;
exports.syncCreateAction = function (type, payload) {
    return redux_actions_1.createAction(type, payload);
};
exports.SyncActions = {
    openCard: exports.syncCreateAction("SYNC/OPEN_CARD", function (cardId) {
        return cardId;
    }),
    setMovie: exports.syncCreateAction("SYNC/SET_MOVIE", function (movieId) {
        return movieId;
    }),
    setChunkStatus: exports.syncCreateAction("SYNC/SET_CHUNK_STATUS", function (chunkStatus) {
        return chunkStatus;
    }),
    setSyncType: exports.syncCreateAction("SYNC/SET_SYNC_TYPE", function (syncType) {
        return syncType;
    }),
    setSelectedOnSceneChange: exports.syncCreateAction("SYNC/SET_SELECTED_ON_SCENE_CHANGE", function (val) {
        return val;
    }),
    syncChannel: function syncChannel(tvEvent) {
        return function (dispatch) {
            console.log("[SOCKET]");
            dispatch(exports.SyncActions.setSyncType("SOCKET"));
            DiveAPI.syncWithMovieStreaming({
                channelId: "la2", callbacks: {
                    onError: function onError() {
                        console.log("[SOCKET] onError");
                    },
                    onMovieStart: function onMovieStart(movie) {
                        if (movie && movie.movie_id) {
                            dispatch(exports.SyncActions.setMovie(movie.movie_id));
                        }
                    },
                    onMovieEnd: function onMovieEnd() {
                        console.log("[SOCKET] onMovieEnd");
                    },
                    onSceneStart: function onSceneStart(scene) {
                        console.log("[SOCKET] onSceneStart", scene);
                        if (scene && scene.cards) {
                            dispatch(exports.SyncActions.startScene(scene.cards));
                        }
                    },
                    onSceneUpdate: function onSceneUpdate(scene) {
                        console.log("[SOCKET] onSceneUpdate", scene);
                        if (scene) {
                            dispatch(exports.SyncActions.updateScene(scene));
                        }
                    },
                    onSceneEnd: function onSceneEnd() {
                        console.log("[SOCKET] onSceneEnd");
                    },
                    onPauseStart: function onPauseStart() {
                        console.log("[SOCKET] onPauseStart");
                    },
                    onPauseEnd: function onPauseEnd() {
                        console.log("[SOCKET] onPauseEnd");
                    }
                }
            });
        };
    },
    dataSync: function dataSync(movieId) {
        return function (dispatch) {
            dispatch(exports.SyncActions.setChunkStatus("LOADING"));
        };
    },
    startScene: exports.syncCreateAction("SYNC/START_SCENE", function (cards) {
        return cards;
    }),
    updateScene: exports.syncCreateAction("SYNC/UPDATE_SCENE", function (cards) {
        return cards;
    }),
    endScene: exports.syncCreateAction("SYNC/END_SCENE", function (cards) {
        return cards;
    }),
    setTime: exports.syncCreateAction("SYNC/SET_TIME", function (time) {
        return time;
    })
};

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "sync.actions.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 485:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var redux_actions_1 = __webpack_require__(96);
function socketCreateAction(type, payload) {
    return redux_actions_1.createAction(type, payload);
}
exports.SocketActions = {
    authReceived: socketCreateAction("SOCKET/AUTHENTICATED"),
    unauthReceived: socketCreateAction("SOCKET/UNAUTHORIZED", function (payload) {
        return payload;
    }),
    errorReceived: socketCreateAction("SOCKET/ERROR", function (payload) {
        return payload;
    }),
    movieStartReceived: socketCreateAction("SOCKET/MOVIE_START", function (payload) {
        return payload;
    }),
    movieEndReceived: socketCreateAction("SOCKET/MOVIE_END"),
    sceneStartReceived: socketCreateAction("SOCKET/SCENE_START", function (payload) {
        return payload;
    }),
    sceneUpdateReceived: socketCreateAction("SOCKET/SCENE_UPDATE", function (payload) {
        return payload;
    }),
    sceneEndReceived: socketCreateAction("SOCKET/SCENE_END")
};

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "socket.actions.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 486:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var redux_actions_1 = __webpack_require__(96);
exports.userCreateAction = function (type, payload) {
    return redux_actions_1.createAction(type, payload);
};

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "user.actions.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 513:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 517:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

function __export(m) {
    for (var p in m) {
        if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(518));
__export(__webpack_require__(519));
__export(__webpack_require__(520));
__export(__webpack_require__(521));

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "index.ts" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 518:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

var __assign = this && this.__assign || Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NavReducer = function (state, action) {
    if (state === void 0) {
        state = exports.initialNavState;
    }
    switch (action.type) {
        case 'NAV/ADD_NODE':
            var nav = action.payload;
            if (nav.parentId !== -1) {
                var parentState = state.navigation.get(nav.parentId);
                if (parentState === undefined) {
                    state.navigation.set(nav.parentId, { parentId: -1, id: nav.parentId, children: [[nav.id]], columns: 1 });
                } else {
                    var lastChildrenTuplaIndex = parentState.children.length - 1;
                    var lastChildrenTuplaLength = parentState.children[lastChildrenTuplaIndex].length;
                    if (nav.columns !== undefined && nav.columns === lastChildrenTuplaLength) {
                        parentState.children = parentState.children.concat([[nav.id]]);
                    } else {
                        if (nav.forceOrder !== undefined) {
                            var arr = parentState.children[lastChildrenTuplaIndex].slice();
                            arr.splice(nav.forceOrder, 0, nav.id);
                            parentState.children[lastChildrenTuplaIndex] = arr;
                        } else {
                            parentState.children[lastChildrenTuplaIndex] = parentState.children[lastChildrenTuplaIndex].concat([nav.id]);
                        }
                    }
                    state.navigation.set(parentState.id, parentState);
                }
            }
            var navState = state.navigation.get(nav.id);
            if (navState === undefined) {
                state.navigation.set(nav.id, nav);
            } else {
                state.navigation.set(nav.id, __assign({}, nav, navState, { parentId: nav.parentId }));
            }
            if (nav.name !== undefined) {
                state.navNames.set(nav.name, nav.id);
            }
            return state;
        case 'NAV/DELETE_NODE':
            var deleteNav = state.navigation.get(action.payload);
            if (deleteNav !== undefined && deleteNav.parentId >= 0) {
                var deleteNavParent = state.navigation.get(deleteNav.parentId);
                if (deleteNavParent !== undefined) {
                    for (var i = 0; i < deleteNavParent.children.length; i++) {
                        var index = indexOf(deleteNavParent.children[i], action.payload);
                        if (index >= 0) {
                            var children = deleteNavParent.children[i].slice();
                            children.splice(index, 1);
                            if (children.length >= 0) {
                                deleteNavParent.children[i] = children;
                            } else if (i > 0) {
                                deleteNavParent.children.splice(i, 1);
                            }
                            break;
                        }
                    }
                    state.navigation.set(deleteNavParent.id, deleteNavParent);
                }
            }
            if (deleteNav !== undefined) {
                state.navigation.delete(deleteNav.id);
            }
            return state;
        case 'NAV/KEY':
            return __assign({}, state, { lastKey: action.payload });
        case 'NAV/SELECTED':
            if (isOutOfModal(state.navigation, state.selected, action.payload)) {
                return state;
            }
            return __assign({}, state, { lastSelected: state.selected, selected: action.payload, selectedNav: state.navigation.get(action.payload) });
        case 'NAV/SELECT_LEAF':
            var id = getFirstLeaf(state, action.payload);
            return __assign({}, state, { lastSelected: state.selected, selected: id, selectedNav: state.navigation.get(id) });
        case 'NAV/ACTIVATED':
            return __assign({}, state, { lastActivated: state.activated, activated: action.payload });
        case 'NAV/MOVE_HORIZONTAL':
            var newSelected = state.selected;
            var loopSelected = state.selected;
            var current = state.navigation.get(state.selected);
            if (current !== undefined && current.parentId >= 0) {
                var parent_1 = state.navigation.get(current.parentId);
                var looping = true;
                loopWhile: while (looping) {
                    looping = false;
                    if (parent_1 === undefined) {
                        continue;
                    }
                    loop1: for (var _i = 0, _a = parent_1.children; _i < _a.length; _i++) {
                        var list = _a[_i];
                        for (var j = 0; j < list.length; j++) {
                            var num = list[j];
                            if (num === loopSelected) {
                                if (state.navigation.get(loopSelected).modal) {
                                    return state;
                                }
                                if (action.payload === 1 && j < list.length - 1) {
                                    newSelected = getFirstLeaf(state, list[j + 1]);
                                    break loopWhile;
                                } else if (action.payload === -1 && j > 0) {
                                    newSelected = getLastLeaf(state, list[j - 1]);
                                    break loopWhile;
                                } else {
                                    if (parent_1.parentId >= 0) {
                                        loopSelected = parent_1.id;
                                        parent_1 = state.navigation.get(parent_1.parentId);
                                        looping = true;
                                        break loop1;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return __assign({}, state, { lastSelected: state.selected, selected: newSelected, selectedNav: state.navigation.get(newSelected) });
        case 'NAV/MOVE_VERTICAL':
            var newSelected2 = state.selected;
            var loopSelected2 = state.selected;
            var current2 = state.navigation.get(state.selected);
            if (current2 !== undefined && current2.parentId >= 0) {
                var parent_2 = state.navigation.get(current2.parentId);
                var looping = true;
                loopWhile: while (looping) {
                    looping = false;
                    if (parent_2 === undefined) {
                        continue;
                    }
                    loop1: for (var j = 0; j < parent_2.children.length; j++) {
                        if (parent_2.children[j].length > 0) {
                            var index = indexOf(parent_2.children[j], loopSelected2);
                            if (index < 0) {
                                continue;
                            }
                            var num = parent_2.children[j][index];
                            if (num === loopSelected2) {
                                if (state.navigation.get(loopSelected2).modal) {
                                    return state;
                                }
                                if (action.payload === 1 && j < parent_2.children.length - 1) {
                                    newSelected2 = getFirstLeaf(state, parent_2.children[j + 1][0]);
                                    break loopWhile;
                                } else if (action.payload === -1 && j > 0) {
                                    newSelected2 = getLastLeaf(state, parent_2.children[j - 1][0]);
                                    break loopWhile;
                                } else {
                                    if (parent_2.parentId >= 0) {
                                        loopSelected2 = parent_2.id;
                                        parent_2 = state.navigation.get(parent_2.parentId);
                                        looping = true;
                                        break loop1;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return __assign({}, state, { lastSelected: state.selected, selected: newSelected2, selectedNav: state.navigation.get(newSelected2) });
        case 'NAV/SELECT_BY_NAME':
            var name_1 = action.payload;
            var selectionByName = getFirstLeaf(state, state.navNames.get(name_1));
            if (selectionByName !== undefined) {
                return __assign({}, state, { lastSelected: state.selected, selected: selectionByName, selectedNav: state.navigation.get(selectionByName) });
            } else {
                return state;
            }
        case 'NAV/SELECT_BY_ID':
            var selectionById = getFirstLeaf(state, action.payload);
            if (selectionById !== undefined) {
                return __assign({}, state, { lastSelected: state.selected, selected: selectionById, selectedNav: state.navigation.get(selectionById) });
            } else {
                return state;
            }
        default:
            return state;
    }
};
var getRecursiveChildren = function getRecursiveChildren(navigation, id) {
    var before = [];
    var node = navigation.get(id);
    if (node !== undefined) {
        for (var i = 0; i < node.children.length; i++) {
            for (var j = 0; j < node.children[i].length; j++) {
                before = before.concat([node.children[i][j]]);
                before = before.concat(getRecursiveChildren(navigation, node.children[i][j]));
            }
        }
    }
    return before;
};
var getFirstLeaf = function getFirstLeaf(state, id) {
    var current = state.navigation.get(id);
    var looping = true;
    while (current !== undefined && looping) {
        if (current.children[0].length > 0) {
            current = state.navigation.get(current.children[0][0]);
        } else {
            looping = false;
        }
    }
    if (current !== undefined) {
        return current.id;
    } else {
        return id;
    }
};
var getLastLeaf = function getLastLeaf(state, id) {
    var current = state.navigation.get(id);
    var looping = true;
    while (current !== undefined && looping) {
        if (current.forceFirst === true && current.children[0].length > 0) {
            current = state.navigation.get(current.children[0][0]);
        } else if (current.children[current.children.length - 1].length > 0) {
            var pos = current.children[current.children.length - 1][current.children[0].length - 1];
            current = state.navigation.get(pos);
        } else {
            looping = false;
        }
    }
    if (current !== undefined) {
        return current.id;
    } else {
        return id;
    }
};
var indexOf = function indexOf(array, num) {
    for (var i = 0; i < array.length; i++) {
        if (array[i] === num) {
            return i;
        }
    }
    return -1;
};
var isOutOfModal = function isOutOfModal(navigation, id, newId) {
    var idModal = -1;
    var nav;
    do {
        nav = navigation.get(id);
        if (nav === undefined) {
            break;
        }
        if (nav.modal === true) {
            idModal = nav.id;
        }
        id = nav.parentId;
    } while (idModal < 0 && id !== undefined);
    if (idModal === -1) {
        return false;
    }
    if (idModal >= 0) {
        do {
            nav = navigation.get(newId);
            if (nav.id === idModal) {
                return false;
            }
            id = nav.parentId;
        } while (idModal < 0 && id !== undefined);
    }
    return true;
};
exports.initialNavState = {
    navigation: new Map(),
    lastKey: '',
    selected: 3,
    selectedNav: undefined,
    activated: -1,
    lastSelected: -1,
    lastActivated: -1,
    navNames: new Map()
};

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "nav.reducer.ts" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 519:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

var __assign = this && this.__assign || Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
;
exports.UIReducer = function (state, action) {
    if (state === void 0) {
        state = exports.initialUIState;
    }
    console.log("UIReducer: ", action);
    switch (action.type) {
        case "UI/SET_DIVIDER":
            console.log("UI/SET_DIVIDER", action.payload);
            if (action.payload === state.divider) {
                return state;
            }
            return __assign({}, state, { divider: action.payload });
        case 'UI/OPEN_SYNC':
            var newContainers = state.containers.slice();
            newContainers[1].component = 'CAROUSEL';
            return __assign({}, state, { divider: 60, containers: newContainers });
        case 'UI/OPEN':
            var newContainers2 = [{ component: action.payload.top }, { component: action.payload.bottom }];
            var dividerVal = 100;
            if (["GRID", "CAROUSEL", "HOME", "CARDS", "CARD", "PROFILE", "HELP"].indexOf(action.payload.bottom) >= 0) {
                dividerVal = 60;
            }
            if (dividerVal !== state.divider || state.containers[0].component !== newContainers2[0].component || state.containers[0].component !== newContainers2[1].component) {
                return __assign({}, state, { divider: dividerVal, containers: newContainers2 });
            } else {
                return state;
            }
        case 'UI/OPEN_CARD':
            var newContainers3 = [state.containers[0], { component: "CARD" }];
            return __assign({}, state, { divider: 60, containers: newContainers3, card: action.payload });
        case 'UI/ADD_TEST_CARDS':
            return __assign({}, state, { testCards: state.testCards.concat([action.payload]) });
        default:
            return state;
    }
};
exports.initialUIState = {
    containers: [{
        component: "EMPTY"
    }, {
        component: "CAROUSEL"
    }],
    card: undefined,
    testCards: [{ card_id: "28e7cb52-01a2-3e95-a71f-4fc2d3e46f86", version: "0jOeUIeLCaOcSI4FSebNj4+E7VZ" }, { card_id: "bd4f26ba-0c2a-3a16-bb7b-79aa066abf44" }, { card_id: "e0143d7b-1e76-11e6-97ac-0684985cbbe3" }, { "card_id": "df5b9dd1-1e76-11e6-97ac-0684985cbbe3", "version": "0jOeUIeLCaOcSI4FSebNj4+E7VZ" }, { "card_id": "f266ee0a-1e76-11e6-97ac-0684985cbbe3", "version": "0jOeUIeLCaOcSI4FSebNj4+E7VZ" }, { "card_id": "de57c239-1e76-11e6-97ac-0684985cbbe3", "version": "0jOeUIeLCaOcSI4FSebNj4+E7VZ" }, { "card_id": "f0913395-1e76-11e6-97ac-0684985cbbe3", "version": "0jOeUIeLCaOcSI4FSebNj4+E7VZ" }],
    divider: 60
};

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "ui.reducer.ts" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 520:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

var __assign = this && this.__assign || Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyncReducer = function (state, action) {
    if (state === void 0) {
        state = exports.initialSyncState;
    }
    switch (action.type) {
        case 'SYNC/SET_MOVIE':
            return __assign({}, state, { movieId: action.payload, cards: [] });
        case 'SYNC/UPDATE_TIME':
            return __assign({}, state, { currentTime: calcTime(state, Date.now()), lastUpdatedTime: Date.now() });
        case 'SYNC/START_SCENE':
            if (state.cards instanceof Array && action.payload instanceof Array && state.cards.length !== action.payload.length) {
                return __assign({}, state, { cards: action.payload });
            } else {
                return state;
            }
        case 'SYNC/UPDATE_SCENE':
            if (action.payload instanceof Array && action.payload.length) {
                return __assign({}, state, { cards: state.cards.concat(action.payload) });
            } else {
                return state;
            }
        case 'SYNC/END_SCENE':
            return __assign({}, state, { cards: [] });
        case 'SYNC/SET_TRAILER':
            return __assign({}, state, { demo: action.payload });
        case 'SYNC/SET_SYNC_TYPE':
            return __assign({}, state, { type: action.payload, socketStatus: 'INIT', timeMovieSynced: exports.initialSyncState.timeMovieSynced, currentTime: exports.initialSyncState.currentTime, lastUpdatedTime: exports.initialSyncState.lastUpdatedTime });
        case 'SYNC/SET_SELECTED_ON_SCENE_CHANGE':
            return __assign({}, state, { selectedOnSceneChange: action.payload });
        default:
            return state;
    }
};
var calcTime = function calcTime(state, time) {
    return (state.timeMovie + (time - state.timeMovieSynced) * state.timeRatio) / 1000;
};
exports.initialSyncState = {
    selectedOnSceneChange: true,
    socketStatus: 'INIT',
    movieId: "m00001",
    cards: [],
    demo: "",
    currentTime: 0,
    timeMovie: 0,
    timeMovieSynced: 0,
    timeRatio: 1,
    lastUpdatedTime: 0
};

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "sync.reducer.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 521:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.UserReducer = function (state, action) {
    if (state === void 0) {
        state = exports.initialUserState;
    }
    switch (action.type) {
        case "USER/SET_USER":
            return action.payload;
        default:
            return state;
    }
};
exports.initialUserState = {};

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "user.reducer.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 522:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(4);
var react_redux_1 = __webpack_require__(52);
var Containers_1 = __webpack_require__(99);
var Actions_1 = __webpack_require__(61);
var HOC_1 = __webpack_require__(17);
var LayoutClass = function (_super) {
    __extends(LayoutClass, _super);
    function LayoutClass() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LayoutClass.prototype.render = function () {
        console.log("[LayoutClass] Render ", this.props.ui);
        if (this.props && this.props.ui) {
            console.log("[LayoutClass] Render OK");
            var topType = this.props.ui.containers[0].component;
            var topStyle = { height: this.props.ui.divider + "%" };
            var bottomType = this.props.ui.containers[1].component;
            var bottomStyle = { height: 100 - this.props.ui.divider + "%" };
            return React.createElement("div", { className: "containerLayout" }, React.createElement("div", { className: "layoutTop", style: topStyle }, this.getTop(topType)), React.createElement("div", { className: "layoutBottom", style: bottomStyle }, this.getBottom(bottomType)));
        } else {
            return null;
        }
    };
    LayoutClass.prototype.getTop = function (componentType) {
        return null;
    };
    LayoutClass.prototype.getBottom = function (componentType) {
        var _this = this;
        switch (componentType) {
            case 'CAROUSEL':
                return React.createElement(Containers_1.Carousel, { key: "carousel#" + this.lastTimeMenuClicked, parent: this, columns: 1, name: "CAROUSEL", groupName: "CAROUSEL", isDefault: true });
            case 'CARD':
                return this.props.ui.testCards.map(function (card, idx) {
                    return React.createElement(Containers_1.CardDetailContainer, { cardId: card.card_id, version: card.version, key: "cardDetail_" + idx, navClass: "cardDetailNav", parent: _this, columns: 1, isDefault: true });
                });
            default:
                return null;
        }
    };
    LayoutClass.prototype.componentWillMount = function () {
        console.log("[Layout] componentWillMount:", this.props);
        this.props.setDivider(this.props.ui.divider);
    };
    LayoutClass.prototype.componentWillUpdate = function (nextProps, nextState) {
        this.lastTimeMenuClicked = Date.now();
    };
    return LayoutClass;
}(React.PureComponent);
exports.LayoutClass = LayoutClass;
var mapStateToProps = function mapStateToProps(state) {
    return { ui: state.ui };
};
exports.Layout = HOC_1.navigable(react_redux_1.connect(mapStateToProps, Actions_1.UIActions)(LayoutClass));

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "layout.container.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 523:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = this && this.__assign || Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
    }
    return t;
};
var __rest = this && this.__rest || function (s, e) {
    var t = {};
    for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];
    }return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(4);
var ReactDOM = __webpack_require__(91);
var classNames = __webpack_require__(100);
var react_redux_1 = __webpack_require__(52);
var Actions_1 = __webpack_require__(61);
window.currentNavId = 0;
var NavigableClass = function NavigableClass(InnerComponent) {
    var Navigable = function (_super) {
        __extends(Navigable, _super);
        function Navigable(props) {
            var _this = _super.call(this, props) || this;
            _this.navId = 0;
            _this.focusTracked = false;
            _this.getNewId = function () {
                return ++window.currentNavId;
            };
            _this.onMouseEnter = function () {
                var thisId = _this.getId();
                var nav = _this.props.navigation.get(thisId);
                if (nav !== undefined && nav.children[0].length === 0) {
                    _this.props.setSelected(thisId);
                    if (thisId === _this.props.selected) {
                        _this.wrapper.focus();
                    }
                }
            };
            _this.onClick = function (e) {
                e.stopPropagation();
                e.preventDefault();
                if (e.buttons !== 1 && !e.keyCode) {
                    return;
                }
                var nav = _this.props.navigation.get(_this.getId());
                var eventConsumed = false;
                if (nav !== undefined && nav.children[0].length === 0) {
                    _this.props.setActivated(nav.id);
                    eventConsumed = true;
                }
                if (_this.props.clickAction) {
                    _this.props.clickAction();
                    eventConsumed = true;
                }
                return eventConsumed;
            };
            _this.onFocus = function (e) {
                var id = _this.getId();
                var nav = _this.props.navigation.get(id);
                if (_this.props.selectedNav !== undefined) {
                    if (_this.props.selectedNav.id === id) {
                        _this.doSelfScroll(true);
                    }
                }
                if (_this.props.onFocusCallback !== undefined && (!_this.focusTracked || _this.props.onFocusCallbackRepeat)) {
                    _this.focusTracked = true;
                    _this.props.onFocusCallback();
                }
                if (nav !== undefined && nav.children[0].length === 0) {
                    return true;
                }
                e.stopPropagation();
                e.preventDefault();
            };
            _this.getId = function () {
                return _this.navId;
            };
            _this.onKeyPress = function (e) {
                e.preventDefault();
                return false;
            };
            _this.onKeyPressDown = function (e) {
                e.preventDefault();
                e.stopPropagation();
                if (e.keyCode === 13) {
                    ReactDOM.findDOMNode(_this.refComponent).click();
                    _this.onClick(e);
                }
                switch (e.key) {
                    case 'ArrowUp':
                        _this.props.moveVertical(-1);
                        break;
                    case 'ArrowRight':
                        _this.props.moveHorizontal(1);
                        break;
                    case 'ArrowLeft':
                        _this.props.moveHorizontal(-1);
                        break;
                    case 'ArrowDown':
                        _this.props.moveVertical(1);
                        break;
                    default:
                        break;
                }
                return false;
            };
            _this.isScrollable = function () {
                if (_this.isSelected()) {
                    var nav = _this.props.selectedNav;
                    do {
                        if (nav !== undefined && nav.parentId !== -1) {
                            if (nav && nav.isScrollable === true) {
                                return true;
                            }
                            nav = _this.props.navigation.get(nav.parentId);
                        } else {
                            nav = undefined;
                        }
                    } while (nav !== undefined);
                }
                return true;
            };
            _this.isSelected = function () {
                return _this.props.selected === _this.getId();
            };
            _this.getScrollableElement = function () {
                var element = _this.wrapper;
                if (element != null && element.closest instanceof Function) {
                    return element.closest('.scrollable');
                }
                return null;
            };
            _this.calculateScroll = function (HTMLList, HTMLScrollable) {
                if (_this.isScrollable() !== true) {
                    return -1;
                }
                if (document !== null && HTMLScrollable !== null) {
                    var HTMLList_1 = ReactDOM.findDOMNode(HTMLScrollable).parentElement;
                    if (HTMLList_1 !== null) {
                        var margin = 100;
                        if (_this.props.scrollPadding !== undefined) {
                            margin = _this.props.scrollPadding;
                        }
                        var left = HTMLScrollable.offsetLeft;
                        var right = HTMLScrollable.offsetWidth + HTMLScrollable.offsetLeft;
                        var width = HTMLScrollable.offsetWidth;
                        var parentLeft = HTMLList_1.offsetLeft;
                        var parentRight = HTMLList_1.offsetWidth + HTMLList_1.offsetLeft;
                        var parentWidth = HTMLList_1.offsetWidth;
                        var val = 0;
                        if (right + margin > parentRight + HTMLList_1.scrollLeft) {
                            val = right - parentWidth + margin;
                        } else if (left - margin < HTMLList_1.scrollLeft + parentLeft) {
                            val = left - margin;
                            if (val < 0) {
                                val = 0;
                            }
                        } else {
                            val = HTMLList_1.scrollLeft;
                        }
                        return val;
                    }
                }
                return -1;
            };
            _this.doSelfScroll = function (async, callback) {
                var callbackOk = callback === undefined ? function () {
                    return 0;
                } : callback;
                var HTMLItem = _this.getScrollableElement();
                var HTMLList = HTMLItem ? ReactDOM.findDOMNode(HTMLItem).parentElement : null;
                var scroll = _this.calculateScroll(HTMLList, HTMLItem);
                if (scroll >= 0 && HTMLList != null) {
                    if (async === true) {
                        setTimeout(function () {
                            HTMLList.scrollLeft = scroll;
                            return callbackOk();
                        }, 10);
                    } else {
                        HTMLList.scrollLeft = scroll;
                        return callbackOk();
                    }
                }
                return callbackOk();
            };
            _this.navId = _this.getNewId();
            return _this;
        }
        Navigable.prototype.componentDidUpdate = function () {
            var _this = this;
            if (this.getId() === this.props.selected) {
                if (this.wrapper) {
                    this.doSelfScroll(true, function () {
                        setTimeout(function () {
                            _this.wrapper.focus();
                        }, 10);
                    });
                }
            }
        };
        Navigable.prototype.componentDidMount = function () {
            var thisId = this.getId();
            var parentComponent = this.props.parent;
            var parentId = -1;
            if (parentComponent && parentComponent.props && parentComponent.props.idx !== undefined) {
                parentId = parentComponent.props.idx;
            }
            var obj = {
                parentId: parentId,
                children: [[]],
                id: thisId,
                columns: this.props.columns,
                groupName: this.props.groupName,
                forceFirst: this.props.forceFirst,
                forceOrder: this.props.forceOrder,
                modal: this.props.modal,
                isScrollable: this.props.isScrollable
            };
            this.props.addNode(obj);
            if (thisId === this.props.selected) {
                this.wrapper.focus();
            }
            if (this.props.isDefault === true) {
                this.props.setNodeById(thisId);
            } else if (this.props.selectedNav !== undefined) {
                var navSelected = this.props.selectedNav;
                var nav = this.props.navigation.get(thisId);
                if (navSelected.id === nav.parentId && navSelected.children[0][0] === thisId) {
                    this.props.setNodeById(thisId);
                }
            }
            this.forceUpdate();
        };
        Navigable.prototype.componentWillUnmount = function () {
            var thisId = this.getId();
            if (this.props.onBeforeUnmount !== undefined) {
                this.props.onBeforeUnmount(this.props.selectedNav);
            }
            if (this.props.selectedNav !== undefined) {
                var navSelected = this.props.selectedNav;
                var nav = this.props.navigation.get(thisId);
                if (navSelected.id === thisId) {
                    this.props.setNodeById(nav.parentId);
                }
            }
            this.props.deleteNode(thisId);
        };
        Navigable.prototype.render = function () {
            var _this = this;
            var thisId = this.getId();
            var off = this.props.selectedNav === undefined || this.props.groupName !== this.props.selectedNav.groupName;
            var active = thisId === this.props.activated;
            var classes = {
                navigable: true,
                navActive: active
            };
            if (this.props.navClass) {
                classes[this.props.navClass] = true;
            }
            if (this.props.focusChainClass && this.props.focusChainClass.length && this.props.selectedNav) {
                classes[this.props.focusChainClass] = this.inFocusChain(this.props.selectedNav);
            }
            if (this.props.activeGroupClass && this.props.activeGroupClass.length && !off) {
                classes[this.props.activeGroupClass] = true;
            }
            var classesApplied = classNames(classes);
            var _a = this.props,
                idx = _a.idx,
                columns = _a.columns,
                tabIndex = _a.tabIndex,
                clickAction = _a.clickAction,
                isDefault = _a.isDefault,
                onFocusCallback = _a.onFocusCallback,
                onFocusCallbackRepeat = _a.onFocusCallbackRepeat,
                forceFirst = _a.forceFirst,
                forceOrder = _a.forceOrder,
                modal = _a.modal,
                onBeforeUnmount = _a.onBeforeUnmount,
                focusChainClass = _a.focusChainClass,
                navClass = _a.navClass,
                noNavOwnProps = __rest(_a, ["idx", "columns", "tabIndex", "clickAction", "isDefault", "onFocusCallback", "onFocusCallbackRepeat", "forceFirst", "forceOrder", "modal", "onBeforeUnmount", "focusChainClass", "navClass"]);
            var navigation = noNavOwnProps.navigation,
                lastKey = noNavOwnProps.lastKey,
                selected = noNavOwnProps.selected,
                selectedNav = noNavOwnProps.selectedNav,
                lastSelected = noNavOwnProps.lastSelected,
                activated = noNavOwnProps.activated,
                lastActivated = noNavOwnProps.lastActivated,
                navNames = noNavOwnProps.navNames,
                childProps = __rest(noNavOwnProps, ["navigation", "lastKey", "selected", "selectedNav", "lastSelected", "activated", "lastActivated", "navNames"]);
            var ChildComponent = InnerComponent;
            return React.createElement("div", { ref: function ref(el) {
                    if (el) {
                        _this.wrapper = el;
                    }
                }, className: classesApplied, tabIndex: -1, key: this.props.key ? this.props.key + '_Nav' : "", onKeyUp: this.onKeyPress, onKeyDown: this.onKeyPressDown, onMouseEnter: this.onMouseEnter, onMouseDown: this.onClick, onFocus: function onFocus(e) {
                    _this.onFocus(e);
                    return false;
                }, id: thisId.toString() }, React.createElement(ChildComponent, __assign({ ref: function ref(refComponent) {
                    if (refComponent) {
                        _this.refComponent = refComponent;
                    }
                } }, childProps, { idx: thisId })));
        };
        Navigable.prototype.inFocusChain = function (navigation) {
            var nav = navigation;
            var myId = this.getId();
            if (nav) {
                if (nav.id === myId || nav.parentId === myId) {
                    return true;
                } else if (nav.parentId !== -1) {
                    return this.inFocusChain(this.props.navigation.get(nav.parentId));
                }
            }
            return false;
        };
        return Navigable;
    }(React.PureComponent);
    var mapIUIStateToProps = function mapIUIStateToProps(state) {
        return state.nav;
    };
    var connected = react_redux_1.connect(mapIUIStateToProps, Actions_1.NavActions, undefined, { withRef: true })(Navigable);
    return connected;
};
exports.navigable = NavigableClass;
exports.default = exports.navigable;

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "navigable.HOC.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 524:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function statics(a) {
    return function (b) {
        return Object.assign(b, a);
    };
}
exports.statics = statics;

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "statics.HOC.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 525:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = this && this.__assign || Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(4);
var react_redux_1 = __webpack_require__(52);
var Containers_1 = __webpack_require__(99);
var Actions_1 = __webpack_require__(61);
var AppClass = function (_super) {
    __extends(AppClass, _super);
    function AppClass() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppClass.prototype.componentWillMount = function () {};
    AppClass.prototype.render = function () {
        return React.createElement("div", { className: "app" }, React.createElement(Containers_1.Layout, { columns: 1, parent: this }));
    };
    return AppClass;
}(React.Component);
exports.AppClass = AppClass;
function mapStateToProps(state) {
    return {};
}
function mapDispatchToProps(dispatch) {
    return __assign({}, Actions_1.UIActions);
}
function mergeProps(stateProps, dispatchProps, ownProps) {
    return __assign({}, stateProps, ownProps, dispatchProps);
}
exports.App = react_redux_1.connect(mapStateToProps, mapDispatchToProps, mergeProps)(AppClass);

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "app.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 526:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(4);
var CardModules_1 = __webpack_require__(267);
var HOC_1 = __webpack_require__(17);
var Components_1 = __webpack_require__(20);
var CardModuleList = function (_super) {
    __extends(CardModuleList, _super);
    function CardModuleList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CardModuleList.prototype.render = function () {
        return React.createElement("div", { className: "cardModulesContainer" }, this.props.card ? this.decideModules(this.props.card) : React.createElement(Components_1.Loading, null));
    };
    CardModuleList.prototype.decideModules = function (card) {
        var _this = this;
        var modules = [];
        var moduleList = [];
        var cardModuleOrder = CardModules_1.cardModuleConfig[card.type];
        if (card.type && cardModuleOrder && cardModuleOrder.sections && cardModuleOrder.sections[0] && cardModuleOrder.sections[0].modules instanceof Array) {
            cardModuleOrder.sections[0].modules.map(function (cardModule, idx) {
                if (cardModule.type && cardModule.type !== "") {
                    var candidate = CardModules_1.cardModuleClasses[cardModule.type];
                    if (CardModules_1.isValidatable(candidate)) {
                        if (candidate) {
                            console.warn("Instantiating", cardModule.type);
                            var moduleInstance = candidate.validate(card, cardModule.type, _this, {
                                isScrollable: true,
                                scrollPadding: 300
                            });
                            if (moduleInstance) {
                                console.warn("Instantiating because validated", cardModule.type);
                                var navClass = candidate.moduleName ? candidate.moduleName.toLocaleLowerCase() + "-container cardModule-container scrollable" : "container";
                                moduleList.push(React.createElement("div", { className: navClass, key: card.card_id + "_module_" + idx }, moduleInstance));
                            }
                        } else {
                            console.warn("No existe el módulo o no ha validado", cardModule.type);
                        }
                    } else {
                        console.warn("No existe el módulo", cardModule.type);
                    }
                }
                return undefined;
            });
        }
        return moduleList;
    };
    return CardModuleList;
}(React.PureComponent);
exports.CardModuleList = CardModuleList;
exports.NavigableCardModuleList = HOC_1.navigable(CardModuleList);

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "cardModuleList.container.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 527:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var artConfig = __webpack_require__(528);
var businessConfig = __webpack_require__(529);
var chapterConfig = __webpack_require__(530);
var fashionConfig = __webpack_require__(531);
var fauna_floraConfig = __webpack_require__(532);
var food_drinkConfig = __webpack_require__(533);
var health_beautyConfig = __webpack_require__(534);
var historicConfig = __webpack_require__(535);
var homeConfig = __webpack_require__(536);
var leisure_sportConfig = __webpack_require__(537);
var locationConfig = __webpack_require__(538);
var lookConfig = __webpack_require__(539);
var movieConfig = __webpack_require__(540);
var ostConfig = __webpack_require__(541);
var personConfig = __webpack_require__(542);
var characterConfig = __webpack_require__(543);
var referenceConfig = __webpack_require__(544);
var serieConfig = __webpack_require__(545);
var songConfig = __webpack_require__(546);
var technologyConfig = __webpack_require__(547);
var triviaConfig = __webpack_require__(548);
var vehicleConfig = __webpack_require__(549);
var weaponConfig = __webpack_require__(550);
var cardDetailConfig = {
    artConfig: artConfig,
    businessConfig: businessConfig,
    chapterConfig: chapterConfig,
    fashionConfig: fashionConfig,
    fauna_floraConfig: fauna_floraConfig,
    food_drinkConfig: food_drinkConfig,
    health_beautyConfig: health_beautyConfig,
    historicConfig: historicConfig,
    homeConfig: homeConfig,
    leisure_sportConfig: leisure_sportConfig,
    locationConfig: locationConfig,
    lookConfig: lookConfig,
    movieConfig: movieConfig,
    ostConfig: ostConfig,
    personConfig: personConfig,
    characterConfig: characterConfig,
    referenceConfig: referenceConfig,
    serieConfig: serieConfig,
    songConfig: songConfig,
    technologyConfig: technologyConfig,
    triviaConfig: triviaConfig,
    vehicleConfig: vehicleConfig,
    weaponConfig: weaponConfig
};
exports.cardModuleConfig = {
    art: cardDetailConfig.artConfig,
    business: cardDetailConfig.businessConfig,
    chapter: cardDetailConfig.chapterConfig,
    fashion: cardDetailConfig.fashionConfig,
    fauna_flora: cardDetailConfig.fauna_floraConfig,
    food_drink: cardDetailConfig.food_drinkConfig,
    health_beauty: cardDetailConfig.health_beautyConfig,
    historic: cardDetailConfig.historicConfig,
    home: cardDetailConfig.homeConfig,
    leisure_sport: cardDetailConfig.leisure_sportConfig,
    location: cardDetailConfig.locationConfig,
    look: cardDetailConfig.lookConfig,
    movie: cardDetailConfig.movieConfig,
    ost: cardDetailConfig.ostConfig,
    person: cardDetailConfig.personConfig,
    character: cardDetailConfig.characterConfig,
    reference: cardDetailConfig.referenceConfig,
    serie: cardDetailConfig.serieConfig,
    song: cardDetailConfig.songConfig,
    technology: cardDetailConfig.technologyConfig,
    trivia: cardDetailConfig.triviaConfig,
    vehicle: cardDetailConfig.vehicleConfig,
    weapon: cardDetailConfig.weaponConfig
};

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "cardDetail.config.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 528:
/***/ (function(module, exports) {

module.exports = {"sections":[{"title":"main","main":true,"modules":[{"type":"Header"},{"type":"Description"},{"type":"Shop"},{"type":"TravelShop"},{"type":"Specifications"},{"type":"MapModule"},{"type":"Gallery"},{"type":"Curiosities"},{"type":"AppearsIn"},{"type":"AppearsInSingle"},{"type":"BackToHome"}]}]}

/***/ }),

/***/ 529:
/***/ (function(module, exports) {

module.exports = {"sections":[{"title":"main","main":true,"modules":[{"type":"Header"},{"type":"Description"},{"type":"Shop"},{"type":"TravelShop"},{"type":"Specifications"},{"type":"Gallery"},{"type":"Curiosities"},{"type":"AppearsInSingle"},{"type":"AppearsIn"},{"type":"BackToHome"}]}]}

/***/ }),

/***/ 530:
/***/ (function(module, exports) {

module.exports = {"sections":[{"title":"main","main":true,"modules":[{"type":"MovieHeader"},{"type":"MovieHeaderSmall"},{"type":"Overview"},{"type":"BasicInfo"},{"type":"Trailer"},{"type":"Cast"},{"type":"BelongToSingle"},{"type":"Shop"},{"type":"TravelShop"},{"type":"Curiosities"},{"type":"PlacesShown"},{"type":"Vehicles"},{"type":"MovieSoundtrack"},{"type":"Highlights"},{"type":"DiveInModule"},{"type":"Recommended"},{"type":"BackToHome"}]}]}

/***/ }),

/***/ 531:
/***/ (function(module, exports) {

module.exports = {"sections":[{"title":"main","main":true,"modules":[{"type":"ButtonHeader"},{"type":"Description"},{"type":"Shop"},{"type":"TravelShop"},{"type":"Specifications"},{"type":"Gallery"},{"type":"Fashion"},{"type":"Curiosities"},{"type":"AppearsInSingle"},{"type":"AppearsIn"},{"type":"BackToHome"}]}]}

/***/ }),

/***/ 532:
/***/ (function(module, exports) {

module.exports = {"sections":[{"title":"main","main":true,"modules":[{"type":"Header"},{"type":"Description"},{"type":"Shop"},{"type":"TravelShop"},{"type":"Specifications"},{"type":"Gallery"},{"type":"Curiosities"},{"type":"AppearsInSingle"},{"type":"AppearsIn"},{"type":"BackToHome"}]}]}

/***/ }),

/***/ 533:
/***/ (function(module, exports) {

module.exports = {"sections":[{"title":"main","main":true,"modules":[{"type":"Header"},{"type":"Description"},{"type":"Shop"},{"type":"TravelShop"},{"type":"Specifications"},{"type":"Gallery"},{"type":"Video"},{"type":"Curiosities"},{"type":"AppearsInSingle"},{"type":"AppearsIn"},{"type":"BackToHome"}]}]}

/***/ }),

/***/ 534:
/***/ (function(module, exports) {

module.exports = {"sections":[{"title":"main","main":true,"modules":[{"type":"Header"},{"type":"Description"},{"type":"Shop"},{"type":"TravelShop"},{"type":"Specifications"},{"type":"Gallery"},{"type":"Curiosities"},{"type":"AppearsInSingle"},{"type":"AppearsIn"},{"type":"BackToHome"}]}]}

/***/ }),

/***/ 535:
/***/ (function(module, exports) {

module.exports = {"sections":[{"title":"main","main":true,"modules":[{"type":"Header"},{"type":"Description"},{"type":"Shop"},{"type":"TravelShop"},{"type":"MapModule"},{"type":"Gallery"},{"type":"Curiosities"},{"type":"AppearsInSingle"},{"type":"AppearsIn"},{"type":"BackToHome"}]}]}

/***/ }),

/***/ 536:
/***/ (function(module, exports) {

module.exports = {"sections":[{"title":"main","main":true,"modules":[{"type":"ButtonHeader"},{"type":"Description"},{"type":"Shop"},{"type":"TravelShop"},{"type":"Specifications"},{"type":"Gallery"},{"type":"Home"},{"type":"CompleteTheDeco"},{"type":"Curiosities"},{"type":"AppearsIn"},{"type":"AppearsInSingle"},{"type":"BackToHome"}]}]}

/***/ }),

/***/ 537:
/***/ (function(module, exports) {

module.exports = {"sections":[{"title":"main","main":true,"modules":[{"type":"Header"},{"type":"Description"},{"type":"Shop"},{"type":"TravelShop"},{"type":"Specifications"},{"type":"Gallery"},{"type":"Curiosities"},{"type":"AppearsInSingle"},{"type":"AppearsIn"},{"type":"BackToHome"}]}]}

/***/ }),

/***/ 538:
/***/ (function(module, exports) {

module.exports = {"sections":[{"title":"main","main":true,"modules":[{"type":"Header"},{"type":"Description"},{"type":"Shop"},{"type":"TravelShop"},{"type":"BasicInfo"},{"type":"Gallery"},{"type":"MapModule"},{"type":"Curiosities"},{"type":"AppearsInLocation"},{"type":"BackToHome"}]}]}

/***/ }),

/***/ 539:
/***/ (function(module, exports) {

module.exports = {"sections":[{"title":"main","main":true,"modules":[{"type":"ButtonHeader"},{"type":"Description"},{"type":"Specifications"},{"type":"Gallery"},{"type":"Look"},{"type":"Carry"},{"type":"MoreLooks"},{"type":"Curiosities"},{"type":"BackToHome"}]}]}

/***/ }),

/***/ 540:
/***/ (function(module, exports) {

module.exports = {"sections":[{"title":"main","main":true,"modules":[{"type":"MovieHeader"},{"type":"MovieHeaderSmall"},{"type":"Overview"},{"type":"BasicInfo"},{"type":"Trailer"},{"type":"Cast"},{"type":"Shop"},{"type":"TravelShop"},{"type":"Curiosities"},{"type":"PlacesShown"},{"type":"Vehicles"},{"type":"MovieSoundtrack"},{"type":"Highlights"},{"type":"DiveInModule"},{"type":"Recommended"},{"type":"BackToHome"}]}]}

/***/ }),

/***/ 541:
/***/ (function(module, exports) {

module.exports = {"sections":[{"title":"main","main":true,"modules":[{"type":"Header"},{"type":"Soundtrack"},{"type":"Description"},{"type":"Shop"},{"type":"TravelShop"},{"type":"SoundsIn"},{"type":"BackToHome"}]}]}

/***/ }),

/***/ 542:
/***/ (function(module, exports) {

module.exports = {"sections":[{"title":"main","main":true,"modules":[{"type":"Header"},{"type":"Biography"},{"type":"BasicInfo"},{"type":"Gallery"},{"type":"AwardsModuleList"},{"type":"Shop"},{"type":"TravelShop"},{"type":"Curiosities"},{"type":"Filmography"},{"type":"BackToHome"}]}]}

/***/ }),

/***/ 543:
/***/ (function(module, exports) {

module.exports = {"sections":[{"title":"main","main":true,"modules":[{"type":"Header"},{"type":"Biography"},{"type":"Shop"},{"type":"TravelShop"},{"type":"BasicInfo"},{"type":"Gallery"},{"type":"Video"},{"type":"Curiosities"},{"type":"Highligts"},{"type":"InterpretedBySingle"},{"type":"InterpretedBy"},{"type":"BackToHome"}]}]}

/***/ }),

/***/ 544:
/***/ (function(module, exports) {

module.exports = {"sections":[{"title":"main","main":true,"modules":[{"type":"Reference"},{"type":"Gallery"},{"type":"Video"},{"type":"AppearsInSingle"},{"type":"AppearsIn"},{"type":"BackToHome"}]}]}

/***/ }),

/***/ 545:
/***/ (function(module, exports) {

module.exports = {"sections":[{"title":"main","main":true,"modules":[{"type":"MovieHeader"},{"type":"MovieHeaderSmall"},{"type":"Overview"},{"type":"Seasons"},{"type":"Trailer"},{"type":"BasicInfo"},{"type":"Gallery"},{"type":"AwardsModuleList"},{"type":"Cast"},{"type":"Shop"},{"type":"TravelShop"},{"type":"Recommended"},{"type":"BackToHome"}]}]}

/***/ }),

/***/ 546:
/***/ (function(module, exports) {

module.exports = {"sections":[{"title":"main","main":true,"modules":[{"type":"Header"},{"type":"MusicShop"},{"type":"Description"},{"type":"Shop"},{"type":"TravelShop"},{"type":"Curiosities"},{"type":"SongBelongToSingle"},{"type":"SongBelongTo"},{"type":"BackToHome"}]}]}

/***/ }),

/***/ 547:
/***/ (function(module, exports) {

module.exports = {"sections":[{"title":"main","main":true,"modules":[{"type":"Header"},{"type":"Description"},{"type":"Shop"},{"type":"TravelShop"},{"type":"Specifications"},{"type":"Gallery"},{"type":"Video"},{"type":"AppearsInSingle"},{"type":"AppearsIn"},{"type":"BackToHome"}]}]}

/***/ }),

/***/ 548:
/***/ (function(module, exports) {

module.exports = {"sections":[{"title":"main","main":true,"modules":[{"type":"FullCuriosity"},{"type":"Gallery"},{"type":"Video"},{"type":"AppearsInSingle"},{"type":"AppearsIn"},{"type":"BackToHome"}]}]}

/***/ }),

/***/ 549:
/***/ (function(module, exports) {

module.exports = {"sections":[{"title":"main","main":true,"modules":[{"type":"Header"},{"type":"Description"},{"type":"Shop"},{"type":"TravelShop"},{"type":"Specifications"},{"type":"Gallery"},{"type":"Video"},{"type":"Curiosities"},{"type":"AppearsInSingle"},{"type":"AppearsIn"},{"type":"BackToHome"}]}]}

/***/ }),

/***/ 550:
/***/ (function(module, exports) {

module.exports = {"sections":[{"title":"main","main":true,"modules":[{"type":"Header"},{"type":"Description"},{"type":"Shop"},{"type":"TravelShop"},{"type":"Specifications"},{"type":"Gallery"},{"type":"Curiosities"},{"type":"AppearsInSingle"},{"type":"AppearsIn"},{"type":"BackToHome"}]}]}

/***/ }),

/***/ 551:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function isValidatable(object) {
    return object && 'validate' in object;
}
exports.isValidatable = isValidatable;

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "cardModule.base.component.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 552:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = this && this.__assign || Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
    }
    return t;
};
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(4);
var Services_1 = __webpack_require__(33);
var Components_1 = __webpack_require__(20);
var HOC_1 = __webpack_require__(17);
var Header = function (_super) {
    __extends(Header, _super);
    function Header() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Header_1 = Header;
    Header.prototype.getSubtitle = function () {
        if (this.props.navigableSubtitle && this.props.subtitle) {
            return React.createElement("div", { className: "subtitle" }, React.createElement(Components_1.NavigationContainer, { parent: this, columns: 1 }, this.props.subtitle));
        } else if (this.props.subtitle) {
            return React.createElement("div", { className: "subtitle" }, this.props.subtitle);
        } else {
            return null;
        }
    };
    Header.prototype.render = function () {
        var subtitle = this.getSubtitle();
        return React.createElement("div", { className: "header cardModule" }, React.createElement(Components_1.CardAndCategory, { card: this.props.card }), React.createElement("div", { className: "rightPart" }, React.createElement("div", { className: "info" }, React.createElement("div", { className: "titleContainer" }, React.createElement("p", { className: "title" }, this.props.title), this.props.titleParenthesis ? React.createElement("div", { className: "titleParenthesis" }, " (", this.props.titleParenthesis, ")") : null), subtitle, this.props.categories ? React.createElement("div", { className: "categories" }, this.props.categories) : null, this.props.time ? React.createElement("div", { className: "time" }, React.createElement("i", { className: "clock" }), React.createElement("span", null, this.props.time)) : null, React.createElement("div", { className: "headerButtons" }, React.createElement(Components_1.NavigationContainer, { parent: this, columns: 1, isDefault: true, className: "likeButton genericBtn" }, React.createElement("div", { className: "centeredContent" }, React.createElement("i", { className: "icon like" }), React.createElement("span", null, Services_1.Localize("CAROUSEL_CARD_SAVE"))))))));
    };
    Header = Header_1 = __decorate([HOC_1.statics({
        moduleName: "header",
        validate: function validate(card, moduleType, parent, props) {
            var title = card.title;
            var subtitle = card.subtitle && card.subtitle !== "" ? card.subtitle : null;
            var time = null;
            var titleParenthesis = null;
            var categories = null;
            var navigableSubtitle = false;
            switch (card.type) {
                case "movie":
                case "serie":
                case "chapter":
                    var catalogInfo = Services_1.Helper.getContainer(card, "catalog");
                    if (catalogInfo && catalogInfo.data && catalogInfo.data[0]) {
                        var mediaData = catalogInfo.data[0];
                        if (mediaData.runtime) {
                            var currentTimeInSecs = mediaData.runtime;
                            var hours = Math.floor(currentTimeInSecs / 3600);
                            currentTimeInSecs %= 3600;
                            var minutes = Math.floor(currentTimeInSecs / 60);
                            time = minutes + " m";
                            if (hours > 0) {
                                time = hours + " h " + time;
                            }
                        }
                        if (mediaData.year) {
                            titleParenthesis = "" + catalogInfo.data[0].year;
                        }
                        if (mediaData.genres && mediaData.genres.length > 0) {
                            categories = mediaData.genres.join(", ");
                        }
                        if (mediaData.director && mediaData.director !== "") {
                            subtitle = mediaData.director;
                            navigableSubtitle = true;
                        }
                    }
                    break;
            }
            var Instantiated = HOC_1.navigable(Header_1);
            return React.createElement(Instantiated, __assign({ parent: parent, isScrollable: true, card: card, moduleType: moduleType, title: title, subtitle: subtitle, navigableSubtitle: navigableSubtitle, time: time, titleParenthesis: titleParenthesis, categories: categories }, props));
        }
    })], Header);
    return Header;
    var Header_1;
}(React.PureComponent);
exports.Header = Header;

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "header.component.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 553:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var HelperClass = function () {
    function HelperClass() {
        this.getContainer = function (card, type) {
            return card.info ? card.info.filter(function (el) {
                return el.type === type;
            })[0] : undefined;
        };
        this.getRelation = function (relations, value, field) {
            if (field === void 0) {
                field = 'type';
            }
            return relations ? relations.filter(function (el) {
                return el[field] === value;
            })[0] : undefined;
        };
        this.cutText = function (text, count) {
            if (text.length > count) {
                if (count + 3 >= text.length) {
                    count -= 2;
                }
                return text.substring(0, count) + '...';
            } else {
                return text;
            }
        };
    }
    return HelperClass;
}();
exports.Helper = new HelperClass();

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "helper.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 554:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(4);
var memoizee = __webpack_require__(555);
var ES = __webpack_require__(611);
var EN = __webpack_require__(612);
var DE = __webpack_require__(613);
var LocalizeService = function () {
    function LocalizeService() {
        this.language = "EN";
        this.texts = {
            EN: EN,
            ES: ES,
            DE: DE
        };
    }
    LocalizeService.prototype.setLanguage = function (lang) {
        this.language = lang;
    };
    LocalizeService.prototype.getLanguage = function () {
        return this.language;
    };
    LocalizeService.prototype.getLiteral = function (id) {
        var _this = this;
        var substitutions = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            substitutions[_i - 1] = arguments[_i];
        }
        if (typeof id === "string") {
            var baseText = this.getLiteralWithLanguage(id, this.language) || "";
            var textBlockArray = baseText.split("\\n");
            for (var i = 0, write = 1, length_1 = textBlockArray.length; i < length_1 - 1; i++) {
                textBlockArray.splice(write, 0, React.createElement("br", { key: i }));
                write += 2;
            }
            var resultArray_1 = [];
            textBlockArray.map(function (textBlock) {
                if (typeof textBlock === "string") {
                    var textArray = textBlock.split(/%[\d]+\$s/);
                    var maxLoop = Math.min(textArray.length - 1, substitutions.length);
                    for (var i = 0, write = 1; i < maxLoop; i++) {
                        var text = "";
                        if (substitutions[i]) {
                            text = _this.getLiteral(substitutions[i]) || "";
                        }
                        textArray.splice(write, 0, React.createElement("span", { className: "substitution substitution-" + (i + 1) + " " + id + "-" + substitutions[i], "data-index": "" + i }, text));
                        write += 2;
                    }
                    resultArray_1.push(textArray);
                } else {
                    resultArray_1.push(textBlock);
                }
            });
            return resultArray_1;
        } else {
            return "";
        }
    };
    LocalizeService.prototype.getLiteralWithLanguage = function (id, language) {
        try {
            var text = this.texts[language][id];
            if (!text) {
                console.error("Missing literal in " + language + ", " + id);
                throw new Error("Missing literal in " + language + ", " + id);
            }
            return text;
        } catch (e) {
            var text = this.texts.EN[id];
            if (text) {
                return text;
            } else {
                return "Missing literal";
            }
        }
    };
    LocalizeService.prototype.textToMarkupWithLineBreaks = function (text, separator) {
        if (separator === void 0) {
            separator = "\\n";
        }
        if (typeof text === "string") {
            return text.split(separator).map(function (item, key) {
                return React.createElement("p", { key: key }, item);
            });
        }
    };
    return LocalizeService;
}();
exports.Localized = new LocalizeService();
exports.Localize = memoizee(exports.Localized.getLiteral.bind(exports.Localized));
window.Localized = exports.Localized;
window.Localize = exports.Localized.getLiteral.bind(exports.Localized);

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "localized_texts.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 61:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

function __export(m) {
    for (var p in m) {
        if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(441));
__export(__webpack_require__(483));
__export(__webpack_require__(484));
__export(__webpack_require__(485));
__export(__webpack_require__(486));

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "index.ts" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 611:
/***/ (function(module, exports) {

module.exports = {"VERSION_OUTDATED_TITLE":"","VERSION_OUTDATED_TEXT":"","VERSION_DEPRECATED_TITLE":"","VERSION_DEPRECATED_TEXT":"","GOT_IT":"","NOW_TITLE":"","NOW_SUBTITLE":"","UPCOMING_TITLE":"","GRID_NO_DATA_TEXT":"","TRY_DEMO":"","MENU_SETTINGS":"","MENU_DEMO":"DEMO","MENU_PROFILE":"PERFIL","MENU_CARDS":"MIS CARDS","MENU_SYNC":"DIVE IN","SEE_INFO":"","TVGRID_BROADCAST_TITLE1":"Ahora en TV","TVGRID_BROADCAST_TITLE2":"Test de traducción","TVGRID_UPCOMING_TITLE":"","TVGRID_BROADCAST_NO_CONTENT":"","TVGRID_BROADCAST_NO_CONTENT_TRY_DEMO":"","TVGRID_UPCOMING_NO_CONTENT":"","TVGRID_UPCOMING_NO_CONTENT_TRY_DEMO":"","GENERIC_ERROR_TITLE":"","GENERIC_ERROR_TEXT":"","EXIT_TITLE":"","EXIT_TEXT":"","EXIT_BUTTON_OK":"","NETWORK_ERROR_TITLE":"","NETWORK_ERROR_TEXT":"","TVGRID_EMPTY_BROADCAST_TITLE1":"","TVGRID_EMPTY_BROADCAST_TITLE2":"","TVGRID_EMPTY_UPCOMING_TXT1":"","TVGRID_EMPTY_UPCOMING_TXT2":"","TVGRID_EMPTY_WATCH_OUR_DEMO":"","SELECTOR_ALL_CATEGORIES":"","SELECTOR_CAST_CHARACTER":"","SELECTOR_FASHION_BEAUTY":"","SELECTOR_MUSIC":"","SELECTOR_PLACES_TRAVEL":"","SELECTOR_CARS_MORE":"","SELECTOR_FUN_FACTS":"","SELECTOR_OTHER_CATEGORIES":"","BIOGRAPHY":"Biografía","COMEDY":"Comedia","CRIME":"Crimen","ACTION":"Acción","THRILLER":"Suspense","ADVENTURE":"Aventuras","SCI_FI":"Ciencia ficción","FANTASY":"Fantasía","DRAMA":"Drama","ROMANCE":"Romántica","TERROR":"Terror","HISTORY":"Histórica","WESTERN":"Western","WAR":"Bélicas","MISTERY":"Misterio","FAMILY":"Familar","SPORT":"Deporte","MUSIC":"Música","MUSICAL":"Musical","ANIMATION":"Animación","DOCUMENTARY":"Documental","FILM_NOIR":"Cine negro","NEWS":"Noticias","KIDS":"Infantil","TALK_SHOW":"Entrevistas","CURRENT_SCENE":"","PIZZA_OR_POP_CORN":"","WE_RECOMMEND":"","MAKE_POP_CORN":"","LIGHTS_CAMERA":"","WE_ARE_LOADING":"","EVERYTHING_END":"","MOVIE_OFF":"","MOVIE_ENDED":"","OKAY":"","CAROUSEL_CARD_SAVE":"","CAROUSEL_CARD_SAVED":"","CAROUSEL_NEW_CARD_ADDED":"","CAROUSEL_NEW_CARDS_ADDED":"","TVGRID_COMMERCIAL_TXT":"","TVGRID_TODAY":"","TVGRID_TOMORROW":"","EXIT_BUTTON_CANCEL":"","ERROR_SCAN_CHANNELS_TITLE":"","ERROR_SCAN_CHANNELS_TEXT":"","ERROR_SCAN_CHANNELS_BTN_SCAN":"","SCAN_FIRST_TIME_TITLE":"","SCAN_FIRST_TIME_TEXT":"","SCAN_FIRST_TIME_BTN":"","SCAN_HELP_RESCAN_TITLE":"","SCAN_HELP_RESCAN_TEXT":"","SCAN_HELP_RESCAN_BTN":"","SCAN_HELP_TITLE_1":"","SCAN_HELP_TITLE_2":"","SCAN_HELP_SUGGESTION":"","SCAN_HELP_PLEASE_CONTACT":"","SCAN_HELP_EMAIL":"","SCAN_HELP_SUBJECT":"","SCAN_HELP_VERSION":"","REGION_SET_TITLE":"","REGION_SET_TEXT":"","REGION_SET_SPAIN":"","REGION_SET_GERMANY":"","REGION_SET_USA":"","TVGRID_CHANGE_CHANNEL_TITLE":"","TVGRID_CHANGE_CHANNEL_TEXT":"","TVGRID_CHANGE_CHANNEL_BTN":"","CAROUSEL_ALIAS_MOVIE":"","CAROUSEL_ALIAS_SERIE":"","CAROUSEL_ALIAS_PERSON":"","CAROUSEL_ALIAS_CHARACTER":"","CAROUSEL_ALIAS_VEHICLE":"","CAROUSEL_ALIAS_FASHION":"","CAROUSEL_ALIAS_LOCATION":"","CAROUSEL_ALIAS_HISTORIC":"","CAROUSEL_ALIAS_TRIVIA":"","CAROUSEL_ALIAS_QUOTE":"","CAROUSEL_ALIAS_OST":"","CAROUSEL_ALIAS_HOME":"","CAROUSEL_ALIAS_TECHNOLOGY":"","CAROUSEL_ALIAS_ART":"","CAROUSEL_ALIAS_SONG":"","CAROUSEL_ALIAS_LOOK":"","CAROUSEL_ALIAS_TRAILER":"","CAROUSEL_ALIAS_WEAPON":"","CAROUSEL_ALIAS_LEISURE_SPORT":"","CAROUSEL_ALIAS_HEALTH_BEAUTY":"","CAROUSEL_ALIAS_FOOD_DRINK":"","CAROUSEL_ALIAS_FAUNA_FLORA":"","CAROUSEL_ALIAS_BUSINESS":"","CAROUSEL_ALIAS_REFERENCE":"","CAROUSEL_ALIAS_VIDEOCLIP":"","CAROUSEL_ALIAS_CHAPTER":"","CAROUSEL_ALIAS_ACTION_EMOTION":"","CAROUSEL_ALIAS_SEE_MORE":"","SOURCE":"","SPECS":"","BASIC_DATA":"","AWARDS":"","WINNER_SINGULAR":"Premio","WINNER_PLURAL":"Premios","NOMINEE_SINGULAR":"Nominación","NOMINEE_PLURAL":"Nominaciones","POCKET_TITLE_1":"","POCKET_TITLE_2":"","POCKET_NO_CARDS_TITLE":"","POCKET_NO_CARDS_TXT":"","GALLERY":"Galería","LOCATION":"Localización","CURIOSITY_TITLE":"","OVERVIEW":""}

/***/ }),

/***/ 612:
/***/ (function(module, exports) {

module.exports = {"VERSION_OUTDATED_TITLE":"Warning","VERSION_OUTDATED_TEXT":"The version you've installed is outdated.\\nYou need to upgrade now to the latest version in order to continue enjoying Dive.","VERSION_DEPRECATED_TITLE":"Warning","VERSION_DEPRECATED_TEXT":"The version you've installed is outdated.\\nA new version of Dive is available for you.\\nYou can update or continue with an old version of Dive.","GOT_IT":"GOT IT","NOW_TITLE":"NOW ON TV","NOW_SUBTITLE":"What will you discover?","UPCOMING_TITLE":"UPCOMING","GRID_NO_DATA_TEXT":"At the moment, there is nothing available to sync with Dive. Have you tried the demo?","TRY_DEMO":"TRY DEMO","MENU_SETTINGS":"SETTINGS","MENU_DEMO":"DEMO","MENU_PROFILE":"PROFILE","MENU_CARDS":"MY CARDS","MENU_SYNC":"DIVE IN","SEE_INFO":"SEE INFO","TVGRID_BROADCAST_TITLE1":"Now on TV","TVGRID_BROADCAST_TITLE2":"What will you discover?","TVGRID_UPCOMING_TITLE":"Upcoming…","TVGRID_BROADCAST_NO_CONTENT":"At the moment, there is nothing available to sync with Dive. Have you tried the demo?","TVGRID_BROADCAST_NO_CONTENT_TRY_DEMO":"Try demo","TVGRID_UPCOMING_NO_CONTENT":"No content available on our guide. Try again later or try our demo.","TVGRID_UPCOMING_NO_CONTENT_TRY_DEMO":"Try demo","GENERIC_ERROR_TITLE":"¡HOUSTON! WE’VE A PROBLEM…","GENERIC_ERROR_TEXT":"Were having some issues with the app. We’re working on it to fix it, please try again or come back again in a few minutes.","EXIT_TITLE":"PLEASE, DON’T GO.","EXIT_TEXT":"You\\'re about to leave Dive.\\nAre you sure you want to exit?","EXIT_BUTTON_OK":"YES, EXIT","NETWORK_ERROR_TITLE":"INTERNET CONNECTION REQUIRED","NETWORK_ERROR_TEXT":"No connection detected. \\nGo to settings and verify if your Internet is working.","TVGRID_EMPTY_BROADCAST_TITLE1":"This is awkward","TVGRID_EMPTY_BROADCAST_TITLE2":"What can I do?","TVGRID_EMPTY_UPCOMING_TXT1":"There's no content right now.\\nCheck later or enjoy %1$s.","TVGRID_EMPTY_UPCOMING_TXT2":"Dive on your phone","TVGRID_EMPTY_WATCH_OUR_DEMO":"Watch\\nour\\ndemo","SELECTOR_ALL_CATEGORIES":"All categories","SELECTOR_CAST_CHARACTER":"Cast & Character","SELECTOR_FASHION_BEAUTY":"Fashion & Beauty","SELECTOR_MUSIC":"Music","SELECTOR_PLACES_TRAVEL":"Places & Travel","SELECTOR_CARS_MORE":"Cars & More","SELECTOR_FUN_FACTS":"Fun facts","SELECTOR_OTHER_CATEGORIES":"Categories","BIOGRAPHY":"Biography","COMEDY":"Comedy","CRIME":"Crime","ACTION":"Action","THRILLER":"Thriller","ADVENTURE":"Adventure","SCI_FI":"Sci-Fi","FANTASY":"Fantasy","DRAMA":"Drama","ROMANCE":"Romance","TERROR":"Horror","HISTORY":"History","WESTERN":"Western","WAR":"War","MISTERY":"Mystery","FAMILY":"Family","SPORT":"Sport","MUSIC":"Music","MUSICAL":"Musical","ANIMATION":"Animation","DOCUMENTARY":"Documentary","FILM_NOIR":"Film-Noir","NEWS":"News","KIDS":"Kids","TALK_SHOW":"Talk-Show","CURRENT_SCENE":"Current Scene","PIZZA_OR_POP_CORN":"PIZZA OR POP CORN?","WE_RECOMMEND":"The show you’re watching is on advertising, we recommend:","MAKE_POP_CORN":"1. Make more Pop Corn.\n2. And browse the content while we’re on a break","LIGHTS_CAMERA":"LIGHTS, CAMERA AND ACTION","WE_ARE_LOADING":"We're loading the content you're watching on TV.","EVERYTHING_END":"EVERYTHING HAS AN END","MOVIE_OFF":"The broadcast has been interrupted.","MOVIE_ENDED":"The movie has ended","OKAY":"OKAY","CAROUSEL_CARD_SAVE":"Save for later","CAROUSEL_CARD_SAVED":"Saved","CAROUSEL_NEW_CARD_ADDED":"1 new card has been added!","CAROUSEL_NEW_CARDS_ADDED":"%1$d new cards have been added!","TVGRID_COMMERCIAL_TXT":"Enjoy Dive on your phone","TVGRID_TODAY":"Today","TVGRID_TOMORROW":"Tomorrow","EXIT_BUTTON_CANCEL":"NO, I DON'T WANT TO","ERROR_SCAN_CHANNELS_TITLE":"RE-SCAN TV CHANNELS","ERROR_SCAN_CHANNELS_TEXT":"This channel is not set yet, please re-scan to add the new channels.\\nWe need this to set the TV signal.","ERROR_SCAN_CHANNELS_BTN_SCAN":"OK, START SCAN","SCAN_FIRST_TIME_TITLE":"LET’S SET THE TV SIGNAL","SCAN_FIRST_TIME_TEXT":"We need to scan the channels to set the TV signal.\\nYou’ll be able to re-scan the channels in your menu if you want to add more.","SCAN_FIRST_TIME_BTN":"OK, START SCAN","SCAN_HELP_RESCAN_TITLE":"RE-SCAN TV CHANNELS","SCAN_HELP_RESCAN_TEXT":"Re-scan to add new channels.\\nWe need this to set the TV signal.","SCAN_HELP_RESCAN_BTN":"OK, START SCAN","SCAN_HELP_TITLE_1":"SETTINGS","SCAN_HELP_TITLE_2":"Set your Dive experience","SCAN_HELP_SUGGESTION":"Something wrong? Any suggestions?","SCAN_HELP_PLEASE_CONTACT":"For customer support please contact:","SCAN_HELP_EMAIL":"support@dive.tv","SCAN_HELP_SUBJECT":"Write TV in the subject line and we will contact you as soon as possible.","SCAN_HELP_VERSION":"DIVE v%1$s","REGION_SET_TITLE":"FIRST THINGS, FIRST…","REGION_SET_TEXT":"We need to know where you are to show you the TV contents available to sync with.","REGION_SET_SPAIN":"SPAIN","REGION_SET_GERMANY":"GERMANY","REGION_SET_USA":"USA","TVGRID_CHANGE_CHANNEL_TITLE":"CHANNEL CHANGE","TVGRID_CHANGE_CHANNEL_TEXT":"Please confirm that you\\'ve changed the channel so that we can load the content of %1$s.","TVGRID_CHANGE_CHANNEL_BTN":"CONFIRM","CAROUSEL_ALIAS_MOVIE":"Movie","CAROUSEL_ALIAS_SERIE":"Serie","CAROUSEL_ALIAS_PERSON":"Person","CAROUSEL_ALIAS_CHARACTER":"Character","CAROUSEL_ALIAS_VEHICLE":"Vehicle","CAROUSEL_ALIAS_FASHION":"Fashion","CAROUSEL_ALIAS_LOCATION":"Location","CAROUSEL_ALIAS_HISTORIC":"Historic","CAROUSEL_ALIAS_TRIVIA":"Trivia","CAROUSEL_ALIAS_QUOTE":"Quote","CAROUSEL_ALIAS_OST":"OST","CAROUSEL_ALIAS_HOME":"Home","CAROUSEL_ALIAS_TECHNOLOGY":"Technology","CAROUSEL_ALIAS_ART":"Art","CAROUSEL_ALIAS_SONG":"Song","CAROUSEL_ALIAS_LOOK":"Look","CAROUSEL_ALIAS_TRAILER":"Trailer","CAROUSEL_ALIAS_WEAPON":"Weapon","CAROUSEL_ALIAS_LEISURE_SPORT":"Leisure Sport","CAROUSEL_ALIAS_HEALTH_BEAUTY":"Health & Beauty","CAROUSEL_ALIAS_FOOD_DRINK":"Food & Drink","CAROUSEL_ALIAS_FAUNA_FLORA":"Fauna & Flora","CAROUSEL_ALIAS_BUSINESS":"Business","CAROUSEL_ALIAS_REFERENCE":"Reference","CAROUSEL_ALIAS_VIDEOCLIP":"Videoclip","CAROUSEL_ALIAS_CHAPTER":"Chapter","CAROUSEL_ALIAS_ACTION_EMOTION":"Action & Emotion","CAROUSEL_ALIAS_SEE_MORE":"Explore More","SOURCE":"Source","SPECS":"Specs","BASIC_DATA":"Basic Data","AWARDS":"Awards","WINNER_SINGULAR":"","WINNER_PLURAL":"","NOMINEE_SINGULAR":"","NOMINEE_PLURAL":"","POCKET_TITLE_1":"MY CARDS","POCKET_TITLE_2":"The content you\\'ve liked","POCKET_NO_CARDS_TITLE":"NO SAVED CARDS YET","POCKET_NO_CARDS_TXT":"Save every card you like by pressing on the heart icon or activate your account to see the cards saved from your Dive mobile version.","GALLERY":"Gallery","LOCATION":"Location","CURIOSITY_TITLE":"Did you know...?","OVERVIEW":"Synopsis"}

/***/ }),

/***/ 613:
/***/ (function(module, exports) {

module.exports = {"VERSION_OUTDATED_TITLE":"","VERSION_OUTDATED_TEXT":"","VERSION_DEPRECATED_TITLE":"","VERSION_DEPRECATED_TEXT":"","GOT_IT":"","NOW_TITLE":"","NOW_SUBTITLE":"","UPCOMING_TITLE":"","GRID_NO_DATA_TEXT":"","TRY_DEMO":"","MENU_SETTINGS":"","MENU_DEMO":"","MENU_PROFILE":"","MENU_CARDS":"","MENU_SYNC":"","SEE_INFO":"","TVGRID_BROADCAST_TITLE1":"","TVGRID_BROADCAST_TITLE2":"","TVGRID_UPCOMING_TITLE":"","TVGRID_BROADCAST_NO_CONTENT":"","TVGRID_BROADCAST_NO_CONTENT_TRY_DEMO":"","TVGRID_UPCOMING_NO_CONTENT":"","TVGRID_UPCOMING_NO_CONTENT_TRY_DEMO":"","GENERIC_ERROR_TITLE":"","GENERIC_ERROR_TEXT":"","EXIT_TITLE":"","EXIT_TEXT":"","EXIT_BUTTON_OK":"","NETWORK_ERROR_TITLE":"","NETWORK_ERROR_TEXT":"","TVGRID_EMPTY_BROADCAST_TITLE1":"","TVGRID_EMPTY_BROADCAST_TITLE2":"","TVGRID_EMPTY_UPCOMING_TXT1":"","TVGRID_EMPTY_UPCOMING_TXT2":"","TVGRID_EMPTY_WATCH_OUR_DEMO":"","SELECTOR_ALL_CATEGORIES":"","SELECTOR_CAST_CHARACTER":"","SELECTOR_FASHION_BEAUTY":"","SELECTOR_MUSIC":"","SELECTOR_PLACES_TRAVEL":"","SELECTOR_CARS_MORE":"","SELECTOR_FUN_FACTS":"","SELECTOR_OTHER_CATEGORIES":"","BIOGRAPHY":"Biographie","COMEDY":"Comedy","CRIME":"Krimi","ACTION":"Action","THRILLER":"Thriller","ADVENTURE":"Abenteuer","SCI_FI":"Sci-Fi","FANTASY":"Fantasy","DRAMA":"Drama","ROMANCE":"Romance","TERROR":"Horror","HISTORY":"Geschichte","WESTERN":"Western","WAR":"Krieg","MISTERY":"Mystery","FAMILY":"Familie","SPORT":"Sport","MUSIC":"Musik","MUSICAL":"Musical","ANIMATION":"Animation","DOCUMENTARY":"Dokumentar","FILM_NOIR":"Film noir","NEWS":"News","KIDS":"Kinder","TALK_SHOW":"Talkshow","CURRENT_SCENE":"","PIZZA_OR_POP_CORN":"","WE_RECOMMEND":"","MAKE_POP_CORN":"","LIGHTS_CAMERA":"","WE_ARE_LOADING":"","EVERYTHING_END":"","MOVIE_OFF":"","MOVIE_ENDED":"","OKAY":"","CAROUSEL_CARD_SAVE":"","CAROUSEL_CARD_SAVED":"","CAROUSEL_NEW_CARD_ADDED":"","CAROUSEL_NEW_CARDS_ADDED":"","TVGRID_COMMERCIAL_TXT":"","TVGRID_TODAY":"","TVGRID_TOMORROW":"","EXIT_BUTTON_CANCEL":"","ERROR_SCAN_CHANNELS_TITLE":"","ERROR_SCAN_CHANNELS_TEXT":"","ERROR_SCAN_CHANNELS_BTN_SCAN":"","SCAN_FIRST_TIME_TITLE":"","SCAN_FIRST_TIME_TEXT":"","SCAN_FIRST_TIME_BTN":"","SCAN_HELP_RESCAN_TITLE":"","SCAN_HELP_RESCAN_TEXT":"","SCAN_HELP_RESCAN_BTN":"","SCAN_HELP_TITLE_1":"","SCAN_HELP_TITLE_2":"","SCAN_HELP_SUGGESTION":"","SCAN_HELP_PLEASE_CONTACT":"","SCAN_HELP_EMAIL":"","SCAN_HELP_SUBJECT":"","SCAN_HELP_VERSION":"","REGION_SET_TITLE":"","REGION_SET_TEXT":"","REGION_SET_SPAIN":"","REGION_SET_GERMANY":"","REGION_SET_USA":"","TVGRID_CHANGE_CHANNEL_TITLE":"","TVGRID_CHANGE_CHANNEL_TEXT":"","TVGRID_CHANGE_CHANNEL_BTN":"","CAROUSEL_ALIAS_MOVIE":"","CAROUSEL_ALIAS_SERIE":"","CAROUSEL_ALIAS_PERSON":"","CAROUSEL_ALIAS_CHARACTER":"","CAROUSEL_ALIAS_VEHICLE":"","CAROUSEL_ALIAS_FASHION":"","CAROUSEL_ALIAS_LOCATION":"","CAROUSEL_ALIAS_HISTORIC":"","CAROUSEL_ALIAS_TRIVIA":"","CAROUSEL_ALIAS_QUOTE":"","CAROUSEL_ALIAS_OST":"","CAROUSEL_ALIAS_HOME":"","CAROUSEL_ALIAS_TECHNOLOGY":"","CAROUSEL_ALIAS_ART":"","CAROUSEL_ALIAS_SONG":"","CAROUSEL_ALIAS_LOOK":"","CAROUSEL_ALIAS_TRAILER":"","CAROUSEL_ALIAS_WEAPON":"","CAROUSEL_ALIAS_LEISURE_SPORT":"","CAROUSEL_ALIAS_HEALTH_BEAUTY":"","CAROUSEL_ALIAS_FOOD_DRINK":"","CAROUSEL_ALIAS_FAUNA_FLORA":"","CAROUSEL_ALIAS_BUSINESS":"","CAROUSEL_ALIAS_REFERENCE":"","CAROUSEL_ALIAS_VIDEOCLIP":"","CAROUSEL_ALIAS_CHAPTER":"","CAROUSEL_ALIAS_ACTION_EMOTION":"","CAROUSEL_ALIAS_SEE_MORE":"","SOURCE":"","SPECS":"","BASIC_DATA":"","AWARDS":"","WINNER_SINGULAR":"","WINNER_PLURAL":"","NOMINEE_SINGULAR":"","NOMINEE_PLURAL":"","POCKET_TITLE_1":"","POCKET_TITLE_2":"","POCKET_NO_CARDS_TITLE":"","POCKET_NO_CARDS_TXT":"","GALLERY":"","LOCATION":"","CURIOSITY_TITLE":"","OVERVIEW":""}

/***/ }),

/***/ 614:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = this && this.__assign || Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
    }
    return t;
};
var __rest = this && this.__rest || function (s, e) {
    var t = {};
    for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];
    }return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(4);
var HOC_1 = __webpack_require__(17);
var NavigationContainerClass = function (_super) {
    __extends(NavigationContainerClass, _super);
    function NavigationContainerClass() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NavigationContainerClass.prototype.render = function () {
        var _a = this.props,
            accept = _a.accept,
            acceptCharset = _a.acceptCharset,
            action = _a.action,
            allowFullScreen = _a.allowFullScreen,
            allowTransparency = _a.allowTransparency,
            alt = _a.alt,
            async = _a.async,
            autoComplete = _a.autoComplete,
            autoFocus = _a.autoFocus,
            autoPlay = _a.autoPlay,
            capture = _a.capture,
            cellPadding = _a.cellPadding,
            cellSpacing = _a.cellSpacing,
            charSet = _a.charSet,
            challenge = _a.challenge,
            checked = _a.checked,
            cite = _a.cite,
            classID = _a.classID,
            cols = _a.cols,
            colSpan = _a.colSpan,
            content = _a.content,
            controls = _a.controls,
            coords = _a.coords,
            crossOrigin = _a.crossOrigin,
            data = _a.data,
            dateTime = _a.dateTime,
            defer = _a.defer,
            disabled = _a.disabled,
            download = _a.download,
            encType = _a.encType,
            form = _a.form,
            formAction = _a.formAction,
            formEncType = _a.formEncType,
            formMethod = _a.formMethod,
            formNoValidate = _a.formNoValidate,
            formTarget = _a.formTarget,
            frameBorder = _a.frameBorder,
            headers = _a.headers,
            height = _a.height,
            high = _a.high,
            href = _a.href,
            hrefLang = _a.hrefLang,
            htmlFor = _a.htmlFor,
            httpEquiv = _a.httpEquiv,
            integrity = _a.integrity,
            keyParams = _a.keyParams,
            keyType = _a.keyType,
            kind = _a.kind,
            label = _a.label,
            list = _a.list,
            loop = _a.loop,
            low = _a.low,
            manifest = _a.manifest,
            marginHeight = _a.marginHeight,
            marginWidth = _a.marginWidth,
            max = _a.max,
            maxLength = _a.maxLength,
            media = _a.media,
            mediaGroup = _a.mediaGroup,
            method = _a.method,
            min = _a.min,
            minLength = _a.minLength,
            multiple = _a.multiple,
            muted = _a.muted,
            name = _a.name,
            nonce = _a.nonce,
            noValidate = _a.noValidate,
            open = _a.open,
            optimum = _a.optimum,
            pattern = _a.pattern,
            placeholder = _a.placeholder,
            playsInline = _a.playsInline,
            poster = _a.poster,
            preload = _a.preload,
            readOnly = _a.readOnly,
            rel = _a.rel,
            required = _a.required,
            reversed = _a.reversed,
            rows = _a.rows,
            rowSpan = _a.rowSpan,
            sandbox = _a.sandbox,
            scope = _a.scope,
            scoped = _a.scoped,
            scrolling = _a.scrolling,
            seamless = _a.seamless,
            selected = _a.selected,
            shape = _a.shape,
            size = _a.size,
            sizes = _a.sizes,
            span = _a.span,
            src = _a.src,
            srcDoc = _a.srcDoc,
            srcLang = _a.srcLang,
            srcSet = _a.srcSet,
            start = _a.start,
            step = _a.step,
            summary = _a.summary,
            target = _a.target,
            type = _a.type,
            useMap = _a.useMap,
            value = _a.value,
            width = _a.width,
            wmode = _a.wmode,
            wrap = _a.wrap,
            defaultChecked = _a.defaultChecked,
            defaultValue = _a.defaultValue,
            suppressContentEditableWarning = _a.suppressContentEditableWarning,
            accessKey = _a.accessKey,
            contentEditable = _a.contentEditable,
            contextMenu = _a.contextMenu,
            dir = _a.dir,
            draggable = _a.draggable,
            hidden = _a.hidden,
            id = _a.id,
            lang = _a.lang,
            spellCheck = _a.spellCheck,
            style = _a.style,
            tabIndex = _a.tabIndex,
            title = _a.title,
            inputMode = _a.inputMode,
            is = _a.is,
            radioGroup = _a.radioGroup,
            role = _a.role,
            about = _a.about,
            datatype = _a.datatype,
            inlist = _a.inlist,
            prefix = _a.prefix,
            property = _a.property,
            resource = _a.resource,
            vocab = _a.vocab,
            autoCapitalize = _a.autoCapitalize,
            autoCorrect = _a.autoCorrect,
            autoSave = _a.autoSave,
            color = _a.color,
            itemProp = _a.itemProp,
            itemScope = _a.itemScope,
            itemType = _a.itemType,
            itemID = _a.itemID,
            itemRef = _a.itemRef,
            results = _a.results,
            security = _a.security,
            unselectable = _a.unselectable,
            children = _a.children,
            dangerouslySetInnerHTML = _a.dangerouslySetInnerHTML,
            onCopy = _a.onCopy,
            onCopyCapture = _a.onCopyCapture,
            onCut = _a.onCut,
            onCutCapture = _a.onCutCapture,
            onPaste = _a.onPaste,
            onPasteCapture = _a.onPasteCapture,
            onCompositionEnd = _a.onCompositionEnd,
            onCompositionEndCapture = _a.onCompositionEndCapture,
            onCompositionStart = _a.onCompositionStart,
            onCompositionStartCapture = _a.onCompositionStartCapture,
            onCompositionUpdate = _a.onCompositionUpdate,
            onCompositionUpdateCapture = _a.onCompositionUpdateCapture,
            onFocus = _a.onFocus,
            onFocusCapture = _a.onFocusCapture,
            onBlur = _a.onBlur,
            onBlurCapture = _a.onBlurCapture,
            onChange = _a.onChange,
            onChangeCapture = _a.onChangeCapture,
            onInput = _a.onInput,
            onInputCapture = _a.onInputCapture,
            onReset = _a.onReset,
            onResetCapture = _a.onResetCapture,
            onSubmit = _a.onSubmit,
            onSubmitCapture = _a.onSubmitCapture,
            onInvalid = _a.onInvalid,
            onInvalidCapture = _a.onInvalidCapture,
            onLoad = _a.onLoad,
            onLoadCapture = _a.onLoadCapture,
            onError = _a.onError,
            onErrorCapture = _a.onErrorCapture,
            onKeyDown = _a.onKeyDown,
            onKeyDownCapture = _a.onKeyDownCapture,
            onKeyPress = _a.onKeyPress,
            onKeyPressCapture = _a.onKeyPressCapture,
            onKeyUp = _a.onKeyUp,
            onKeyUpCapture = _a.onKeyUpCapture,
            onAbort = _a.onAbort,
            onAbortCapture = _a.onAbortCapture,
            onCanPlay = _a.onCanPlay,
            onCanPlayCapture = _a.onCanPlayCapture,
            onCanPlayThrough = _a.onCanPlayThrough,
            onCanPlayThroughCapture = _a.onCanPlayThroughCapture,
            onDurationChange = _a.onDurationChange,
            onDurationChangeCapture = _a.onDurationChangeCapture,
            onEmptied = _a.onEmptied,
            onEmptiedCapture = _a.onEmptiedCapture,
            onEncrypted = _a.onEncrypted,
            onEncryptedCapture = _a.onEncryptedCapture,
            onEnded = _a.onEnded,
            onEndedCapture = _a.onEndedCapture,
            onLoadedData = _a.onLoadedData,
            onLoadedDataCapture = _a.onLoadedDataCapture,
            onLoadedMetadata = _a.onLoadedMetadata,
            onLoadedMetadataCapture = _a.onLoadedMetadataCapture,
            onLoadStart = _a.onLoadStart,
            onLoadStartCapture = _a.onLoadStartCapture,
            onPause = _a.onPause,
            onPauseCapture = _a.onPauseCapture,
            onPlay = _a.onPlay,
            onPlayCapture = _a.onPlayCapture,
            onPlaying = _a.onPlaying,
            onPlayingCapture = _a.onPlayingCapture,
            onProgress = _a.onProgress,
            onProgressCapture = _a.onProgressCapture,
            onRateChange = _a.onRateChange,
            onRateChangeCapture = _a.onRateChangeCapture,
            onSeeked = _a.onSeeked,
            onSeekedCapture = _a.onSeekedCapture,
            onSeeking = _a.onSeeking,
            onSeekingCapture = _a.onSeekingCapture,
            onStalled = _a.onStalled,
            onStalledCapture = _a.onStalledCapture,
            onSuspend = _a.onSuspend,
            onSuspendCapture = _a.onSuspendCapture,
            onTimeUpdate = _a.onTimeUpdate,
            onTimeUpdateCapture = _a.onTimeUpdateCapture,
            onVolumeChange = _a.onVolumeChange,
            onVolumeChangeCapture = _a.onVolumeChangeCapture,
            onWaiting = _a.onWaiting,
            onWaitingCapture = _a.onWaitingCapture,
            onClick = _a.onClick,
            onClickCapture = _a.onClickCapture,
            onContextMenu = _a.onContextMenu,
            onContextMenuCapture = _a.onContextMenuCapture,
            onDoubleClick = _a.onDoubleClick,
            onDoubleClickCapture = _a.onDoubleClickCapture,
            onDrag = _a.onDrag,
            onDragCapture = _a.onDragCapture,
            onDragEnd = _a.onDragEnd,
            onDragEndCapture = _a.onDragEndCapture,
            onDragEnter = _a.onDragEnter,
            onDragEnterCapture = _a.onDragEnterCapture,
            onDragExit = _a.onDragExit,
            onDragExitCapture = _a.onDragExitCapture,
            onDragLeave = _a.onDragLeave,
            onDragLeaveCapture = _a.onDragLeaveCapture,
            onDragOver = _a.onDragOver,
            onDragOverCapture = _a.onDragOverCapture,
            onDragStart = _a.onDragStart,
            onDragStartCapture = _a.onDragStartCapture,
            onDrop = _a.onDrop,
            onDropCapture = _a.onDropCapture,
            onMouseDown = _a.onMouseDown,
            onMouseDownCapture = _a.onMouseDownCapture,
            onMouseEnter = _a.onMouseEnter,
            onMouseLeave = _a.onMouseLeave,
            onMouseMove = _a.onMouseMove,
            onMouseMoveCapture = _a.onMouseMoveCapture,
            onMouseOut = _a.onMouseOut,
            onMouseOutCapture = _a.onMouseOutCapture,
            onMouseOver = _a.onMouseOver,
            onMouseOverCapture = _a.onMouseOverCapture,
            onMouseUp = _a.onMouseUp,
            onMouseUpCapture = _a.onMouseUpCapture,
            onSelect = _a.onSelect,
            onSelectCapture = _a.onSelectCapture,
            onTouchCancel = _a.onTouchCancel,
            onTouchCancelCapture = _a.onTouchCancelCapture,
            onTouchEnd = _a.onTouchEnd,
            onTouchEndCapture = _a.onTouchEndCapture,
            onTouchMove = _a.onTouchMove,
            onTouchMoveCapture = _a.onTouchMoveCapture,
            onTouchStart = _a.onTouchStart,
            onTouchStartCapture = _a.onTouchStartCapture,
            onScroll = _a.onScroll,
            onScrollCapture = _a.onScrollCapture,
            onWheel = _a.onWheel,
            onWheelCapture = _a.onWheelCapture,
            onAnimationStart = _a.onAnimationStart,
            onAnimationStartCapture = _a.onAnimationStartCapture,
            onAnimationEnd = _a.onAnimationEnd,
            onAnimationEndCapture = _a.onAnimationEndCapture,
            onAnimationIteration = _a.onAnimationIteration,
            onAnimationIterationCapture = _a.onAnimationIterationCapture,
            onTransitionEnd = _a.onTransitionEnd,
            onTransitionEndCapture = _a.onTransitionEndCapture,
            key = _a.key,
            childrenProps = __rest(_a, ["accept", "acceptCharset", "action", "allowFullScreen", "allowTransparency", "alt", "async", "autoComplete", "autoFocus", "autoPlay", "capture", "cellPadding", "cellSpacing", "charSet", "challenge", "checked", "cite", "classID", "cols", "colSpan", "content", "controls", "coords", "crossOrigin", "data", "dateTime", "defer", "disabled", "download", "encType", "form", "formAction", "formEncType", "formMethod", "formNoValidate", "formTarget", "frameBorder", "headers", "height", "high", "href", "hrefLang", "htmlFor", "httpEquiv", "integrity", "keyParams", "keyType", "kind", "label", "list", "loop", "low", "manifest", "marginHeight", "marginWidth", "max", "maxLength", "media", "mediaGroup", "method", "min", "minLength", "multiple", "muted", "name", "nonce", "noValidate", "open", "optimum", "pattern", "placeholder", "playsInline", "poster", "preload", "readOnly", "rel", "required", "reversed", "rows", "rowSpan", "sandbox", "scope", "scoped", "scrolling", "seamless", "selected", "shape", "size", "sizes", "span", "src", "srcDoc", "srcLang", "srcSet", "start", "step", "summary", "target", "type", "useMap", "value", "width", "wmode", "wrap", "defaultChecked", "defaultValue", "suppressContentEditableWarning", "accessKey", "contentEditable", "contextMenu", "dir", "draggable", "hidden", "id", "lang", "spellCheck", "style", "tabIndex", "title", "inputMode", "is", "radioGroup", "role", "about", "datatype", "inlist", "prefix", "property", "resource", "vocab", "autoCapitalize", "autoCorrect", "autoSave", "color", "itemProp", "itemScope", "itemType", "itemID", "itemRef", "results", "security", "unselectable", "children", "dangerouslySetInnerHTML", "onCopy", "onCopyCapture", "onCut", "onCutCapture", "onPaste", "onPasteCapture", "onCompositionEnd", "onCompositionEndCapture", "onCompositionStart", "onCompositionStartCapture", "onCompositionUpdate", "onCompositionUpdateCapture", "onFocus", "onFocusCapture", "onBlur", "onBlurCapture", "onChange", "onChangeCapture", "onInput", "onInputCapture", "onReset", "onResetCapture", "onSubmit", "onSubmitCapture", "onInvalid", "onInvalidCapture", "onLoad", "onLoadCapture", "onError", "onErrorCapture", "onKeyDown", "onKeyDownCapture", "onKeyPress", "onKeyPressCapture", "onKeyUp", "onKeyUpCapture", "onAbort", "onAbortCapture", "onCanPlay", "onCanPlayCapture", "onCanPlayThrough", "onCanPlayThroughCapture", "onDurationChange", "onDurationChangeCapture", "onEmptied", "onEmptiedCapture", "onEncrypted", "onEncryptedCapture", "onEnded", "onEndedCapture", "onLoadedData", "onLoadedDataCapture", "onLoadedMetadata", "onLoadedMetadataCapture", "onLoadStart", "onLoadStartCapture", "onPause", "onPauseCapture", "onPlay", "onPlayCapture", "onPlaying", "onPlayingCapture", "onProgress", "onProgressCapture", "onRateChange", "onRateChangeCapture", "onSeeked", "onSeekedCapture", "onSeeking", "onSeekingCapture", "onStalled", "onStalledCapture", "onSuspend", "onSuspendCapture", "onTimeUpdate", "onTimeUpdateCapture", "onVolumeChange", "onVolumeChangeCapture", "onWaiting", "onWaitingCapture", "onClick", "onClickCapture", "onContextMenu", "onContextMenuCapture", "onDoubleClick", "onDoubleClickCapture", "onDrag", "onDragCapture", "onDragEnd", "onDragEndCapture", "onDragEnter", "onDragEnterCapture", "onDragExit", "onDragExitCapture", "onDragLeave", "onDragLeaveCapture", "onDragOver", "onDragOverCapture", "onDragStart", "onDragStartCapture", "onDrop", "onDropCapture", "onMouseDown", "onMouseDownCapture", "onMouseEnter", "onMouseLeave", "onMouseMove", "onMouseMoveCapture", "onMouseOut", "onMouseOutCapture", "onMouseOver", "onMouseOverCapture", "onMouseUp", "onMouseUpCapture", "onSelect", "onSelectCapture", "onTouchCancel", "onTouchCancelCapture", "onTouchEnd", "onTouchEndCapture", "onTouchMove", "onTouchMoveCapture", "onTouchStart", "onTouchStartCapture", "onScroll", "onScrollCapture", "onWheel", "onWheelCapture", "onAnimationStart", "onAnimationStartCapture", "onAnimationEnd", "onAnimationEndCapture", "onAnimationIteration", "onAnimationIterationCapture", "onTransitionEnd", "onTransitionEndCapture", "key"]);
        var className = this.props.className;
        className = className ? "navigableContainer " + className : "navigableContainer";
        className = "fillParent " + className;
        var divProps = { accept: accept, acceptCharset: acceptCharset, action: action, allowFullScreen: allowFullScreen, allowTransparency: allowTransparency, alt: alt, async: async, autoComplete: autoComplete, autoFocus: autoFocus, autoPlay: autoPlay, capture: capture, cellPadding: cellPadding, cellSpacing: cellSpacing, charSet: charSet, challenge: challenge, checked: checked, cite: cite, classID: classID, cols: cols, colSpan: colSpan, content: content, controls: controls, coords: coords, crossOrigin: crossOrigin, data: data, dateTime: dateTime, defer: defer, disabled: disabled, download: download, encType: encType, form: form, formAction: formAction, formEncType: formEncType, formMethod: formMethod, formNoValidate: formNoValidate, formTarget: formTarget, frameBorder: frameBorder, headers: headers, height: height, high: high, href: href, hrefLang: hrefLang, htmlFor: htmlFor, httpEquiv: httpEquiv, integrity: integrity, keyParams: keyParams, keyType: keyType, kind: kind, label: label, list: list, loop: loop, low: low, manifest: manifest, marginHeight: marginHeight, marginWidth: marginWidth, max: max, maxLength: maxLength, media: media, mediaGroup: mediaGroup, method: method, min: min, minLength: minLength, multiple: multiple, muted: muted, name: name, nonce: nonce, noValidate: noValidate, open: open, optimum: optimum, pattern: pattern, placeholder: placeholder, playsInline: playsInline, poster: poster, preload: preload, readOnly: readOnly, rel: rel, required: required, reversed: reversed, rows: rows, rowSpan: rowSpan, sandbox: sandbox, scope: scope, scoped: scoped, scrolling: scrolling, seamless: seamless, selected: selected, shape: shape, size: size, sizes: sizes, span: span, src: src, srcDoc: srcDoc, srcLang: srcLang, srcSet: srcSet, start: start, step: step, summary: summary, target: target, type: type, useMap: useMap, value: value, width: width, wmode: wmode, wrap: wrap, defaultChecked: defaultChecked, defaultValue: defaultValue, suppressContentEditableWarning: suppressContentEditableWarning, accessKey: accessKey, className: className, contentEditable: contentEditable, contextMenu: contextMenu, dir: dir, draggable: draggable, hidden: hidden, id: id, lang: lang, spellCheck: spellCheck, style: style, tabIndex: tabIndex, title: title, inputMode: inputMode, is: is, radioGroup: radioGroup, role: role, about: about, datatype: datatype, inlist: inlist, prefix: prefix, property: property, resource: resource, vocab: vocab, autoCapitalize: autoCapitalize, autoCorrect: autoCorrect, autoSave: autoSave, color: color, itemProp: itemProp, itemScope: itemScope, itemType: itemType, itemID: itemID, itemRef: itemRef, results: results, security: security, unselectable: unselectable, children: children, dangerouslySetInnerHTML: dangerouslySetInnerHTML, onCopy: onCopy, onCopyCapture: onCopyCapture, onCut: onCut, onCutCapture: onCutCapture, onPaste: onPaste, onPasteCapture: onPasteCapture, onCompositionEnd: onCompositionEnd, onCompositionEndCapture: onCompositionEndCapture, onCompositionStart: onCompositionStart, onCompositionStartCapture: onCompositionStartCapture, onCompositionUpdate: onCompositionUpdate, onCompositionUpdateCapture: onCompositionUpdateCapture, onFocus: onFocus, onFocusCapture: onFocusCapture, onBlur: onBlur, onBlurCapture: onBlurCapture, onChange: onChange, onChangeCapture: onChangeCapture, onInput: onInput, onInputCapture: onInputCapture, onReset: onReset, onResetCapture: onResetCapture, onSubmit: onSubmit, onSubmitCapture: onSubmitCapture, onInvalid: onInvalid, onInvalidCapture: onInvalidCapture, onLoad: onLoad, onLoadCapture: onLoadCapture, onError: onError, onErrorCapture: onErrorCapture, onKeyDown: onKeyDown, onKeyDownCapture: onKeyDownCapture, onKeyPress: onKeyPress, onKeyPressCapture: onKeyPressCapture, onKeyUp: onKeyUp, onKeyUpCapture: onKeyUpCapture, onAbort: onAbort, onAbortCapture: onAbortCapture, onCanPlay: onCanPlay, onCanPlayCapture: onCanPlayCapture, onCanPlayThrough: onCanPlayThrough, onCanPlayThroughCapture: onCanPlayThroughCapture, onDurationChange: onDurationChange, onDurationChangeCapture: onDurationChangeCapture, onEmptied: onEmptied, onEmptiedCapture: onEmptiedCapture, onEncrypted: onEncrypted, onEncryptedCapture: onEncryptedCapture, onEnded: onEnded, onEndedCapture: onEndedCapture, onLoadedData: onLoadedData, onLoadedDataCapture: onLoadedDataCapture, onLoadedMetadata: onLoadedMetadata, onLoadedMetadataCapture: onLoadedMetadataCapture, onLoadStart: onLoadStart, onLoadStartCapture: onLoadStartCapture, onPause: onPause, onPauseCapture: onPauseCapture, onPlay: onPlay, onPlayCapture: onPlayCapture, onPlaying: onPlaying, onPlayingCapture: onPlayingCapture, onProgress: onProgress, onProgressCapture: onProgressCapture, onRateChange: onRateChange, onRateChangeCapture: onRateChangeCapture, onSeeked: onSeeked, onSeekedCapture: onSeekedCapture, onSeeking: onSeeking, onSeekingCapture: onSeekingCapture, onStalled: onStalled, onStalledCapture: onStalledCapture, onSuspend: onSuspend, onSuspendCapture: onSuspendCapture, onTimeUpdate: onTimeUpdate, onTimeUpdateCapture: onTimeUpdateCapture, onVolumeChange: onVolumeChange, onVolumeChangeCapture: onVolumeChangeCapture, onWaiting: onWaiting, onWaitingCapture: onWaitingCapture, onClick: onClick, onClickCapture: onClickCapture, onContextMenu: onContextMenu, onContextMenuCapture: onContextMenuCapture, onDoubleClick: onDoubleClick, onDoubleClickCapture: onDoubleClickCapture, onDrag: onDrag, onDragCapture: onDragCapture, onDragEnd: onDragEnd, onDragEndCapture: onDragEndCapture, onDragEnter: onDragEnter, onDragEnterCapture: onDragEnterCapture, onDragExit: onDragExit, onDragExitCapture: onDragExitCapture, onDragLeave: onDragLeave, onDragLeaveCapture: onDragLeaveCapture, onDragOver: onDragOver, onDragOverCapture: onDragOverCapture, onDragStart: onDragStart, onDragStartCapture: onDragStartCapture, onDrop: onDrop, onDropCapture: onDropCapture, onMouseDown: onMouseDown, onMouseDownCapture: onMouseDownCapture, onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave, onMouseMove: onMouseMove, onMouseMoveCapture: onMouseMoveCapture, onMouseOut: onMouseOut, onMouseOutCapture: onMouseOutCapture, onMouseOver: onMouseOver, onMouseOverCapture: onMouseOverCapture, onMouseUp: onMouseUp, onMouseUpCapture: onMouseUpCapture, onSelect: onSelect, onSelectCapture: onSelectCapture, onTouchCancel: onTouchCancel, onTouchCancelCapture: onTouchCancelCapture, onTouchEnd: onTouchEnd, onTouchEndCapture: onTouchEndCapture, onTouchMove: onTouchMove, onTouchMoveCapture: onTouchMoveCapture, onTouchStart: onTouchStart, onTouchStartCapture: onTouchStartCapture, onScroll: onScroll, onScrollCapture: onScrollCapture, onWheel: onWheel, onWheelCapture: onWheelCapture, onAnimationStart: onAnimationStart, onAnimationStartCapture: onAnimationStartCapture, onAnimationEnd: onAnimationEnd, onAnimationEndCapture: onAnimationEndCapture, onAnimationIteration: onAnimationIteration, onAnimationIterationCapture: onAnimationIterationCapture, onTransitionEnd: onTransitionEnd, onTransitionEndCapture: onTransitionEndCapture, key: key };
        return React.createElement("div", __assign({}, divProps), this.props.children ? this.recursiveCloneChildren(this.props.children) : null);
    };
    NavigationContainerClass.prototype.recursiveCloneChildren = function (children) {
        var _this = this;
        return this.props.propagateParent ? React.Children.map(children, function (child, idx) {
            if (!child) return child;
            var childProps = __assign({}, child.props);
            var foundNav = false;
            if (child.props == undefined) {
                return child;
            } else if (child.type && childProps.parent) {
                childProps = __assign({}, childProps, { parent: _this });
                foundNav = true;
            } else {
                return child;
            }
            if (child.props && child.props.children) {
                if (!foundNav) {
                    childProps.children = _this.recursiveCloneChildren(child.props.children);
                }
            }
            return React.cloneElement(child, __assign({}, childProps));
        }) : children;
    };
    return NavigationContainerClass;
}(React.Component);
NavigationContainerClass.defaultProps = {
    propagateParent: false
};
exports.NavigationContainer = HOC_1.navigable(NavigationContainerClass);

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "navigationContainer.component.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 615:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = this && this.__assign || Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(4);
var redux_1 = __webpack_require__(80);
var react_redux_1 = __webpack_require__(52);
var Components_1 = __webpack_require__(20);
var Actions_1 = __webpack_require__(61);
var HOC_1 = __webpack_require__(17);
var Containers_1 = __webpack_require__(99);
exports.cardDetailInitialState = {
    status: "LOADING"
};
var CardDetailClass = function (_super) {
    __extends(CardDetailClass, _super);
    function CardDetailClass(props) {
        var _this = _super.call(this, props) || this;
        _this.cardModules = [];
        _this.state = exports.cardDetailInitialState;
        return _this;
    }
    CardDetailClass.prototype.render = function () {
        return React.createElement("div", { className: "cardDetail fillParent" }, React.createElement("div", { className: "bottomContainerTopButtons" }, React.createElement("div", { className: "cardDetailBtn" }, React.createElement(Components_1.NavigationContainer, { key: "carouselClose", className: "bctButton close", parent: this, clickAction: function clickAction() {
                return "";
            }, columns: 1 }))), this.props.card ? React.createElement(Containers_1.NavigableCardModuleList, { isDefault: true, parent: this, columns: 1, card: this.props.card, forceFirst: true }) : React.createElement(Components_1.Loading, null));
    };
    CardDetailClass.prototype.closeAllCards = function () {
        console.log("CLOSE ALL CARDS");
        this.props.uiActions.openSync();
    };
    CardDetailClass.prototype.componentDidUpdate = function () {
        if (this.props.card && this.state.status !== "DONE") {
            this.setState(__assign({}, this.state, { status: "DONE" }));
        }
    };
    CardDetailClass.prototype.addToArrayIfExists = function (targetArray, candidate) {
        if (candidate) {
            targetArray.push(candidate);
        }
    };
    return CardDetailClass;
}(React.PureComponent);
exports.CardDetailClass = CardDetailClass;
var mapDispatchToProps = function mapDispatchToProps(dispatch) {
    return {
        uiActions: redux_1.bindActionCreators(Actions_1.UIActions, dispatch)
    };
};
var mergeProps = function mergeProps(stateProps, dispatchProps, ownProps) {
    return __assign({}, stateProps, ownProps, dispatchProps);
};
exports.CardDetail = HOC_1.navigable(react_redux_1.connect(undefined, mapDispatchToProps, mergeProps)(CardDetailClass));

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "cardDetail.component.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 616:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(4);
var Services_1 = __webpack_require__(33);
var CardAndCategory = function (_super) {
    __extends(CardAndCategory, _super);
    function CardAndCategory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CardAndCategory.prototype.render = function () {
        var card = this.props.card;
        if (card) {
            var showImage = false;
            if (card.image && card.image.thumb) {
                showImage = true;
            }
            var showIcon = !showImage;
            var showTitle = false;
            var showSubtitle = false;
            switch (card.type) {
                case 'ost':
                case 'song':
                    showImage = false;
                    showIcon = true;
                    showTitle = true;
                    showSubtitle = true;
                    break;
                case 'quote':
                case 'reference':
                case 'trivia':
                    showImage = false;
                    showIcon = false;
                    showTitle = true;
                    break;
            }
            var category = Services_1.Localize("CAROUSEL_ALIAS_" + card.type.toUpperCase()) || card.type;
            return React.createElement("div", { className: "cardAndCategory" }, React.createElement("div", { className: "image " + card.type, style: showImage ? {
                    backgroundImage: "url(" + card.image.thumb + ")",
                    backgroundPosition: card.image.anchor_x + "% " + card.image.anchor_y + "%"
                } : undefined }, showIcon ? React.createElement("div", { className: "icon" }) : null, showTitle ? React.createElement("div", { className: "title" }, card.title) : null, showSubtitle && !showIcon ? React.createElement("div", { className: "subtitle" }, card.subtitle) : null), React.createElement("div", { className: "category" }, category));
        }
        return null;
    };
    CardAndCategory.defaultProps = {
        card: null
    };
    return CardAndCategory;
}(React.PureComponent);
exports.CardAndCategory = CardAndCategory;

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "cardAndCategory.component.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 617:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(4);
var classNames = __webpack_require__(100);
var Services_1 = __webpack_require__(33);
var Components_1 = __webpack_require__(20);
var HOC_1 = __webpack_require__(17);
var VerticalScrollClass = function (_super) {
    __extends(VerticalScrollClass, _super);
    function VerticalScrollClass() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.downAction = function () {
            _this.scrollBox.scrollTop += _this.scrollBox.offsetHeight;
        };
        _this.upAction = function () {
            _this.scrollBox.scrollTop -= _this.scrollBox.offsetHeight;
        };
        return _this;
    }
    VerticalScrollClass.prototype.render = function () {
        var _this = this;
        var full = this.props.source !== undefined && this.props.source.name !== undefined && this.props.source.name !== '';
        var classes = classNames({
            full: full,
            scrollBox: true
        });
        var source = this.props.source && this.props.source.name ? this.props.source.name : this.props.source && this.props.source.url ? this.props.source.url : null;
        return React.createElement("div", { className: "verticalScroll" }, React.createElement("div", { className: "scrollBox", ref: function ref(el) {
                if (el) {
                    _this.scrollBox = el;
                }
            } }, this.props.children), source ? React.createElement("div", { className: "source" }, React.createElement("label", { className: "label" }, Services_1.Localize('SOURCE'), ": "), React.createElement("label", { className: "text" }, source)) : null, React.createElement("div", { className: "btns" }, React.createElement(Components_1.DirectionButtonList, { parent: this, template: "horizontal", btns: [{ direction: 'up', action: this.upAction }, { direction: 'down', action: this.downAction }] })));
    };
    return VerticalScrollClass;
}(React.PureComponent);
exports.VerticalScrollClass = VerticalScrollClass;
exports.VerticalScroll = HOC_1.navigable(VerticalScrollClass);

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "verticalScroll.component.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 618:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(4);
var Components_1 = __webpack_require__(20);
var HOC_1 = __webpack_require__(17);
var HorizontalScrollClass = function (_super) {
    __extends(HorizontalScrollClass, _super);
    function HorizontalScrollClass() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.offset = 0;
        _this.showElements = function () {
            var elements = [];
            if (_this.props.children instanceof Array) {
                for (var i = _this.offset; i < _this.props.itemsShown + _this.offset && i < _this.props.children.length; i++) {
                    elements.push(_this.props.children[i]);
                }
            }
            return elements;
        };
        _this.leftAction = function () {
            _this.offset -= _this.props.itemsShown;
            if (_this.offset < 0) {
                _this.offset = 0;
            }
            _this.forceUpdate();
        };
        _this.rightAction = function () {
            _this.offset += _this.props.itemsShown;
            if (_this.props.children instanceof Array && _this.offset + _this.props.itemsShown >= _this.props.children.length) {
                _this.offset = _this.props.children.length - _this.props.itemsShown;
            }
            _this.forceUpdate();
        };
        return _this;
    }
    HorizontalScrollClass.prototype.render = function () {
        var _this = this;
        return React.createElement("div", { className: "horizontalScroll" }, React.createElement("div", { className: "scrollBox", ref: function ref(el) {
                if (el) {
                    _this.scrollBox = el;
                }
            } }, React.createElement(Components_1.NavigationContainer, { parent: this, propagateParent: true, className: "scrollBoxContent" }, this.showElements())), React.createElement("div", { className: "btns" }, React.createElement(Components_1.DirectionButtonList, { parent: this, template: "vertical", btns: [{ direction: 'right', action: this.rightAction }, { direction: 'left', action: this.leftAction }] })));
    };
    return HorizontalScrollClass;
}(React.PureComponent);
exports.HorizontalScrollClass = HorizontalScrollClass;
exports.HorizontalScroll = HOC_1.navigable(HorizontalScrollClass);

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "horizontalScroll.component.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 619:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(4);
var HOC_1 = __webpack_require__(17);
var Components_1 = __webpack_require__(20);
var DirectionButtonListClass = function (_super) {
    __extends(DirectionButtonListClass, _super);
    function DirectionButtonListClass() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DirectionButtonListClass.prototype.render = function () {
        var _this = this;
        return React.createElement("ul", { className: 'directionButtonList ' + this.props.template }, this.props.btns.map(function (btn, i) {
            return React.createElement("li", { className: "btn", key: i }, React.createElement(Components_1.DirectionButton, { direction: btn.direction, clickAction: btn.action, parent: _this, columns: _this.props.template !== 'vertical' ? _this.props.btns.length : 1 }));
        }));
    };
    return DirectionButtonListClass;
}(React.PureComponent);
exports.DirectionButtonListClass = DirectionButtonListClass;
exports.DirectionButtonList = HOC_1.navigable(DirectionButtonListClass);

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "directionButtonList.component.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 620:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(4);
var classNames = __webpack_require__(100);
var HOC_1 = __webpack_require__(17);
var DirectionButtonClass = function (_super) {
    __extends(DirectionButtonClass, _super);
    function DirectionButtonClass() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DirectionButtonClass.prototype.render = function () {
        var classes = classNames('directionButton', this.props.direction);
        return React.createElement("div", { className: classes });
    };
    return DirectionButtonClass;
}(React.PureComponent);
exports.DirectionButtonClass = DirectionButtonClass;
exports.DirectionButton = HOC_1.navigable(DirectionButtonClass);

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "directionButton.component.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 621:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(4);
var classNames = __webpack_require__(100);
var HOC_1 = __webpack_require__(17);
var Services_1 = __webpack_require__(33);
var MiniCardButtonClass = function (_super) {
    __extends(MiniCardButtonClass, _super);
    function MiniCardButtonClass() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MiniCardButtonClass.prototype.render = function () {
        switch (this.props.type) {
            case 'MORE':
                return React.createElement("div", { className: "miniCardButton fillParent more", onClick: this.props.clickAction }, "+");
            case 'SAVE':
                var classesApplied = classNames({
                    icon: true,
                    like: this.props.liked ? false : true,
                    liked: this.props.liked ? true : false
                });
                return React.createElement("div", { className: "miniCardButton fillParent", onClick: this.props.clickAction }, React.createElement("span", { className: classesApplied }), this.props.liked ? Services_1.Localize('CAROUSEL_CARD_SAVED') : Services_1.Localize('CAROUSEL_CARD_SAVE'));
            default:
                return React.createElement("div", { className: "miniCardButton fillParent", onClick: this.props.clickAction });
        }
    };
    return MiniCardButtonClass;
}(React.PureComponent);
exports.MiniCardButtonClass = MiniCardButtonClass;
exports.MiniCardButton = HOC_1.navigable(MiniCardButtonClass);

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "miniCardButton.component.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 622:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = this && this.__assign || Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(4);
var ReactDOM = __webpack_require__(91);
var redux_1 = __webpack_require__(80);
var react_redux_1 = __webpack_require__(52);
var HOC_1 = __webpack_require__(17);
var Components_1 = __webpack_require__(20);
var Actions_1 = __webpack_require__(61);
var MiniCardListClass = function (_super) {
    __extends(MiniCardListClass, _super);
    function MiniCardListClass() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MiniCardListClass.prototype.shouldComponentUpdate = function (nextProps) {
        if (_typeof(this.props.elements) !== _typeof(nextProps.elements)) {
            return true;
        } else if (nextProps.elements && nextProps.elements.length !== this.props.elements.length) {
            return true;
        }
        return false;
    };
    MiniCardListClass.prototype.componentWillUpdate = function (nextProps) {
        if (this.props.wasSelectedOnChangeScene) {
            if (this.props.setNodeById && this.props.idx) {
                this.props.setNodeById(this.props.idx);
            }
            if (this.props.setSelectedOnSceneChange !== undefined && this.props.elements.length > 0) {
                this.props.setSelectedOnSceneChange(false);
            }
        }
    };
    MiniCardListClass.prototype.render = function () {
        var _this = this;
        return React.createElement("ul", { className: "miniCardList" }, this.props.elements.map(function (sceneCard, i, sceneCards) {
            return _this.element({
                el: sceneCard,
                key: sceneCard.card_id + '#' + sceneCard.version,
                count: sceneCards.length,
                relations: sceneCard.relations,
                index: i,
                parent: parent
            });
        }));
    };
    MiniCardListClass.prototype.componentWillUnmount = function () {
        if (ReactDOM.findDOMNode(this).querySelector(".childFocused")) {
            this.props.setSelectedOnSceneChange(true);
        }
    };
    MiniCardListClass.prototype.element = function (params) {
        var el = params.el,
            key = params.key,
            count = params.count,
            relations = params.relations,
            index = params.index,
            parent = params.parent;
        var card = params.el;
        return React.createElement(Components_1.MiniCard, { focusChainClass: "childFocused", activeGroupClass: "activeGroup", groupName: (el.card_id + '' + el.version).toString(), element: card, relations: relations, parent: this, forceFirst: true, forceOrder: index, clickActionMore: this.clickActionMore.bind(this)(card), clickActionLike: this.clickActionLike.bind(this)(card), onFocusCallback: this.onFocusCallback.bind(this)(card), key: key, id: "" + key, isScrollable: true, navClass: "scrollable" });
    };
    MiniCardListClass.prototype.clickActionLike = function (originalCard) {
        var _this = this;
        return function (paramCard) {
            var card = paramCard || originalCard;
            if (!card) {
                return;
            }
            console.log("LIKE", card.card_id);
            _this.props.userActions.likeCard(card).then(function () {
                console.log("Liked success");
            });
        };
    };
    MiniCardListClass.prototype.clickActionMore = function (originalCard) {
        var _this = this;
        return function (paramCard) {
            var card = paramCard || originalCard;
            if (!card) {
                return;
            }
            console.log("Card clicked", card);
            _this.props.uiActions.openCard(card.card_id, "offmovie");
        };
    };
    MiniCardListClass.prototype.onFocusCallback = function (originalCard) {
        return function (paramCard) {
            var card = paramCard || originalCard;
        };
    };
    return MiniCardListClass;
}(React.Component);
exports.MiniCardListClass = MiniCardListClass;
var mapDispatchToProps = function mapDispatchToProps(dispatch) {
    return {
        uiActions: redux_1.bindActionCreators(Actions_1.UIActions, dispatch)
    };
};
var mergeProps = function mergeProps(stateProps, dispatchProps, ownProps) {
    return __assign({}, stateProps, ownProps, dispatchProps);
};
exports.MiniCardList = react_redux_1.connect(undefined, mapDispatchToProps, mergeProps, { withRef: true })(HOC_1.navigable(MiniCardListClass));

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "miniCardList.component.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 623:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(4);
var HOC_1 = __webpack_require__(17);
var Services_1 = __webpack_require__(33);
var Components_1 = __webpack_require__(20);
var classNames = __webpack_require__(100);
var MiniCardClass = function (_super) {
    __extends(MiniCardClass, _super);
    function MiniCardClass() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.miniCard = function () {
            return React.createElement("div", { className: "cardLeft", onMouseOver: function onMouseOver() {
                    return _this.props.setNodeById(_this.props.idx);
                } }, React.createElement(Components_1.CardAndCategory, { card: _this.props.element }));
        };
        _this.expandedInfo = function () {
            var text = _this.expandedInfoText();
            return React.createElement("div", { className: "expandedInfoContainer" }, React.createElement("div", { className: "expandedInfo" }, React.createElement("div", { className: "expandedInfoInside" }, React.createElement("div", { className: "text" }, text), React.createElement("div", { className: "btn" }, _this.button('MORE')), React.createElement("div", { className: "btn" }, _this.button('SAVE')))));
        };
        _this.expandedInfoText = function () {
            var box;
            var text = '';
            var textContainer = Services_1.Helper.getContainer(_this.props.element, 'text');
            if (textContainer !== undefined && textContainer.data.length > 0) {
                text = textContainer.data[0].text;
            }
            switch (_this.props.element.type) {
                case 'quote':
                case 'reference':
                    box = React.createElement("div", { className: "text alone" }, text);
                    break;
                case 'character':
                    var relation = Services_1.Helper.getRelation(_this.props.relations, 'played_by');
                    var duple = relation;
                    if (duple.data instanceof Array && duple.data.length > 0) {
                        var person = duple.data[0].from;
                        var title = _this.props.element.title;
                        if (person !== undefined) {
                            _this.openCard = person;
                            if (person.title !== undefined) {
                                title = person.title + ' as ' + title;
                            }
                            var textPersonContainer = Services_1.Helper.getContainer(person, 'text');
                            if (textPersonContainer !== undefined && textPersonContainer.data.length > 0) {
                                text = textPersonContainer.data[0].text;
                            }
                        }
                        box = React.createElement("div", { className: "text" }, React.createElement("div", { className: "title" }, title), React.createElement("div", { className: "desc" }, text));
                        break;
                    }
                case 'song':
                    box = React.createElement("div", { className: "text" });
                    break;
                default:
                    box = React.createElement("div", { className: "text" }, React.createElement("div", { className: "title" }, _this.props.element.title), React.createElement("div", { className: "desc" }, text));
                    break;
            }
            return box;
        };
        _this.button = function (type) {
            var actionWhenMore = function actionWhenMore() {
                _this.props.clickActionMore(_this.openCard);
            };
            var actionWhenLike = function actionWhenLike() {
                _this.props.clickActionLike(_this.openCard);
            };
            return React.createElement(Components_1.MiniCardButton, { clickAction: type === 'SAVE' ? actionWhenLike : actionWhenMore, parent: _this, columns: 1, groupName: _this.props.groupName, type: type });
        };
        return _this;
    }
    MiniCardClass.prototype.render = function () {
        var isRelation = false;
        var classes = classNames({
            minicard: true,
            relation: isRelation
        });
        return React.createElement("li", { id: this.props.id }, React.createElement("div", { className: classes }, isRelation ? React.createElement("div", { className: "relationBar" }) : '', this.miniCard(), this.expandedInfo()));
    };
    MiniCardClass.prototype.componentWillMount = function () {
        this.openCard = this.props.element;
    };
    return MiniCardClass;
}(React.PureComponent);
exports.MiniCardClass = MiniCardClass;
exports.MiniCard = HOC_1.navigable(MiniCardClass);

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "miniCard.component.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 624:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(4);
var Loading = function (_super) {
    __extends(Loading, _super);
    function Loading() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Loading.prototype.render = function () {
        return React.createElement("div", { className: "fillParent", style: { position: "relative" } }, React.createElement("div", { className: "spinner" }));
    };
    return Loading;
}(React.PureComponent);
exports.Loading = Loading;
;

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "loading.component.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 625:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = this && this.__assign || Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
    }
    return t;
};
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(4);
var HOC_1 = __webpack_require__(17);
var Services_1 = __webpack_require__(33);
var Components_1 = __webpack_require__(20);
var Text = function (_super) {
    __extends(Text, _super);
    function Text() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Text_1 = Text;
    Text.prototype.render = function () {
        var textTitle = this.getTitle();
        return React.createElement("div", { className: "cardModuleText cardModule" }, React.createElement("div", { className: "container" }, React.createElement(Components_1.VerticalScroll, { source: this.props.textData ? this.props.textData.source : undefined, parent: this }, textTitle ? React.createElement("div", { className: "cardTitle" }, textTitle) : null, React.createElement("div", { className: "cardText" }, this.props.textData.text))));
    };
    Text.prototype.getTitle = function () {
        if (this.props.container === undefined) {
            return '';
        }
        switch (this.props.container.content_type) {
            case 'biography':
                return Services_1.Localize('BIOGRAPHY');
            case 'overview':
                return Services_1.Localize('OVERVIEW');
            case 'curiosity':
            case 'reference':
                return Services_1.Localize('CURIOSITY_TITLE');
            case 'quote':
            case 'reference':
            case 'description':
            default:
                return null;
        }
    };
    Text = Text_1 = __decorate([HOC_1.statics({
        moduleName: "text",
        validate: function validate(card, moduleType, parent, props) {
            var container = Services_1.Helper.getContainer(card, 'text');
            if (container !== undefined && container.data !== undefined && container.data.length > 0) {
                var Instantiated = HOC_1.navigable(Text_1);
                return React.createElement(Instantiated, __assign({ container: container, textData: container.data[0], parent: parent, isScrollable: true, card: card, moduleType: moduleType }, props));
            }
            return null;
        }
    })], Text);
    return Text;
    var Text_1;
}(React.PureComponent);
exports.Text = Text;

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "text.component.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 626:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(4);
var Services_1 = __webpack_require__(33);
var Components_1 = __webpack_require__(20);
var HOC_1 = __webpack_require__(17);
var Table = function (_super) {
    __extends(Table, _super);
    function Table() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.getTitle = function () {
            switch (_this.props.container.content_type) {
                case 'specs':
                    return Services_1.Localize('SPECS');
                case 'basic_data':
                default:
                    return Services_1.Localize('BASIC_DATA');
            }
        };
        return _this;
    }
    Table_1 = Table;
    Table.prototype.render = function () {
        return React.createElement("div", { className: "cardModuleTable cardModule" }, React.createElement("div", { className: "container" }, React.createElement(Components_1.VerticalScroll, { parent: this }, React.createElement("div", { className: "cardTitle" }, this.getTitle()), React.createElement("div", { className: "table" }, React.createElement("table", null, React.createElement("tbody", null, this.props.container.data.map(function (listItem, idx) {
            return React.createElement("tr", { key: idx }, React.createElement("td", null, listItem.text), React.createElement("td", null, listItem.value));
        })))))));
    };
    Table = Table_1 = __decorate([HOC_1.statics({
        moduleName: "table",
        validate: function validate(card, moduleType, parent, props) {
            var container = Services_1.Helper.getContainer(card, 'listing');
            if (container && container.data && container.data.length > 0) {
                var Instantiated = HOC_1.navigable(Table_1);
                return React.createElement(Instantiated, { container: container, parent: parent, isScrollable: true, card: card, moduleType: moduleType });
            }
            return null;
        }
    })], Table);
    return Table;
    var Table_1;
}(React.PureComponent);
exports.Table = Table;

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "table.component.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 627:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(4);
var Services_1 = __webpack_require__(33);
var Components_1 = __webpack_require__(20);
var HOC_1 = __webpack_require__(17);
;
var List = function (_super) {
    __extends(List, _super);
    function List() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.getList = function () {
            var type = _this.props.moduleType;
            switch (type) {
                case 'Gallery':
                    return _this.getGalleryList();
                case 'Shop':
                case 'TravelShop':
                    return _this.getShopList();
                case 'Filmography':
                    return _this.getFilmographyList();
                case 'Cast':
                    return _this.getCastList();
                case 'AppearsInLocation':
                case 'CompleteTheDeco':
                    return _this.getRelSingleList();
                case 'Seasons':
                    return _this.getSeasonList();
            }
        };
        _this.getGalleryList = function () {
            if (_this.props.container) {
                var elements = _this.props.container.data.map(function (el, i) {
                    return React.createElement(Components_1.NavigationContainer, { key: _this.props.container.content_type + '_show_' + i, parent: _this, forceOrder: i % _this.props.itemsShown, columns: 2, className: "horizontalElement listElement focusable" }, React.createElement("img", { src: el.thumb }));
                });
                return elements;
            }
            return null;
        };
        _this.getShopList = function () {
            if (_this.props.container) {
                var elements = _this.props.container.data.map(function (el, i) {
                    return _this.getGenericElement(el.price.toString() + el.currency, el.image, i);
                });
                return elements;
            }
            return null;
        };
        _this.getFilmographyList = function () {
            if (_this.props.container) {
                var elements = _this.props.container.data.map(function (el, i) {
                    return _this.getGenericElement(el.from.title, el.from.image ? el.from.image.thumb : null, i);
                });
                return elements;
            }
            return null;
        };
        _this.getCastList = function () {
            if (_this.props.container) {
                var elements = _this.props.container.data.filter(function (el) {
                    return el.rel_type == 'plays' && el.from.image !== null;
                }).map(function (el, i) {
                    return _this.getGenericElement(el.from.title, el.from.image.thumb, i);
                });
                return elements;
            }
            return null;
        };
        _this.getRelSingleList = function () {
            if (_this.props.container) {
                var elements = _this.props.container.data.map(function (el, i) {
                    return _this.getGenericElement(el.title, el.image.thumb, i);
                });
                return elements;
            }
            return null;
        };
        _this.getSeasonList = function () {
            if (_this.props.container) {
                var elements = _this.props.container.data.map(function (el, i) {
                    return _this.getGenericElement('Season ' + el.season_index, el.image.thumb, i);
                });
                return elements;
            }
            return null;
        };
        _this.getGenericElement = function (title, image, order) {
            return React.createElement(Components_1.NavigationContainer, { key: _this.props.container.content_type + '_show_' + order, parent: _this, forceOrder: order % _this.props.itemsShown, columns: 2, className: "horizontalElement listElement" }, React.createElement("div", { className: "image focusable" }, React.createElement("img", { src: image })), React.createElement("div", { className: "title focusable" }, title));
        };
        _this.getTitle = function () {
            switch (_this.props.container.content_type) {
                case 'gallery':
                    return Services_1.Localize('GALLERY');
                default:
                    return null;
            }
        };
        return _this;
    }
    List_1 = List;
    List.getContainer = function (card, moduleType) {
        console.log("Filmography card: ", card);
        switch (moduleType) {
            case 'Gallery':
                return Services_1.Helper.getContainer(card, 'image');
            case 'Shop':
                var obj = {
                    content_type: 'products',
                    data: card.products,
                    type: 'listing'
                };
                return obj;
            case 'TravelShop':
                var obj2 = {
                    content_type: 'products',
                    data: card.products,
                    type: 'listing'
                };
                return obj2;
            case 'Filmography':
                return Services_1.Helper.getRelation(card.relations, 'filmography', 'content_type');
            case 'Cast':
                return Services_1.Helper.getRelation(card.relations, 'casting', 'content_type');
            case 'Seasons':
                return Services_1.Helper.getContainer(card, 'seasons');
            case 'AppearsInLocation':
                return Services_1.Helper.getRelation(card.relations, 'filmed_in', 'content_type');
            case 'CompleteTheDeco':
                return Services_1.Helper.getRelation(card.relations, 'home_deco', 'content_type');
            default:
                return undefined;
        }
    };
    List.prototype.render = function () {
        var textTitle = this.getTitle();
        return React.createElement("div", { className: "cardModuleList cardModule" }, React.createElement("div", { className: "container" }, React.createElement("div", { className: "cardTitle" }, textTitle), React.createElement("div", { className: "listContent" }, React.createElement(Components_1.HorizontalScroll, { parent: this, uniqueId: this.props.container.content_type, itemsShown: this.props.itemsShown }, this.getList()))));
    };
    List = List_1 = __decorate([HOC_1.statics({
        moduleName: "list",
        validate: function validate(card, moduleType, parent, props) {
            var container = List_1.getContainer(card, moduleType);
            if (container !== undefined && container.data !== undefined && container.data.length > 0) {
                var Instantiated = HOC_1.navigable(List_1);
                return React.createElement(Instantiated, { itemsShown: 2, container: container, parent: parent, isScrollable: true, card: card, moduleType: moduleType });
            }
            return null;
        }
    })], List);
    return List;
    var List_1;
}(React.PureComponent);
exports.List = List;

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "list.component.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 628:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(4);
var Services_1 = __webpack_require__(33);
var Components_1 = __webpack_require__(20);
var HOC_1 = __webpack_require__(17);
var Awards = function (_super) {
    __extends(Awards, _super);
    function Awards() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.getTitle = function () {
            return Localize('AWARDS');
        };
        return _this;
    }
    Awards_1 = Awards;
    Awards.prototype.render = function () {
        return React.createElement("div", { className: "cardModuleAwards cardModule" }, React.createElement("div", { className: "container" }, React.createElement(Components_1.VerticalScroll, { parent: this }, React.createElement("div", { className: "cardTitle" }, this.getTitle()), React.createElement("div", { className: "awards" }, React.createElement("table", null, React.createElement("tbody", null, this.props.container.data.map(function (listItem, idx) {
            var winnerNum = listItem.winner instanceof Array && listItem.winner.length > 0 ? listItem.winner.length : 0;
            var nomineeNum = listItem.nominee instanceof Array && listItem.nominee.length > 0 ? listItem.nominee.length : 0;
            var nomineeTexts = nomineeNum > 0 ? nomineeNum + " " + (nomineeNum > 1 ? Localize("NOMINEE_PLURAL") : Localize("NOMINEE_SINGULAR")) : "";
            var totalAwardsTexts = winnerNum > 0 ? winnerNum + " " + (winnerNum > 1 ? Localize("WINNER_PLURAL") : Localize("WINNER_SINGULAR")) + (nomineeNum > 0 ? " / " + nomineeTexts : "") : nomineeTexts;
            return React.createElement("tr", { key: idx }, React.createElement("td", null, React.createElement("table", null, React.createElement("tbody", null, React.createElement("tr", { key: "name", className: "awardName" }, React.createElement("td", null, listItem.title)), React.createElement("tr", { key: "num", className: "awardNums" }, React.createElement("td", null, totalAwardsTexts))))));
        })))))));
    };
    Awards = Awards_1 = __decorate([HOC_1.statics({
        moduleName: "awards",
        validate: function validate(card, moduleType, parent, props) {
            var container = Services_1.Helper.getContainer(card, 'awards');
            if (container && container.data && container.data.length > 0) {
                var Instantiated = HOC_1.navigable(Awards_1);
                return React.createElement(Instantiated, { container: container, parent: parent, isScrollable: true, card: card, moduleType: moduleType });
            }
            return null;
        }
    })], Awards);
    return Awards;
    var Awards_1;
}(React.PureComponent);
exports.Awards = Awards;

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "awards.component.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 629:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = this && this.__assign || Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
    }
    return t;
};
var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(4);
var Services_1 = __webpack_require__(33);
var HOC_1 = __webpack_require__(17);
var Map = function (_super) {
    __extends(Map, _super);
    function Map() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Map_1 = Map;
    Map.prototype.render = function () {
        var textTitle = this.getTitle();
        var _a = this.props.mapData,
            latitude = _a.latitude,
            longitude = _a.longitude,
            zoom = _a.zoom;
        var mapUrl = "https://maps.googleapis.com/maps/api/staticmap?center=" + latitude + "," + longitude + "&size=300x168";
        var appliedZoom = parseInt("" + zoom, 10);
        if (appliedZoom) {
            mapUrl += "&zoom=" + appliedZoom;
        }
        return React.createElement("div", { className: "cardModuleMap cardModule" }, React.createElement("div", { className: "container" }, textTitle ? React.createElement("div", { className: "cardTitle" }, textTitle) : null, React.createElement("div", { className: "map" }, React.createElement("img", { src: mapUrl, className: "mapThumbnail" }))));
    };
    Map.prototype.getTitle = function () {
        if (this.props.container === undefined) {
            return '';
        }
        return Services_1.Localize('LOCATION');
    };
    Map = Map_1 = __decorate([HOC_1.statics({
        moduleName: "map",
        validate: function validate(card, moduleType, parent, props) {
            console.log("[Map] card: ", card);
            var container = Services_1.Helper.getContainer(card, 'map');
            if (container !== undefined && container.data !== undefined && container.data.length > 0 && container.data[0].latitude && container.data[0].longitude) {
                var Instantiated = HOC_1.navigable(Map_1);
                return React.createElement(Instantiated, __assign({}, props, { container: container, mapData: container.data[0], parent: parent, card: card, moduleType: moduleType }));
            }
            return null;
        }
    })], Map);
    return Map;
    var Map_1;
}(React.PureComponent);
exports.Map = Map;

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "map.component.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 630:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CardModules_1 = __webpack_require__(267);
exports.cardModuleClasses = {
    Header: CardModules_1.Header,
    ButtonHeader: CardModules_1.Header,
    MovieHeader: CardModules_1.Header,
    Description: CardModules_1.Text,
    Biography: CardModules_1.Text,
    Reference: CardModules_1.Text,
    FullCuriosity: CardModules_1.Text,
    Overview: CardModules_1.Text,
    Gallery: CardModules_1.List,
    Shop: CardModules_1.List,
    TravelShop: CardModules_1.List,
    Directors: CardModules_1.List,
    Seasons: CardModules_1.List,
    Filmography: CardModules_1.List,
    Cast: CardModules_1.List,
    AppearsInLocation: CardModules_1.List,
    CompleteTheDeco: CardModules_1.List,
    Specifications: CardModules_1.Table,
    BasicInfo: CardModules_1.Table,
    AwardsModuleList: CardModules_1.Awards,
    MapModule: CardModules_1.Map
};

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "cardDetail.modules.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 631:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = this && this.__assign || Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(4);
var Components_1 = __webpack_require__(20);
var HOC_1 = __webpack_require__(17);
var CardDetailContainerClass = function (_super) {
    __extends(CardDetailContainerClass, _super);
    function CardDetailContainerClass() {
        var _this = _super.call(this) || this;
        _this.state = { status: "LOADING", card: undefined };
        return _this;
    }
    CardDetailContainerClass.prototype.componentDidMount = function () {
        var _this = this;
        if (this.state && this.state.status === "LOADING") {
            if (this.props.version != null) {
                DiveAPI.getCardVersion({ cardId: this.props.cardId, version: this.props.version, products: true }).then(function (card) {
                    console.log("[card] " + card.title + ": ", card);
                    _this.setState(__assign({}, _this.state, { status: "LOADED", card: card }));
                });
            } else {
                DiveAPI.getCard({ cardId: this.props.cardId, products: true }).then(function (card) {
                    console.log("[card] " + card.title + ": ", card);
                    _this.setState(__assign({}, _this.state, { status: "LOADED", card: card }));
                });
            }
        }
    };
    CardDetailContainerClass.prototype.render = function () {
        var subcomponent = !this.state || this.state.status !== "LOADED" ? React.createElement(Components_1.Loading, null) : React.createElement(Components_1.CardDetail, { parent: this, card: this.state.card, columns: 1, navClass: "cardDetailNav", isDefault: true });
        return subcomponent;
    };
    return CardDetailContainerClass;
}(React.PureComponent);
exports.CardDetailContainerClass = CardDetailContainerClass;
exports.CardDetailContainer = HOC_1.navigable(CardDetailContainerClass);

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "cardDetail.container.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 632:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(4);
var Components_1 = __webpack_require__(20);
;
var BottomOverlayMessage = function (_super) {
    __extends(BottomOverlayMessage, _super);
    function BottomOverlayMessage(props) {
        var _this = _super.call(this, props) || this;
        _this.state = { hidden: false };
        return _this;
    }
    BottomOverlayMessage.prototype.render = function () {
        return this.state && this.state.hidden ? null : this.getChildren();
    };
    BottomOverlayMessage.prototype.getChildren = function () {
        var _this = this;
        return React.createElement("div", { className: "bottomMessage fillParent" }, React.createElement(Components_1.NavigationContainer, { modal: true, parent: this.props.navigationParent, isDefault: true, propagateParent: true, columns: 1 }, React.createElement("div", { className: "messageContainer" }, React.createElement("div", { className: "closeContainer" }, React.createElement(Components_1.NavigationContainer, { className: "carouselButton carouselClose", parent: this, isDefault: true, columns: 1, onClick: function onClick() {
                _this.setState({ hidden: true });
            } })), this.props.children)));
    };
    return BottomOverlayMessage;
}(React.PureComponent);
exports.BottomOverlayMessage = BottomOverlayMessage;

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "bottomOverlayMessage.container.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 633:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = this && this.__assign || Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(4);
var react_redux_1 = __webpack_require__(52);
var redux_1 = __webpack_require__(80);
var HOC_1 = __webpack_require__(17);
var Components_1 = __webpack_require__(20);
var Actions_1 = __webpack_require__(61);
var Services_1 = __webpack_require__(33);
var Constants_1 = __webpack_require__(266);
var Containers_1 = __webpack_require__(99);
var CarouselClass = function (_super) {
    __extends(CarouselClass, _super);
    function CarouselClass(props) {
        var _this = _super.call(this, props) || this;
        _this.chunkRequested = false;
        _this.currentSceneText = Services_1.Localize("CURRENT_SCENE");
        _this.getState = function () {
            return _this.props.state;
        };
        _this.state = { rewinded: false };
        _this.closeCarousel = _this.closeCarousel.bind(_this);
        _this.getCurrentTime = _this.getCurrentTime.bind(_this);
        _this.adMessageContent = React.createElement("div", { key: "adMessageContent", className: "fillParent adMessage carouselMessageContent" }, React.createElement("div", { className: "adMessageLeft" }, React.createElement("h1", null, Services_1.Localize("PIZZA_OR_POP_CORN")), React.createElement("p", { className: "text1" }, Services_1.Localize("WE_RECOMMEND")), React.createElement("p", { className: "text2" }, Services_1.Localize("MAKE_POP_CORN"))), React.createElement("div", { className: "adMessageRight" }, React.createElement("h1", null, Services_1.Localize("TVGRID_COMMERCIAL_TXT"))));
        _this.endMessageContent = React.createElement("div", { key: "endMessageContent", className: "fillParent endMessage carouselMessageContent centeredMessage" }, React.createElement("div", { className: "messageCenter" }, React.createElement("h1", null, Services_1.Localize("EVERYTHING_END")), React.createElement("p", { className: "text1" }, Services_1.Localize("MOVIE_ENDED")), React.createElement("div", { className: "buttonsContainer" }, React.createElement(Components_1.NavigationContainer, { className: "genericBtn", parent: _this, isDefault: true, columns: 1, key: "messageCloseCarousel", onClick: function onClick() {
                _this.props.uiActions.open({ top: "TV", bottom: "GRID" });
            } }, Services_1.Localize("OKAY")))));
        _this.offMessageContent = React.createElement("div", { key: "offMessageContent", className: "fillParent offMessageContent carouselMessageContent centeredMessage" }, React.createElement("div", { className: "messageCenter" }, React.createElement("h1", null, Services_1.Localize("EVERYTHING_END")), React.createElement("p", { className: "text1" }, Services_1.Localize("MOVIE_OFF")), React.createElement("div", { className: "buttonsContainer" }, React.createElement(Components_1.NavigationContainer, { className: "genericBtn", key: "messageCloseCarousel", parent: _this, isDefault: true, columns: 1, onClick: function onClick() {
                _this.props.uiActions.open({ top: "TV", bottom: "GRID" });
            } }, Services_1.Localize("OKAY")))));
        _this.readyMessageContent = React.createElement("div", { key: "offMessageContent", className: "fillParent readyMessageContent carouselMessageContent centeredMessage" }, React.createElement("div", { className: "messageCenter" }, React.createElement("h1", null, Services_1.Localize("LIGHTS_CAMERA")), React.createElement("p", { className: "text1" }, Services_1.Localize("WE_ARE_LOADING"))));
        return _this;
    }
    CarouselClass.prototype.componentWillUpdate = function (nextProps) {};
    CarouselClass.prototype.componentWillMount = function () {
        this.props.syncChannel();
        this.activeFilters = [this.allCategoriesFilter];
    };
    CarouselClass.prototype.componentWillUnmount = function () {};
    CarouselClass.prototype.render = function () {
        var _this = this;
        var cards = this.props.state.cards !== undefined ? this.props.state.cards : [];
        cards = cards.filter(function (card) {
            return card && card.type && Constants_1.SUPPORTED_CARD_TYPES.indexOf(card.type) > -1 && card.type !== 'person';
        });
        return React.createElement("div", { className: "containerCarousel fillParent" }, React.createElement(Components_1.NavigationContainer, { key: "buttonContainer", ref: function ref(el) {
                if (el) {
                    _this.buttonsContainer = el.getWrappedInstance().refComponent;
                }
            }, propagateParent: false, parent: this, forceFirst: true, columns: 1 }, this.buttonsContainer ? this.getButtons() : ""), React.createElement("div", { className: "cards" }, cards.length === 0 ? React.createElement(Components_1.Loading, null) : React.createElement(Components_1.MiniCardList, { elements: cards, movieId: this.getState().movieId, getMovieTime: this.getCurrentTime, parent: this, columns: 1, key: this.props.state.movieId + "#" + Date.now, groupName: "MiniCardList", setSelectedOnSceneChange: this.props.setSelectedOnSceneChange, wasSelectedOnChangeScene: this.props.state.selectedOnSceneChange })), this.getMessageForCarousel());
    };
    CarouselClass.prototype.getCurrentTime = function () {
        return this.props.state.currentTime;
    };
    CarouselClass.prototype.getButtons = function () {
        var currentTimeInSecs = this.props.state.currentTime;
        var hours = Math.floor(currentTimeInSecs / 3600);
        currentTimeInSecs %= 3600;
        var minutes = Math.floor(currentTimeInSecs / 60);
        var seconds = parseInt((currentTimeInSecs % 60).toFixed(0), 10);
        var buttonCount = 7;
        if (0) {
            buttonCount--;
        }
        if (0) {
            buttonCount--;
        }
        if (this.state.rewinded === false) {
            buttonCount--;
        }
        var timeFormatted = (hours < 10 ? "0" + hours : hours) + ":" + ((minutes < 10 ? "0" + minutes : minutes) + ":" + (seconds < 10 ? "0" + seconds : seconds));
        var buttonsToRender = [];
        buttonsToRender.push(React.createElement(Components_1.NavigationContainer, { key: "carouselClose", className: "carouselButton bctButton close", forceOrder: 0, parent: this.buttonsContainer, onClick: this.closeCarousel }));
        return React.createElement("div", { id: "carouselButtons", className: "bottomContainerTopButtons" }, buttonsToRender);
    };
    CarouselClass.prototype.closeCarousel = function () {
        this.props.uiActions.open({ top: "TV", bottom: "GRID" });
    };
    CarouselClass.prototype.getMessageForCarousel = function () {
        var messageContent;
        var channelStatus = this.getState().channelStatus;
        if (channelStatus === "paused") {
            messageContent = this.adMessageContent;
        } else if (channelStatus === "end") {
            messageContent = this.endMessageContent;
        } else if (channelStatus === "off") {
            messageContent = this.offMessageContent;
        } else if (channelStatus === "ready") {
            messageContent = this.readyMessageContent;
        }
        if (messageContent) {
            return React.createElement(Containers_1.BottomOverlayMessage, { key: "bottomMessage#" + this.props.state.timeMovieSynced + "#" + channelStatus, navigationParent: this }, messageContent);
        }
    };
    CarouselClass.prototype.allCategoriesFilter = function () {
        return true;
    };
    return CarouselClass;
}(React.PureComponent);
exports.CarouselClass = CarouselClass;
var mapStateToProps = function mapStateToProps(state) {
    return { state: __assign({}, state.carousel) };
};
var mapDispatchToProps = function mapDispatchToProps(dispatch) {
    return __assign({}, redux_1.bindActionCreators(Actions_1.SyncActions, dispatch), { uiActions: redux_1.bindActionCreators(Actions_1.UIActions, dispatch) });
};
exports.Carousel = HOC_1.navigable(react_redux_1.connect(mapStateToProps, mapDispatchToProps)(CarouselClass));

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "carousel.container.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),

/***/ 99:
/***/ (function(module, exports, __webpack_require__) {

/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

"use strict";

function __export(m) {
    for (var p in m) {
        if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(522));
__export(__webpack_require__(525));
__export(__webpack_require__(526));
__export(__webpack_require__(631));
__export(__webpack_require__(632));
__export(__webpack_require__(633));

/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/daniel.marino/Desktop/REACT/api-front-library-react/node_modules/react-hot-loader/makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "index.tsx" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ })

},[312]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,