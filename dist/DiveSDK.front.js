!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.front=t():(e.DiveSDK=e.DiveSDK||{},e.DiveSDK.front=t())}(this,function(){return webpackJsonpDiveSDK__name_([0],{16:function(e,t,n){"use strict";function o(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),o(n(524)),o(n(587))},18:function(e,t,n){"use strict";function o(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),o(n(616)),o(n(617)),o(n(618)),o(n(619)),o(n(620)),o(n(621)),o(n(622)),o(n(623)),o(n(624)),o(n(625)),o(n(626))},22:function(e,t,n){"use strict";function o(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),o(n(525)),o(n(526)),o(n(586)),o(n(272))},263:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.SESSION_STORAGE_KEY="DiveState",t.DIVE_ENVIRONMENT="PRE",t.ENABLE_ROLLBAR=!1,t.SUPPORTED_CARD_TYPES=["movie","serie","person","character","vehicle","fashion","location","historic","trivia","quote","ost","home","technology","art","song","weapon","leisure_sport","health_beauty","food_drink","fauna_flora","business","reference","chapter"]},272:function(e,t,n){!function(t,n){e.exports=n()}(0,function(){return function(e){function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:o})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=31)}([function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){(function(o){function r(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type)||("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))}function i(e){var n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),n){var o="color: "+this.color;e.splice(1,0,o,"color: inherit");var r=0,i=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&(r++,"%c"===e&&(i=r))}),e.splice(i,0,o)}}function a(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)}function s(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}}function c(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==o&&"env"in o&&(e=o.env.DEBUG),e}t=e.exports=n(42),t.log=a,t.formatArgs=i,t.save=s,t.load=c,t.useColors=r,t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(c())}).call(t,n(41))},function(e,t,n){function o(e){if(e)return r(e)}function r(e){for(var t in o.prototype)e[t]=o.prototype[t];return e}e.exports=o,o.prototype.on=o.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},o.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},o.prototype.off=o.prototype.removeListener=o.prototype.removeAllListeners=o.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n=this._callbacks["$"+e];if(!n)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var o,r=0;r<n.length;r++)if((o=n[r])===t||o.fn===t){n.splice(r,1);break}return this},o.prototype.emit=function(e){this._callbacks=this._callbacks||{};var t=[].slice.call(arguments,1),n=this._callbacks["$"+e];if(n){n=n.slice(0);for(var o=0,r=n.length;o<r;++o)n[o].apply(this,t)}return this},o.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},o.prototype.hasListeners=function(e){return!!this.listeners(e).length}},function(e,t,n){(function(e){function o(e,n){return n("b"+t.packets[e.type]+e.data.data)}function r(e,n,o){if(!n)return t.encodeBase64Packet(e,o);var r=e.data,i=new Uint8Array(r),a=new Uint8Array(1+r.byteLength);a[0]=g[e.type];for(var s=0;s<i.length;s++)a[s+1]=i[s];return o(a.buffer)}function i(e,n,o){if(!n)return t.encodeBase64Packet(e,o);var r=new FileReader;return r.onload=function(){e.data=r.result,t.encodePacket(e,n,!0,o)},r.readAsArrayBuffer(e.data)}function a(e,n,o){if(!n)return t.encodeBase64Packet(e,o);if(v)return i(e,n,o);var r=new Uint8Array(1);return r[0]=g[e.type],o(new _([r.buffer,e.data]))}function s(e){try{e=d.decode(e,{strict:!1})}catch(e){return!1}return e}function c(e,t,n){for(var o=new Array(e.length),r=f(e.length,n),i=0;i<e.length;i++)!function(e,n,r){t(n,function(t,n){o[e]=n,r(t,o)})}(i,e[i],r)}var u,p=n(52),l=n(16),h=n(53),f=n(54),d=n(55);e&&e.ArrayBuffer&&(u=n(56));var y="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),m="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),v=y||m;t.protocol=3;var g=t.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},E=p(g),C={type:"error",data:"parser error"},_=n(57);t.encodePacket=function(t,n,i,s){"function"==typeof n&&(s=n,n=!1),"function"==typeof i&&(s=i,i=null);var c=void 0===t.data?void 0:t.data.buffer||t.data;if(e.ArrayBuffer&&c instanceof ArrayBuffer)return r(t,n,s);if(_&&c instanceof e.Blob)return a(t,n,s);if(c&&c.base64)return o(t,s);var u=g[t.type];return void 0!==t.data&&(u+=i?d.encode(String(t.data),{strict:!1}):String(t.data)),s(""+u)},t.encodeBase64Packet=function(n,o){var r="b"+t.packets[n.type];if(_&&n.data instanceof e.Blob){var i=new FileReader;return i.onload=function(){var e=i.result.split(",")[1];o(r+e)},i.readAsDataURL(n.data)}var a;try{a=String.fromCharCode.apply(null,new Uint8Array(n.data))}catch(e){for(var s=new Uint8Array(n.data),c=new Array(s.length),u=0;u<s.length;u++)c[u]=s[u];a=String.fromCharCode.apply(null,c)}return r+=e.btoa(a),o(r)},t.decodePacket=function(e,n,o){if(void 0===e)return C;if("string"==typeof e){if("b"===e.charAt(0))return t.decodeBase64Packet(e.substr(1),n);if(o&&!1===(e=s(e)))return C;var r=e.charAt(0);return Number(r)==r&&E[r]?e.length>1?{type:E[r],data:e.substring(1)}:{type:E[r]}:C}var i=new Uint8Array(e),r=i[0],a=h(e,1);return _&&"blob"===n&&(a=new _([a])),{type:E[r],data:a}},t.decodeBase64Packet=function(e,t){var n=E[e.charAt(0)];if(!u)return{type:n,data:{base64:!0,data:e.substr(1)}};var o=u.decode(e.substr(1));return"blob"===t&&_&&(o=new _([o])),{type:n,data:o}},t.encodePayload=function(e,n,o){function r(e){return e.length+":"+e}function i(e,o){t.encodePacket(e,!!a&&n,!1,function(e){o(null,r(e))})}"function"==typeof n&&(o=n,n=null);var a=l(e);return n&&a?_&&!v?t.encodePayloadAsBlob(e,o):t.encodePayloadAsArrayBuffer(e,o):e.length?void c(e,i,function(e,t){return o(t.join(""))}):o("0:")},t.decodePayload=function(e,n,o){if("string"!=typeof e)return t.decodePayloadAsBinary(e,n,o);"function"==typeof n&&(o=n,n=null);var r;if(""===e)return o(C,0,1);for(var i,a,s="",c=0,u=e.length;c<u;c++){var p=e.charAt(c);if(":"===p){if(""===s||s!=(i=Number(s)))return o(C,0,1);if(a=e.substr(c+1,i),s!=a.length)return o(C,0,1);if(a.length){if(r=t.decodePacket(a,n,!1),C.type===r.type&&C.data===r.data)return o(C,0,1);if(!1===o(r,c+i,u))return}c+=i,s=""}else s+=p}return""!==s?o(C,0,1):void 0},t.encodePayloadAsArrayBuffer=function(e,n){function o(e,n){t.encodePacket(e,!0,!0,function(e){return n(null,e)})}if(!e.length)return n(new ArrayBuffer(0));c(e,o,function(e,t){var o=t.reduce(function(e,t){var n;return n="string"==typeof t?t.length:t.byteLength,e+n.toString().length+n+2},0),r=new Uint8Array(o),i=0;return t.forEach(function(e){var t="string"==typeof e,n=e;if(t){for(var o=new Uint8Array(e.length),a=0;a<e.length;a++)o[a]=e.charCodeAt(a);n=o.buffer}r[i++]=t?0:1;for(var s=n.byteLength.toString(),a=0;a<s.length;a++)r[i++]=parseInt(s[a]);r[i++]=255;for(var o=new Uint8Array(n),a=0;a<o.length;a++)r[i++]=o[a]}),n(r.buffer)})},t.encodePayloadAsBlob=function(e,n){function o(e,n){t.encodePacket(e,!0,!0,function(e){var t=new Uint8Array(1);if(t[0]=1,"string"==typeof e){for(var o=new Uint8Array(e.length),r=0;r<e.length;r++)o[r]=e.charCodeAt(r);e=o.buffer,t[0]=0}for(var i=e instanceof ArrayBuffer?e.byteLength:e.size,a=i.toString(),s=new Uint8Array(a.length+1),r=0;r<a.length;r++)s[r]=parseInt(a[r]);if(s[a.length]=255,_){var c=new _([t.buffer,s.buffer,e]);n(null,c)}})}c(e,o,function(e,t){return n(new _(t))})},t.decodePayloadAsBinary=function(e,n,o){"function"==typeof n&&(o=n,n=null);for(var r=e,i=[];r.byteLength>0;){for(var a=new Uint8Array(r),s=0===a[0],c="",u=1;255!==a[u];u++){if(c.length>310)return o(C,0,1);c+=a[u]}r=h(r,2+c.length),c=parseInt(c);var p=h(r,0,c);if(s)try{p=String.fromCharCode.apply(null,new Uint8Array(p))}catch(e){var l=new Uint8Array(p);p="";for(var u=0;u<l.length;u++)p+=String.fromCharCode(l[u])}i.push(p),r=h(r,c)}var f=i.length;i.forEach(function(e,r){o(t.decodePacket(e,n,!0),r,f)})}}).call(t,n(0))},function(e,t){t.encode=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t.length&&(t+="&"),t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t},t.decode=function(e){for(var t={},n=e.split("&"),o=0,r=n.length;o<r;o++){var i=n[o].split("=");t[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return t}},function(e,t){e.exports=function(e,t){var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t,n){function o(){}function r(e){var n=""+e.type;return t.BINARY_EVENT!==e.type&&t.BINARY_ACK!==e.type||(n+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(n+=e.nsp+","),null!=e.id&&(n+=e.id),null!=e.data&&(n+=JSON.stringify(e.data)),l("encoded %j as %s",e,n),n}function i(e,t){function n(e){var n=d.deconstructPacket(e),o=r(n.packet),i=n.buffers;i.unshift(o),t(i)}d.removeBlobs(e,n)}function a(){this.reconstructor=null}function s(e){var n=0,o={type:Number(e.charAt(0))};if(null==t.types[o.type])return p();if(t.BINARY_EVENT===o.type||t.BINARY_ACK===o.type){for(var r="";"-"!==e.charAt(++n)&&(r+=e.charAt(n),n!=e.length););if(r!=Number(r)||"-"!==e.charAt(n))throw new Error("Illegal attachments");o.attachments=Number(r)}if("/"===e.charAt(n+1))for(o.nsp="";++n;){var i=e.charAt(n);if(","===i)break;if(o.nsp+=i,n===e.length)break}else o.nsp="/";var a=e.charAt(n+1);if(""!==a&&Number(a)==a){for(o.id="";++n;){var i=e.charAt(n);if(null==i||Number(i)!=i){--n;break}if(o.id+=e.charAt(n),n===e.length)break}o.id=Number(o.id)}return e.charAt(++n)&&(o=c(o,e.substr(n))),l("decoded %s as %j",e,o),o}function c(e,t){try{e.data=JSON.parse(t)}catch(e){return p()}return e}function u(e){this.reconPack=e,this.buffers=[]}function p(){return{type:t.ERROR,data:"parser error"}}var l=n(1)("socket.io-parser"),h=n(2),f=n(16),d=n(45),y=n(17);t.protocol=4,t.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],t.CONNECT=0,t.DISCONNECT=1,t.EVENT=2,t.ACK=3,t.ERROR=4,t.BINARY_EVENT=5,t.BINARY_ACK=6,t.Encoder=o,t.Decoder=a,o.prototype.encode=function(e,n){if(e.type!==t.EVENT&&e.type!==t.ACK||!f(e.data)||(e.type=e.type===t.EVENT?t.BINARY_EVENT:t.BINARY_ACK),l("encoding packet %j",e),t.BINARY_EVENT===e.type||t.BINARY_ACK===e.type)i(e,n);else{n([r(e)])}},h(a.prototype),a.prototype.add=function(e){var n;if("string"==typeof e)n=s(e),t.BINARY_EVENT===n.type||t.BINARY_ACK===n.type?(this.reconstructor=new u(n),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",n)):this.emit("decoded",n);else{if(!y(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(n=this.reconstructor.takeBinaryData(e))&&(this.reconstructor=null,this.emit("decoded",n))}},a.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},u.prototype.takeBinaryData=function(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){var t=d.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null},u.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(e,t,n){(function(t){var o=n(50);e.exports=function(e){var n=e.xdomain,r=e.xscheme,i=e.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!n||o))return new XMLHttpRequest}catch(e){}try{if("undefined"!=typeof XDomainRequest&&!r&&i)return new XDomainRequest}catch(e){}if(!n)try{return new(t[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}}).call(t,n(0))},function(e,t,n){function o(e){this.path=e.path,this.hostname=e.hostname,this.port=e.port,this.secure=e.secure,this.query=e.query,this.timestampParam=e.timestampParam,this.timestampRequests=e.timestampRequests,this.readyState="",this.agent=e.agent||!1,this.socket=e.socket,this.enablesXDR=e.enablesXDR,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.forceNode=e.forceNode,this.extraHeaders=e.extraHeaders,this.localAddress=e.localAddress}var r=n(3),i=n(2);e.exports=o,i(o.prototype),o.prototype.onError=function(e,t){var n=new Error(e);return n.type="TransportError",n.description=t,this.emit("error",n),this},o.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},o.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},o.prototype.send=function(e){if("open"!==this.readyState)throw new Error("Transport not open");this.write(e)},o.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},o.prototype.onData=function(e){var t=r.decodePacket(e,this.socket.binaryType);this.onPacket(t)},o.prototype.onPacket=function(e){this.emit("packet",e)},o.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){e.exports=!n(12)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){"use strict";t.decode=t.parse=n(32),t.encode=t.stringify=n(33)},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){var n=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,o=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];e.exports=function(e){var t=e,r=e.indexOf("["),i=e.indexOf("]");-1!=r&&-1!=i&&(e=e.substring(0,r)+e.substring(r,i).replace(/:/g,";")+e.substring(i,e.length));for(var a=n.exec(e||""),s={},c=14;c--;)s[o[c]]=a[c]||"";return-1!=r&&-1!=i&&(s.source=t,s.host=s.host.substring(1,s.host.length-1).replace(/;/g,":"),s.authority=s.authority.replace("[","").replace("]","").replace(/;/g,":"),s.ipv6uri=!0),s}},function(e,t,n){(function(t){function o(e){if(!e||"object"!=typeof e)return!1;if(r(e)){for(var n=0,i=e.length;n<i;n++)if(o(e[n]))return!0;return!1}if("function"==typeof t.Buffer&&t.Buffer.isBuffer&&t.Buffer.isBuffer(e)||"function"==typeof t.ArrayBuffer&&e instanceof ArrayBuffer||a&&e instanceof Blob||s&&e instanceof File)return!0;if(e.toJSON&&"function"==typeof e.toJSON&&1===arguments.length)return o(e.toJSON(),!0);for(var c in e)if(Object.prototype.hasOwnProperty.call(e,c)&&o(e[c]))return!0;return!1}var r=n(44),i=Object.prototype.toString,a="function"==typeof t.Blob||"[object BlobConstructor]"===i.call(t.Blob),s="function"==typeof t.File||"[object FileConstructor]"===i.call(t.File);e.exports=o}).call(t,n(0))},function(e,t,n){(function(t){function n(e){return t.Buffer&&t.Buffer.isBuffer(e)||t.ArrayBuffer&&e instanceof ArrayBuffer}e.exports=n}).call(t,n(0))},function(e,t,n){function o(e,t){if(!(this instanceof o))return new o(e,t);e&&"object"==typeof e&&(t=e,e=void 0),t=t||{},t.path=t.path||"/socket.io",this.nsps={},this.subs=[],this.opts=t,this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(t.randomizationFactor||.5),this.backoff=new h({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this.readyState="closed",this.uri=e,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var n=t.parser||s;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this.autoConnect=!1!==t.autoConnect,this.autoConnect&&this.open()}var r=n(47),i=n(23),a=n(2),s=n(6),c=n(24),u=n(25),p=n(1)("socket.io-client:manager"),l=n(22),h=n(63),f=Object.prototype.hasOwnProperty;e.exports=o,o.prototype.emitAll=function(){this.emit.apply(this,arguments);for(var e in this.nsps)f.call(this.nsps,e)&&this.nsps[e].emit.apply(this.nsps[e],arguments)},o.prototype.updateSocketIds=function(){for(var e in this.nsps)f.call(this.nsps,e)&&(this.nsps[e].id=this.generateId(e))},o.prototype.generateId=function(e){return("/"===e?"":e+"#")+this.engine.id},a(o.prototype),o.prototype.reconnection=function(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection},o.prototype.reconnectionAttempts=function(e){return arguments.length?(this._reconnectionAttempts=e,this):this._reconnectionAttempts},o.prototype.reconnectionDelay=function(e){return arguments.length?(this._reconnectionDelay=e,this.backoff&&this.backoff.setMin(e),this):this._reconnectionDelay},o.prototype.randomizationFactor=function(e){return arguments.length?(this._randomizationFactor=e,this.backoff&&this.backoff.setJitter(e),this):this._randomizationFactor},o.prototype.reconnectionDelayMax=function(e){return arguments.length?(this._reconnectionDelayMax=e,this.backoff&&this.backoff.setMax(e),this):this._reconnectionDelayMax},o.prototype.timeout=function(e){return arguments.length?(this._timeout=e,this):this._timeout},o.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},o.prototype.open=o.prototype.connect=function(e,t){if(p("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;p("opening %s",this.uri),this.engine=r(this.uri,this.opts);var n=this.engine,o=this;this.readyState="opening",this.skipReconnect=!1;var i=c(n,"open",function(){o.onopen(),e&&e()}),a=c(n,"error",function(t){if(p("connect_error"),o.cleanup(),o.readyState="closed",o.emitAll("connect_error",t),e){var n=new Error("Connection error");n.data=t,e(n)}else o.maybeReconnectOnOpen()});if(!1!==this._timeout){var s=this._timeout;p("connect attempt will timeout after %d",s);var u=setTimeout(function(){p("connect attempt timed out after %d",s),i.destroy(),n.close(),n.emit("error","timeout"),o.emitAll("connect_timeout",s)},s);this.subs.push({destroy:function(){clearTimeout(u)}})}return this.subs.push(i),this.subs.push(a),this},o.prototype.onopen=function(){p("open"),this.cleanup(),this.readyState="open",this.emit("open");var e=this.engine;this.subs.push(c(e,"data",u(this,"ondata"))),this.subs.push(c(e,"ping",u(this,"onping"))),this.subs.push(c(e,"pong",u(this,"onpong"))),this.subs.push(c(e,"error",u(this,"onerror"))),this.subs.push(c(e,"close",u(this,"onclose"))),this.subs.push(c(this.decoder,"decoded",u(this,"ondecoded")))},o.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},o.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},o.prototype.ondata=function(e){this.decoder.add(e)},o.prototype.ondecoded=function(e){this.emit("packet",e)},o.prototype.onerror=function(e){p("error",e),this.emitAll("error",e)},o.prototype.socket=function(e,t){function n(){~l(r.connecting,o)||r.connecting.push(o)}var o=this.nsps[e];if(!o){o=new i(this,e,t),this.nsps[e]=o;var r=this;o.on("connecting",n),o.on("connect",function(){o.id=r.generateId(e)}),this.autoConnect&&n()}return o},o.prototype.destroy=function(e){var t=l(this.connecting,e);~t&&this.connecting.splice(t,1),this.connecting.length||this.close()},o.prototype.packet=function(e){p("writing packet %j",e);var t=this;e.query&&0===e.type&&(e.nsp+="?"+e.query),t.encoding?t.packetBuffer.push(e):(t.encoding=!0,this.encoder.encode(e,function(n){for(var o=0;o<n.length;o++)t.engine.write(n[o],e.options);t.encoding=!1,t.processPacketQueue()}))},o.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var e=this.packetBuffer.shift();this.packet(e)}},o.prototype.cleanup=function(){p("cleanup");for(var e=this.subs.length,t=0;t<e;t++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},o.prototype.close=o.prototype.disconnect=function(){p("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},o.prototype.onclose=function(e){p("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",e),this._reconnection&&!this.skipReconnect&&this.reconnect()},o.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var e=this;if(this.backoff.attempts>=this._reconnectionAttempts)p("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var t=this.backoff.duration();p("will wait %dms before reconnect attempt",t),this.reconnecting=!0;var n=setTimeout(function(){e.skipReconnect||(p("attempting reconnect"),e.emitAll("reconnect_attempt",e.backoff.attempts),e.emitAll("reconnecting",e.backoff.attempts),e.skipReconnect||e.open(function(t){t?(p("reconnect attempt error"),e.reconnecting=!1,e.reconnect(),e.emitAll("reconnect_error",t.data)):(p("reconnect success"),e.onreconnect())}))},t);this.subs.push({destroy:function(){clearTimeout(n)}})}},o.prototype.onreconnect=function(){var e=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",e)}},function(e,t,n){(function(e){function o(t){var n=!1,o=!1,s=!1!==t.jsonp;if(e.location){var c="https:"===location.protocol,u=location.port;u||(u=c?443:80),n=t.hostname!==location.hostname||u!==t.port,o=t.secure!==c}if(t.xdomain=n,t.xscheme=o,"open"in new r(t)&&!t.forceJSONP)return new i(t);if(!s)throw new Error("JSONP disabled");return new a(t)}var r=n(7),i=n(51),a=n(58),s=n(59);t.polling=o,t.websocket=s}).call(t,n(0))},function(e,t,n){function o(e){var t=e&&e.forceBase64;p&&!t||(this.supportsBinary=!1),r.call(this,e)}var r=n(8),i=n(4),a=n(3),s=n(5),c=n(21),u=n(1)("engine.io-client:polling");e.exports=o;var p=function(){return null!=new(n(7))({xdomain:!1}).responseType}();s(o,r),o.prototype.name="polling",o.prototype.doOpen=function(){this.poll()},o.prototype.pause=function(e){function t(){u("paused"),n.readyState="paused",e()}var n=this;if(this.readyState="pausing",this.polling||!this.writable){var o=0;this.polling&&(u("we are currently polling - waiting to pause"),o++,this.once("pollComplete",function(){u("pre-pause polling complete"),--o||t()})),this.writable||(u("we are currently writing - waiting to pause"),o++,this.once("drain",function(){u("pre-pause writing complete"),--o||t()}))}else t()},o.prototype.poll=function(){u("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},o.prototype.onData=function(e){var t=this;u("polling got data %s",e);var n=function(e,n,o){if("opening"===t.readyState&&t.onOpen(),"close"===e.type)return t.onClose(),!1;t.onPacket(e)};a.decodePayload(e,this.socket.binaryType,n),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():u('ignoring poll - transport state "%s"',this.readyState))},o.prototype.doClose=function(){function e(){u("writing close packet"),t.write([{type:"close"}])}var t=this;"open"===this.readyState?(u("transport open - closing"),e()):(u("transport not open - deferring close"),this.once("open",e))},o.prototype.write=function(e){var t=this;this.writable=!1;var n=function(){t.writable=!0,t.emit("drain")};a.encodePayload(e,this.supportsBinary,function(e){t.doWrite(e,n)})},o.prototype.uri=function(){var e=this.query||{},t=this.secure?"https":"http",n="";return!1!==this.timestampRequests&&(e[this.timestampParam]=c()),this.supportsBinary||e.sid||(e.b64=1),e=i.encode(e),this.port&&("https"===t&&443!==Number(this.port)||"http"===t&&80!==Number(this.port))&&(n=":"+this.port),e.length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+e}},function(e,t,n){"use strict";function o(e){var t="";do{t=s[e%c]+t,e=Math.floor(e/c)}while(e>0);return t}function r(e){var t=0;for(l=0;l<e.length;l++)t=t*c+u[e.charAt(l)];return t}function i(){var e=o(+new Date);return e!==a?(p=0,a=e):e+"."+o(p++)}for(var a,s="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),c=64,u={},p=0,l=0;l<c;l++)u[s[l]]=l;i.encode=o,i.decode=r,e.exports=i},function(e,t){var n=[].indexOf;e.exports=function(e,t){if(n)return e.indexOf(t);for(var o=0;o<e.length;++o)if(e[o]===t)return o;return-1}},function(e,t,n){function o(e,t,n){this.io=e,this.nsp=t,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,n&&n.query&&(this.query=n.query),this.io.autoConnect&&this.open()}var r=n(6),i=n(2),a=n(62),s=n(24),c=n(25),u=n(1)("socket.io-client:socket"),p=n(4);e.exports=o;var l={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},h=i.prototype.emit;i(o.prototype),o.prototype.subEvents=function(){if(!this.subs){var e=this.io;this.subs=[s(e,"open",c(this,"onopen")),s(e,"packet",c(this,"onpacket")),s(e,"close",c(this,"onclose"))]}},o.prototype.open=o.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},o.prototype.send=function(){var e=a(arguments);return e.unshift("message"),this.emit.apply(this,e),this},o.prototype.emit=function(e){if(l.hasOwnProperty(e))return h.apply(this,arguments),this;var t=a(arguments),n={type:r.EVENT,data:t};return n.options={},n.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof t[t.length-1]&&(u("emitting packet with ack id %d",this.ids),this.acks[this.ids]=t.pop(),n.id=this.ids++),this.connected?this.packet(n):this.sendBuffer.push(n),delete this.flags,this},o.prototype.packet=function(e){e.nsp=this.nsp,this.io.packet(e)},o.prototype.onopen=function(){if(u("transport is open - connecting"),"/"!==this.nsp)if(this.query){var e="object"==typeof this.query?p.encode(this.query):this.query;u("sending connect packet with query %s",e),this.packet({type:r.CONNECT,query:e})}else this.packet({type:r.CONNECT})},o.prototype.onclose=function(e){u("close (%s)",e),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",e)},o.prototype.onpacket=function(e){if(e.nsp===this.nsp)switch(e.type){case r.CONNECT:this.onconnect();break;case r.EVENT:case r.BINARY_EVENT:this.onevent(e);break;case r.ACK:case r.BINARY_ACK:this.onack(e);break;case r.DISCONNECT:this.ondisconnect();break;case r.ERROR:this.emit("error",e.data)}},o.prototype.onevent=function(e){var t=e.data||[];u("emitting event %j",t),null!=e.id&&(u("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?h.apply(this,t):this.receiveBuffer.push(t)},o.prototype.ack=function(e){var t=this,n=!1;return function(){if(!n){n=!0;var o=a(arguments);u("sending ack %j",o),t.packet({type:r.ACK,id:e,data:o})}}},o.prototype.onack=function(e){var t=this.acks[e.id];"function"==typeof t?(u("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):u("bad ack %s",e.id)},o.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},o.prototype.emitBuffered=function(){var e;for(e=0;e<this.receiveBuffer.length;e++)h.apply(this,this.receiveBuffer[e]);for(this.receiveBuffer=[],e=0;e<this.sendBuffer.length;e++)this.packet(this.sendBuffer[e]);this.sendBuffer=[]},o.prototype.ondisconnect=function(){u("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},o.prototype.destroy=function(){if(this.subs){for(var e=0;e<this.subs.length;e++)this.subs[e].destroy();this.subs=null}this.io.destroy(this)},o.prototype.close=o.prototype.disconnect=function(){return this.connected&&(u("performing disconnect (%s)",this.nsp),this.packet({type:r.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},o.prototype.compress=function(e){return this.flags=this.flags||{},this.flags.compress=e,this}},function(e,t){function n(e,t,n){return e.on(t,n),{destroy:function(){e.removeListener(t,n)}}}e.exports=n},function(e,t){var n=[].slice;e.exports=function(e,t){if("string"==typeof t&&(t=e[t]),"function"!=typeof t)throw new Error("bind() requires a function");var o=n.call(arguments,2);return function(){return t.apply(e,o.concat(n.call(arguments)))}}},function(e,t){var n=e.exports={version:"2.5.1"};"number"==typeof __e&&(__e=n)},function(e,t,n){var o=n(28),r=n(29);e.exports=function(e){return o(r(e))}},function(e,t,n){var o=n(80);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==o(e)?e.split(""):Object(e)}},function(e,t){e.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t){var n=Math.ceil,o=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?o:n)(e)}},function(e,t,n){"use strict";var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++){t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e};Object.defineProperty(t,"__esModule",{value:!0});var i=n(13),a=n(34),s=n(37),c=n(39),u=n(64),p="https://rest.dive.tv/v1".replace(/\/+$/,""),l=function(){function e(e,t){void 0===e&&(e=p),void 0===t&&(t=s),this.basePath=e,this.fetch=t}return e}();t.BaseAPI=l,t.DefaultApiFetchParamCreator={deleteLikes:function(e,t){if(null==e.authorization)throw new Error("Missing required parameter authorization when calling deleteLikes");if(null==e.cardId)throw new Error("Missing required parameter cardId when calling deleteLikes");var n="/likes/{card_id}".replace("{card_id}",""+e.cardId),o=a.parse(n,!0),r=u({},{method:"DELETE"},t),i={};return r.headers=u({"Accept-Language":e.acceptLanguage,Authorization:e.authorization},i),{url:a.format(o),options:r}},getCard:function(e,t){if(null==e.authorization)throw new Error("Missing required parameter authorization when calling getCard");if(null==e.cardId)throw new Error("Missing required parameter cardId when calling getCard");var n="/cards/{card_id}".replace("{card_id}",""+e.cardId),o=a.parse(n,!0);o.query=u({},o.query,{products:e.products,user_data:e.userData,image_size:e.imageSize});var r=u({},{method:"GET"},t),i={};return r.headers=u({Authorization:e.authorization,"Accept-Language":e.acceptLanguage},i),{url:a.format(o),options:r}},getCardVersion:function(e,t){if(null==e.authorization)throw new Error("Missing required parameter authorization when calling getCardVersion");if(null==e.cardId)throw new Error("Missing required parameter cardId when calling getCardVersion");if(null==e.version)throw new Error("Missing required parameter version when calling getCardVersion");var n="/cards/{card_id}/versions/{version}".replace("{card_id}",""+e.cardId).replace("{version}",""+e.version),o=a.parse(n,!0);o.query=u({},o.query,{products:e.products,user_data:e.userData,relations:e.relations,image_size:e.imageSize});var r=u({},{method:"GET"},t),i={};return r.headers=u({Authorization:e.authorization,"Accept-Language":e.acceptLanguage},i),{url:a.format(o),options:r}},getCatalogMovie:function(e,t){if(null==e.authorization)throw new Error("Missing required parameter authorization when calling getCatalogMovie");if(null==e.clientMovieId)throw new Error("Missing required parameter clientMovieId when calling getCatalogMovie");var n="/movies/{client_movie_id}".replace("{client_movie_id}",""+e.clientMovieId),o=a.parse(n,!0);o.query=u({},o.query,{image_size:e.imageSize});var r=u({},{method:"GET"},t),i={};return r.headers=u({Authorization:e.authorization,"Accept-Language":e.acceptLanguage},i),{url:a.format(o),options:r}},getChannelGrid:function(e,t){if(null==e.authorization)throw new Error("Missing required parameter authorization when calling getChannelGrid");if(null==e.channelId)throw new Error("Missing required parameter channelId when calling getChannelGrid");var n="/channels/{channel_id}/grid".replace("{channel_id}",""+e.channelId),o=a.parse(n,!0);o.query=u({},o.query,{image_size:e.imageSize});var r=u({},{method:"GET"},t),i={};return r.headers=u({Authorization:e.authorization,"Accept-Language":e.acceptLanguage},i),{url:a.format(o),options:r}},getChannelMovie:function(e,t){if(null==e.authorization)throw new Error("Missing required parameter authorization when calling getChannelMovie");if(null==e.channelId)throw new Error("Missing required parameter channelId when calling getChannelMovie");var n="/channels/{channel_id}".replace("{channel_id}",""+e.channelId),o=a.parse(n,!0);o.query=u({},o.query,{image_size:e.imageSize});var r=u({},{method:"GET"},t),i={};return r.headers=u({Authorization:e.authorization,"Accept-Language":e.acceptLanguage},i),{url:a.format(o),options:r}},getLikes:function(e,t){if(null==e.authorization)throw new Error("Missing required parameter authorization when calling getLikes");var n=a.parse("/likes",!0);n.query=u({},n.query,{image_size:e.imageSize,paginate_key:e.paginateKey,size:e.size});var o=u({},{method:"GET"},t),r={};return o.headers=u({"Accept-Language":e.acceptLanguage,Authorization:e.authorization},r),{url:a.format(n),options:o}},getReadyChannels:function(e,t){if(null==e.authorization)throw new Error("Missing required parameter authorization when calling getReadyChannels");if(null==e.channelIdList)throw new Error("Missing required parameter channelIdList when calling getReadyChannels");var n="/channels/{channel_id_list}/ready".replace("{channel_id_list}",""+e.channelIdList),o=a.parse(n,!0),r=u({},{method:"GET"},t),i={};return r.headers=u({Authorization:e.authorization,"Accept-Language":e.acceptLanguage},i),{url:a.format(o),options:r}},getReadyMovies:function(e,t){if(null==e.authorization)throw new Error("Missing required parameter authorization when calling getReadyMovies");if(null==e.clientMovieIdList)throw new Error("Missing required parameter clientMovieIdList when calling getReadyMovies");var n="/movies/{client_movie_id_list}/ready".replace("{client_movie_id_list}",""+e.clientMovieIdList),o=a.parse(n,!0),r=u({},{method:"GET"},t),i={};return r.headers=u({Authorization:e.authorization,"Accept-Language":e.acceptLanguage},i),{url:a.format(o),options:r}},getStaticChannelScene:function(e,t){if(null==e.authorization)throw new Error("Missing required parameter authorization when calling getStaticChannelScene");if(null==e.channelId)throw new Error("Missing required parameter channelId when calling getStaticChannelScene");var n="/channels/{channel_id}/static".replace("{channel_id}",""+e.channelId),o=a.parse(n,!0);o.query=u({},o.query,{relations:e.relations,image_size:e.imageSize});var r=u({},{method:"GET"},t),i={};return r.headers=u({Authorization:e.authorization,"Accept-Language":e.acceptLanguage},i),{url:a.format(o),options:r}},getStaticMovieScene:function(e,t){if(null==e.authorization)throw new Error("Missing required parameter authorization when calling getStaticMovieScene");if(null==e.clientMovieId)throw new Error("Missing required parameter clientMovieId when calling getStaticMovieScene");if(null==e.timestamp)throw new Error("Missing required parameter timestamp when calling getStaticMovieScene");var n="/movies/{client_movie_id}/static/{timestamp}".replace("{client_movie_id}",""+e.clientMovieId).replace("{timestamp}",""+e.timestamp),o=a.parse(n,!0);o.query=u({},o.query,{relations:e.relations,image_size:e.imageSize});var r=u({},{method:"GET"},t),i={};return r.headers=u({Authorization:e.authorization,"Accept-Language":e.acceptLanguage},i),{url:a.format(o),options:r}},postLikes:function(e,t){if(null==e.authorization)throw new Error("Missing required parameter authorization when calling postLikes");if(null==e.cardId)throw new Error("Missing required parameter cardId when calling postLikes");var n="/likes/{card_id}".replace("{card_id}",""+e.cardId),o=a.parse(n,!0),r=u({},{method:"POST"},t),i={};return r.headers=u({"Accept-Language":e.acceptLanguage,Authorization:e.authorization},i),{url:a.format(o),options:r}},postToken:function(e,t){if(null==e.authorization)throw new Error("Missing required parameter authorization when calling postToken");if(null==e.grantType)throw new Error("Missing required parameter grantType when calling postToken");var n=a.parse("/token",!0);n.query=u({},n.query,{grant_type:e.grantType});var o=u({},{method:"POST"},t),r={};return r={"Content-Type":"application/x-www-form-urlencoded"},o.body=i.stringify({device_id:e.deviceId,refresh_token:e.refreshToken}),o.headers=u({Authorization:e.authorization,"Accept-Language":e.acceptLanguage},r),{url:a.format(n),options:o}}},t.DefaultApiFp={deleteLikes:function(e,n){var o=t.DefaultApiFetchParamCreator.deleteLikes(e,n);return function(e,t){return void 0===t&&(t=p),e(t+o.url,o.options).then(function(e){if(e.status>=200&&e.status<300)return e;throw e}).catch(function(e){throw e})}},getCard:function(e,n){var o=t.DefaultApiFetchParamCreator.getCard(e,n);return function(e,t){return void 0===t&&(t=p),e(t+o.url,o.options).then(function(e){if(e.status>=200&&e.status<300)return e.json();throw e}).catch(function(e){throw e})}},getCardVersion:function(e,n){var o=t.DefaultApiFetchParamCreator.getCardVersion(e,n);return function(e,t){return void 0===t&&(t=p),e(t+o.url,o.options).then(function(e){if(e.status>=200&&e.status<300)return e.json();throw e}).catch(function(e){throw e})}},getCatalogMovie:function(e,n){var o=t.DefaultApiFetchParamCreator.getCatalogMovie(e,n);return function(e,t){return void 0===t&&(t=p),e(t+o.url,o.options).then(function(e){if(e.status>=200&&e.status<300)return e.json();throw e}).catch(function(e){throw e})}},getChannelGrid:function(e,n){var o=t.DefaultApiFetchParamCreator.getChannelGrid(e,n);return function(e,t){return void 0===t&&(t=p),e(t+o.url,o.options).then(function(e){if(e.status>=200&&e.status<300)return e.json();throw e}).catch(function(e){throw e})}},getChannelMovie:function(e,n){var o=t.DefaultApiFetchParamCreator.getChannelMovie(e,n);return function(e,t){return void 0===t&&(t=p),e(t+o.url,o.options).then(function(e){if(e.status>=200&&e.status<300)return e.json();throw e}).catch(function(e){throw e})}},getLikes:function(e,n){var o=t.DefaultApiFetchParamCreator.getLikes(e,n);return function(e,t){return void 0===t&&(t=p),e(t+o.url,o.options).then(function(e){if(e.status>=200&&e.status<300)return e.json();throw e}).catch(function(e){throw e})}},getReadyChannels:function(e,n){var o=t.DefaultApiFetchParamCreator.getReadyChannels(e,n);return function(e,t){return void 0===t&&(t=p),e(t+o.url,o.options).then(function(e){if(e.status>=200&&e.status<300)return e.json();throw e}).catch(function(e){throw e})}},getReadyMovies:function(e,n){var o=t.DefaultApiFetchParamCreator.getReadyMovies(e,n);return function(e,t){return void 0===t&&(t=p),e(t+o.url,o.options).then(function(e){if(e.status>=200&&e.status<300)return e.json();throw e}).catch(function(e){throw e})}},getStaticChannelScene:function(e,n){var o=t.DefaultApiFetchParamCreator.getStaticChannelScene(e,n);return function(e,t){return void 0===t&&(t=p),e(t+o.url,o.options).then(function(e){if(e.status>=200&&e.status<300)return e.json();throw e}).catch(function(e){throw e})}},getStaticMovieScene:function(e,n){var o=t.DefaultApiFetchParamCreator.getStaticMovieScene(e,n);return function(e,t){return void 0===t&&(t=p),e(t+o.url,o.options).then(function(e){if(e.status>=200&&e.status<300)return e.json();throw e}).catch(function(e){throw e})}},postLikes:function(e,n){var o=t.DefaultApiFetchParamCreator.postLikes(e,n);return function(e,t){return void 0===t&&(t=p),e(t+o.url,o.options).then(function(e){if(e.status>=200&&e.status<300)return e;throw e}).catch(function(e){throw e})}},postToken:function(e,n){var o=t.DefaultApiFetchParamCreator.postToken(e,n);return function(e,t){return void 0===t&&(t=p),e(t+o.url,o.options).then(function(e){if(e.status>=200&&e.status<300)return e.json();throw e}).catch(function(e){throw e})}}};var h=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return o(n,e),n.prototype.deleteLikes=function(e,n){return t.DefaultApiFp.deleteLikes(e,n)(this.fetch,this.basePath)},n.prototype.getCard=function(e,n){return t.DefaultApiFp.getCard(e,n)(this.fetch,this.basePath)},n.prototype.getCardVersion=function(e,n){return t.DefaultApiFp.getCardVersion(e,n)(this.fetch,this.basePath)},n.prototype.getCatalogMovie=function(e,n){return t.DefaultApiFp.getCatalogMovie(e,n)(this.fetch,this.basePath)},n.prototype.getChannelGrid=function(e,n){return t.DefaultApiFp.getChannelGrid(e,n)(this.fetch,this.basePath)},n.prototype.getChannelMovie=function(e,n){return t.DefaultApiFp.getChannelMovie(e,n)(this.fetch,this.basePath)},n.prototype.getLikes=function(e,n){return t.DefaultApiFp.getLikes(e,n)(this.fetch,this.basePath)},n.prototype.getReadyChannels=function(e,n){return t.DefaultApiFp.getReadyChannels(e,n)(this.fetch,this.basePath)},n.prototype.getReadyMovies=function(e,n){return t.DefaultApiFp.getReadyMovies(e,n)(this.fetch,this.basePath)},n.prototype.getStaticChannelScene=function(e,n){return t.DefaultApiFp.getStaticChannelScene(e,n)(this.fetch,this.basePath)},n.prototype.getStaticMovieScene=function(e,n){return t.DefaultApiFp.getStaticMovieScene(e,n)(this.fetch,this.basePath)},n.prototype.postLikes=function(e,n){return t.DefaultApiFp.postLikes(e,n)(this.fetch,this.basePath)},n.prototype.postToken=function(e,n){return t.DefaultApiFp.postToken(e,n)(this.fetch,this.basePath)},n}(l);t.DefaultApi=h,t.DefaultApiFactory=function(e,n){return{deleteLikes:function(o,r){return t.DefaultApiFp.deleteLikes(o,r)(e,n)},getCard:function(o,r){return t.DefaultApiFp.getCard(o,r)(e,n)},getCardVersion:function(o,r){return t.DefaultApiFp.getCardVersion(o,r)(e,n)},getCatalogMovie:function(o,r){return t.DefaultApiFp.getCatalogMovie(o,r)(e,n)},getChannelGrid:function(o,r){return t.DefaultApiFp.getChannelGrid(o,r)(e,n)},getChannelMovie:function(o,r){return t.DefaultApiFp.getChannelMovie(o,r)(e,n)},getLikes:function(o,r){return t.DefaultApiFp.getLikes(o,r)(e,n)},getReadyChannels:function(o,r){return t.DefaultApiFp.getReadyChannels(o,r)(e,n)},getReadyMovies:function(o,r){return t.DefaultApiFp.getReadyMovies(o,r)(e,n)},getStaticChannelScene:function(o,r){return t.DefaultApiFp.getStaticChannelScene(o,r)(e,n)},getStaticMovieScene:function(o,r){return t.DefaultApiFp.getStaticMovieScene(o,r)(e,n)},postLikes:function(o,r){return t.DefaultApiFp.postLikes(o,r)(e,n)},postToken:function(o,r){return t.DefaultApiFp.postToken(o,r)(e,n)}}};var f=function(e){function n(t){var n=e.call(this,"",t.fetch)||this;if(n.environment="PRO",n.noAuthServices=["postRegisterDevice","postRegisterEmail","postToken","postVersion"],"object"!=typeof t)throw console.error("You should provide initialization params."),new Error("You should provide initialization params.");return n.apiKey=t.apiKey,t.deviceId&&n.setDeviceId(t.deviceId),n.eventNamespace=t.eventNamespace||"dive-external-api-",n.setEnvironment(t.env),n.storeTokenType=t.storeToken,n}return o(n,e),n.prototype.setDeviceId=function(e){this.deviceId=e},n.prototype.getSavedToken=function(){switch(this.storeTokenType){case"cookies":return this.getTokenFromCookies();default:if(this.getTokenFromWebStorage())return JSON.parse(this.getTokenFromWebStorage())}},n.prototype.setEnvironment=function(e){switch(this.environment=e,e){case"DEV":this.basePath=p.replace("https://","https://dev-");break;case"PRE":this.basePath=p.replace("https://","https://pre-");break;case"PRO":default:this.basePath=p}},n.prototype.setLocale=function(e){this.locale=e},n.prototype.getLocale=function(){return this.locale},n.prototype.writeToken=function(e){if(e){switch(this.storeTokenType){case"cookies":this.writeTokenToCookie(e);break;default:this.writeTokenToWebStorage(e)}this.diveTokenRefreshInterval&&(window.clearInterval(this.diveTokenRefreshInterval),this.diveTokenRefreshInterval=void 0),e.expires_in&&(this.diveTokenRefreshInterval=window.setInterval(this.refreshToken.bind(this),1e3*Math.max(1e4,e.expires_in-60)))}},n.prototype.gatherCommonHeaders=function(e){var t={};return e||(e={}),null==e.connection&&(t.connection="keep-alive"),null==e.acceptEncoding&&(t.acceptEncoding="gzip, deflate"),null==e.authorization&&this.getSavedToken()?t.authorization=""+this.getSavedToken().token_type.substring(0,1).toUpperCase()+this.getSavedToken().token_type.substring(1)+" "+this.getSavedToken().access_token:t.authorization="Basic "+this.apiKey,null==e.acceptLanguage&&null!==this.locale&&(t.acceptLanguage=this.locale),r({},t,e)},n.prototype.deleteSavedToken=function(){switch(this.storeTokenType){case"cookies":this.deleteTokenFromCookies();break;default:this.deleteTokenFromWebStorage()}},n.prototype.initializeToken=function(){var e=this;return new Promise(function(t,n){e.refreshToken().then(function(){t()}).catch(function(e){n(e)})})},n.prototype.postTokenAndSave=function(e,t){var n=this;return this.deleteSavedToken(),new Promise(function(o,i){var a=r({},n.gatherCommonHeaders(e),{deviceId:n.deviceId});n.postToken(a,t).then(function(e){n.writeToken(e),o()}).catch(i)})},n.prototype.syncWithMovieVOD=function(e){if(!e)throw new Error("Error, missing parameters object");if(!e.movieId)throw new Error("Error, missing movieId parameter");if(!e.timestamp)throw new Error("Error, missing timestamp parameter");this.syncWithMovie({movieId:e.movieId,timestamp:e.timestamp,callbacks:e.callbacks})},n.prototype.syncWithMovieStreaming=function(e){if(!e)throw new Error("Error, missing parameters object");if(!e.channelId)throw new Error("Error, missing channelId parameter");this.syncWithMovie({channelId:e.channelId,protocol:e.protocol,callbacks:e.callbacks})},n.prototype.syncWithMovie=function(e){var t=this;if(this.clearSocket(),!e)throw new Error("Error, missing parameters object");var n=e.protocol||"https",o="stream.dive.tv",r="channels",i={};switch(this.environment){case"DEV":o=n+"://dev-"+o;break;case"PRE":o=n+"://pre-"+o;break;default:o=n+"://"+o}!e.channelId&&e.movieId&&e.timestamp?(r="movies",i.movie_id=e.movieId,i.timestamp=e.timestamp):i.channel_id=e.channelId,o+="/"+r,this.socket=c(o,{path:"/v1/stream",multiplex:!1,reconnection:!0,query:i,transports:["websocket"],extraHeaders:{"Accept-Language":this.locale}}),this.socket.on("connect",function(){t.socket.emit("authenticate",{token:t.getSavedToken().access_token}).on("authenticated",function(){console.log("authorized")}).on("unauthorized",function(e){throw console.log("unauthorized: "+JSON.stringify(e.data)),new Error(e.data.type)}).on("error",function(t){console.log("SOCKET error",t),e.callbacks&&e.callbacks.onError instanceof Function&&e.callbacks.onError(t)}).on("movie_start",function(t){e.callbacks&&e.callbacks.onMovieStart instanceof Function&&e.callbacks.onMovieStart(t)}).on("movie_end",function(){e.callbacks&&e.callbacks.onMovieEnd instanceof Function&&e.callbacks.onMovieEnd()}).on("scene_start",function(t){e.callbacks&&e.callbacks.onSceneStart instanceof Function&&e.callbacks.onSceneStart(t)}).on("scene_update",function(t){e.callbacks&&e.callbacks.onSceneUpdate instanceof Function&&e.callbacks.onSceneUpdate(t)}).on("scene_end",function(){e.callbacks&&e.callbacks.onSceneEnd instanceof Function&&e.callbacks.onSceneEnd()}).on("pause_start",function(){e.callbacks&&e.callbacks.onPauseStart instanceof Function&&e.callbacks.onPauseStart()}).on("pause_end",function(){e.callbacks&&e.callbacks.onPauseEnd instanceof Function&&e.callbacks.onPauseEnd()})})},n.prototype.clearSocket=function(){this.socket&&this.socket.connected&&this.socket.disconnect(!0),this.socket=void 0},n.prototype.deleteLikes=function(e,n){var o=this;return new Promise(function(r,i){var a=o.gatherCommonHeaders(e);t.DefaultApiFp.deleteLikes(a,n)(o.fetch,o.basePath).then(function(e){r(e)}).catch(function(s){s&&console.log("%c REST error - deleteLikes","background: black; color: #FE2EF7; padding: 0 10px;",s),401===s.status&&o.serviceRequiresToken("deleteLikes")?o.refreshToken().catch(function(e){return o.postTokenAndSave({grantType:"device_credentials",deviceId:o.deviceId})}).then(function(){return a=o.gatherCommonHeaders(e),t.DefaultApiFp.deleteLikes(a,n)(o.fetch,o.basePath)}).then(function(e){r(e)}).catch(function(e){i(e)}):i(s)})})},n.prototype.getCard=function(e,n){var o=this;return new Promise(function(r,i){var a=o.gatherCommonHeaders(e);t.DefaultApiFp.getCard(a,n)(o.fetch,o.basePath).then(function(e){r(e)}).catch(function(s){s&&console.log("%c REST error - getCard","background: black; color: #FE2EF7; padding: 0 10px;",s),401===s.status&&o.serviceRequiresToken("getCard")?o.refreshToken().catch(function(e){return o.postTokenAndSave({grantType:"device_credentials",deviceId:o.deviceId})}).then(function(){return a=o.gatherCommonHeaders(e),t.DefaultApiFp.getCard(a,n)(o.fetch,o.basePath)}).then(function(e){r(e)}).catch(function(e){i(e)}):i(s)})})},n.prototype.getCardVersion=function(e,n){var o=this;return new Promise(function(r,i){var a=o.gatherCommonHeaders(e);t.DefaultApiFp.getCardVersion(a,n)(o.fetch,o.basePath).then(function(e){r(e)}).catch(function(s){s&&console.log("%c REST error - getCardVersion","background: black; color: #FE2EF7; padding: 0 10px;",s),401===s.status&&o.serviceRequiresToken("getCardVersion")?o.refreshToken().catch(function(e){return o.postTokenAndSave({grantType:"device_credentials",deviceId:o.deviceId})}).then(function(){return a=o.gatherCommonHeaders(e),t.DefaultApiFp.getCardVersion(a,n)(o.fetch,o.basePath)}).then(function(e){r(e)}).catch(function(e){i(e)}):i(s)})})},n.prototype.getCatalogMovie=function(e,n){var o=this;return new Promise(function(r,i){var a=o.gatherCommonHeaders(e);t.DefaultApiFp.getCatalogMovie(a,n)(o.fetch,o.basePath).then(function(e){r(e)}).catch(function(s){s&&console.log("%c REST error - getCatalogMovie","background: black; color: #FE2EF7; padding: 0 10px;",s),401===s.status&&o.serviceRequiresToken("getCatalogMovie")?o.refreshToken().catch(function(e){return o.postTokenAndSave({grantType:"device_credentials",deviceId:o.deviceId})}).then(function(){return a=o.gatherCommonHeaders(e),t.DefaultApiFp.getCatalogMovie(a,n)(o.fetch,o.basePath)}).then(function(e){r(e)}).catch(function(e){i(e)}):i(s)})})},n.prototype.getChannelGrid=function(e,n){var o=this;return new Promise(function(r,i){var a=o.gatherCommonHeaders(e);t.DefaultApiFp.getChannelGrid(a,n)(o.fetch,o.basePath).then(function(e){r(e)}).catch(function(s){s&&console.log("%c REST error - getChannelGrid","background: black; color: #FE2EF7; padding: 0 10px;",s),401===s.status&&o.serviceRequiresToken("getChannelGrid")?o.refreshToken().catch(function(e){return o.postTokenAndSave({grantType:"device_credentials",deviceId:o.deviceId})}).then(function(){return a=o.gatherCommonHeaders(e),t.DefaultApiFp.getChannelGrid(a,n)(o.fetch,o.basePath)}).then(function(e){r(e)}).catch(function(e){i(e)}):i(s)})})},n.prototype.getChannelMovie=function(e,n){var o=this;return new Promise(function(r,i){var a=o.gatherCommonHeaders(e);t.DefaultApiFp.getChannelMovie(a,n)(o.fetch,o.basePath).then(function(e){r(e)}).catch(function(s){s&&console.log("%c REST error - getChannelMovie","background: black; color: #FE2EF7; padding: 0 10px;",s),401===s.status&&o.serviceRequiresToken("getChannelMovie")?o.refreshToken().catch(function(e){return o.postTokenAndSave({grantType:"device_credentials",deviceId:o.deviceId})}).then(function(){return a=o.gatherCommonHeaders(e),t.DefaultApiFp.getChannelMovie(a,n)(o.fetch,o.basePath)}).then(function(e){r(e)}).catch(function(e){i(e)}):i(s)})})},n.prototype.getLikes=function(e,n){var o=this;return new Promise(function(r,i){var a=o.gatherCommonHeaders(e);t.DefaultApiFp.getLikes(a,n)(o.fetch,o.basePath).then(function(e){r(e)}).catch(function(s){s&&console.log("%c REST error - getLikes","background: black; color: #FE2EF7; padding: 0 10px;",s),401===s.status&&o.serviceRequiresToken("getLikes")?o.refreshToken().catch(function(e){return o.postTokenAndSave({grantType:"device_credentials",deviceId:o.deviceId})}).then(function(){return a=o.gatherCommonHeaders(e),t.DefaultApiFp.getLikes(a,n)(o.fetch,o.basePath)}).then(function(e){r(e)}).catch(function(e){i(e)}):i(s)})})},n.prototype.getReadyChannels=function(e,n){var o=this;return new Promise(function(r,i){var a=o.gatherCommonHeaders(e);t.DefaultApiFp.getReadyChannels(a,n)(o.fetch,o.basePath).then(function(e){r(e)}).catch(function(s){s&&console.log("%c REST error - getReadyChannels","background: black; color: #FE2EF7; padding: 0 10px;",s),401===s.status&&o.serviceRequiresToken("getReadyChannels")?o.refreshToken().catch(function(e){return o.postTokenAndSave({grantType:"device_credentials",deviceId:o.deviceId})}).then(function(){return a=o.gatherCommonHeaders(e),t.DefaultApiFp.getReadyChannels(a,n)(o.fetch,o.basePath)}).then(function(e){r(e)}).catch(function(e){i(e)}):i(s)})})},n.prototype.getReadyMovies=function(e,n){var o=this;return new Promise(function(r,i){var a=o.gatherCommonHeaders(e);t.DefaultApiFp.getReadyMovies(a,n)(o.fetch,o.basePath).then(function(e){r(e)}).catch(function(s){s&&console.log("%c REST error - getReadyMovies","background: black; color: #FE2EF7; padding: 0 10px;",s),401===s.status&&o.serviceRequiresToken("getReadyMovies")?o.refreshToken().catch(function(e){return o.postTokenAndSave({grantType:"device_credentials",deviceId:o.deviceId})}).then(function(){return a=o.gatherCommonHeaders(e),t.DefaultApiFp.getReadyMovies(a,n)(o.fetch,o.basePath)}).then(function(e){r(e)}).catch(function(e){i(e)}):i(s)})})},n.prototype.getStaticChannelScene=function(e,n){var o=this;return new Promise(function(r,i){var a=o.gatherCommonHeaders(e);t.DefaultApiFp.getStaticChannelScene(a,n)(o.fetch,o.basePath).then(function(e){r(e)}).catch(function(s){s&&console.log("%c REST error - getStaticChannelScene","background: black; color: #FE2EF7; padding: 0 10px;",s),401===s.status&&o.serviceRequiresToken("getStaticChannelScene")?o.refreshToken().catch(function(e){return o.postTokenAndSave({grantType:"device_credentials",deviceId:o.deviceId})}).then(function(){return a=o.gatherCommonHeaders(e),t.DefaultApiFp.getStaticChannelScene(a,n)(o.fetch,o.basePath)}).then(function(e){r(e)}).catch(function(e){i(e)}):i(s)})})},n.prototype.getStaticMovieScene=function(e,n){var o=this;return new Promise(function(r,i){var a=o.gatherCommonHeaders(e);t.DefaultApiFp.getStaticMovieScene(a,n)(o.fetch,o.basePath).then(function(e){r(e)}).catch(function(s){s&&console.log("%c REST error - getStaticMovieScene","background: black; color: #FE2EF7; padding: 0 10px;",s),401===s.status&&o.serviceRequiresToken("getStaticMovieScene")?o.refreshToken().catch(function(e){return o.postTokenAndSave({grantType:"device_credentials",deviceId:o.deviceId})}).then(function(){return a=o.gatherCommonHeaders(e),t.DefaultApiFp.getStaticMovieScene(a,n)(o.fetch,o.basePath)}).then(function(e){r(e)}).catch(function(e){i(e)}):i(s)})})},n.prototype.postLikes=function(e,n){var o=this;return new Promise(function(r,i){var a=o.gatherCommonHeaders(e);t.DefaultApiFp.postLikes(a,n)(o.fetch,o.basePath).then(function(e){r(e)}).catch(function(s){s&&console.log("%c REST error - postLikes","background: black; color: #FE2EF7; padding: 0 10px;",s),401===s.status&&o.serviceRequiresToken("postLikes")?o.refreshToken().catch(function(e){return o.postTokenAndSave({grantType:"device_credentials",deviceId:o.deviceId})}).then(function(){return a=o.gatherCommonHeaders(e),t.DefaultApiFp.postLikes(a,n)(o.fetch,o.basePath)}).then(function(e){r(e)}).catch(function(e){i(e)}):i(s)})})},n.prototype.postToken=function(e,n){var o=this;return new Promise(function(r,i){var a=o.gatherCommonHeaders(e);t.DefaultApiFp.postToken(a,n)(o.fetch,o.basePath).then(function(e){r(e)}).catch(function(s){s&&console.log("%c REST error - postToken","background: black; color: #FE2EF7; padding: 0 10px;",s),401===s.status&&o.serviceRequiresToken("postToken")?o.refreshToken().catch(function(e){return o.postTokenAndSave({grantType:"device_credentials",deviceId:o.deviceId})}).then(function(){return a=o.gatherCommonHeaders(e),t.DefaultApiFp.postToken(a,n)(o.fetch,o.basePath)}).then(function(e){r(e)}).catch(function(e){i(e)}):i(s)})})},n.prototype.serviceRequiresToken=function(e){return-1===this.noAuthServices.indexOf(e)},n.prototype.writeTokenToCookie=function(e){return this.setCookie("dive_token",JSON.stringify(e),e.expires_in)},n.prototype.writeTokenToWebStorage=function(e){window.localStorage&&window.localStorage.setItem("dive_token",JSON.stringify(e))},n.prototype.refreshToken=function(){var e=this.getSavedToken();this.apiKey;return e&&e.refresh_token?this.postTokenAndSave({grantType:"refresh_token",refreshToken:e.refresh_token}):this.postTokenAndSave({grantType:"device_credentials",deviceId:this.deviceId})},n.prototype.setCookie=function(e,t,n){var o=new Date;o.setTime(o.getTime()+24*n*60*60*1e3);var r="expires="+o.toUTCString();document.cookie=e+"="+t+";"+r+";path=/"},n.prototype.getCookie=function(e){for(var t=e+"=",n=decodeURIComponent(document.cookie),o=n.split(";"),r=0;r<o.length;r++){for(var i=o[r];" "==i.charAt(0);)i=i.substring(1);if(0==i.indexOf(t))return i.substring(t.length,i.length)}return""},n.prototype.getTokenFromCookies=function(){var e=this.getCookie("dive_token");if(e)try{return JSON.parse(e)}catch(e){return}},n.prototype.getTokenFromWebStorage=function(){if(window.localStorage)try{return window.localStorage.getItem("dive_token")}catch(e){return}},n.prototype.deleteTokenFromWebStorage=function(){window.localStorage&&window.localStorage.removeItem("dive_token")},n.prototype.deleteTokenFromCookies=function(){document.cookie="dive_token=;expires=Thu, 01 Jan 1970 00:00:01 GMT;"},n}(h);t.DiveAPIClass=f},function(e,t,n){"use strict";function o(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,t,n,i){t=t||"&",n=n||"=";var a={};if("string"!=typeof e||0===e.length)return a;var s=/\+/g;e=e.split(t);var c=1e3;i&&"number"==typeof i.maxKeys&&(c=i.maxKeys);var u=e.length;c>0&&u>c&&(u=c);for(var p=0;p<u;++p){var l,h,f,d,y=e[p].replace(s,"%20"),m=y.indexOf(n);m>=0?(l=y.substr(0,m),h=y.substr(m+1)):(l=y,h=""),f=decodeURIComponent(l),d=decodeURIComponent(h),o(a,f)?r(a[f])?a[f].push(d):a[f]=[a[f],d]:a[f]=d}return a};var r=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)}},function(e,t,n){"use strict";function o(e,t){if(e.map)return e.map(t);for(var n=[],o=0;o<e.length;o++)n.push(t(e[o],o));return n}var r=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,t,n,s){return t=t||"&",n=n||"=",null===e&&(e=void 0),"object"==typeof e?o(a(e),function(a){var s=encodeURIComponent(r(a))+n;return i(e[a])?o(e[a],function(e){return s+encodeURIComponent(r(e))}).join(t):s+encodeURIComponent(r(e[a]))}).join(t):s?encodeURIComponent(r(s))+n+encodeURIComponent(r(e)):""};var i=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)},a=Object.keys||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.push(n);return t}},function(e,t,n){"use strict";function o(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}function r(e,t,n){if(e&&u.isObject(e)&&e instanceof o)return e;var r=new o;return r.parse(e,t,n),r}function i(e){return u.isString(e)&&(e=r(e)),e instanceof o?e.format():o.prototype.format.call(e)}function a(e,t){return r(e,!1,!0).resolve(t)}function s(e,t){return e?r(e,!1,!0).resolveObject(t):t}var c=n(35),u=n(36);t.parse=r,t.resolve=a,t.resolveObject=s,t.format=i,t.Url=o;var p=/^([a-z0-9.+-]+:)/i,l=/:[0-9]*$/,h=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,f=["<",">",'"',"`"," ","\r","\n","\t"],d=["{","}","|","\\","^","`"].concat(f),y=["'"].concat(d),m=["%","/","?",";","#"].concat(y),v=["/","?","#"],g=/^[+a-z0-9A-Z_-]{0,63}$/,E=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,C={javascript:!0,"javascript:":!0},_={javascript:!0,"javascript:":!0},S={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},A=n(13);o.prototype.parse=function(e,t,n){if(!u.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var o=e.indexOf("?"),r=-1!==o&&o<e.indexOf("#")?"?":"#",i=e.split(r),a=/\\/g;i[0]=i[0].replace(a,"/"),e=i.join(r);var s=e;if(s=s.trim(),!n&&1===e.split("#").length){var l=h.exec(s);if(l)return this.path=s,this.href=s,this.pathname=l[1],l[2]?(this.search=l[2],this.query=t?A.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var f=p.exec(s);if(f){f=f[0];var d=f.toLowerCase();this.protocol=d,s=s.substr(f.length)}if(n||f||s.match(/^\/\/[^@\/]+@[^@\/]+/)){var T="//"===s.substr(0,2);!T||f&&_[f]||(s=s.substr(2),this.slashes=!0)}if(!_[f]&&(T||f&&!S[f])){for(var b=-1,O=0;O<v.length;O++){var I=s.indexOf(v[O]);-1!==I&&(-1===b||I<b)&&(b=I)}var R,N;N=-1===b?s.lastIndexOf("@"):s.lastIndexOf("@",b),-1!==N&&(R=s.slice(0,N),s=s.slice(N+1),this.auth=decodeURIComponent(R)),b=-1;for(var O=0;O<m.length;O++){var I=s.indexOf(m[O]);-1!==I&&(-1===b||I<b)&&(b=I)}-1===b&&(b=s.length),this.host=s.slice(0,b),s=s.slice(b),this.parseHost(),this.hostname=this.hostname||"";var L="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!L)for(var w=this.hostname.split(/\./),O=0,k=w.length;O<k;O++){var D=w[O];if(D&&!D.match(g)){for(var P="",M=0,x=D.length;M<x;M++)D.charCodeAt(M)>127?P+="x":P+=D[M];if(!P.match(g)){var U=w.slice(0,O),B=w.slice(O+1),j=D.match(E);j&&(U.push(j[1]),B.unshift(j[2])),B.length&&(s="/"+B.join(".")+s),this.hostname=U.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),L||(this.hostname=c.toASCII(this.hostname));var H=this.port?":"+this.port:"",F=this.hostname||"";this.host=F+H,this.href+=this.host,L&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==s[0]&&(s="/"+s))}if(!C[d])for(var O=0,k=y.length;O<k;O++){var V=y[O];if(-1!==s.indexOf(V)){var G=encodeURIComponent(V);G===V&&(G=escape(V)),s=s.split(V).join(G)}}var z=s.indexOf("#");-1!==z&&(this.hash=s.substr(z),s=s.slice(0,z));var q=s.indexOf("?");if(-1!==q?(this.search=s.substr(q),this.query=s.substr(q+1),t&&(this.query=A.parse(this.query)),s=s.slice(0,q)):t&&(this.search="",this.query={}),s&&(this.pathname=s),S[d]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){var H=this.pathname||"",K=this.search||"";this.path=H+K}return this.href=this.format(),this},o.prototype.format=function(){var e=this.auth||"";e&&(e=encodeURIComponent(e),e=e.replace(/%3A/i,":"),e+="@");var t=this.protocol||"",n=this.pathname||"",o=this.hash||"",r=!1,i="";this.host?r=e+this.host:this.hostname&&(r=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(r+=":"+this.port)),this.query&&u.isObject(this.query)&&Object.keys(this.query).length&&(i=A.stringify(this.query));var a=this.search||i&&"?"+i||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||S[t])&&!1!==r?(r="//"+(r||""),n&&"/"!==n.charAt(0)&&(n="/"+n)):r||(r=""),o&&"#"!==o.charAt(0)&&(o="#"+o),a&&"?"!==a.charAt(0)&&(a="?"+a),n=n.replace(/[?#]/g,function(e){return encodeURIComponent(e)}),a=a.replace("#","%23"),t+r+n+a+o},o.prototype.resolve=function(e){return this.resolveObject(r(e,!1,!0)).format()},o.prototype.resolveObject=function(e){if(u.isString(e)){var t=new o;t.parse(e,!1,!0),e=t}for(var n=new o,r=Object.keys(this),i=0;i<r.length;i++){var a=r[i];n[a]=this[a]}if(n.hash=e.hash,""===e.href)return n.href=n.format(),n;if(e.slashes&&!e.protocol){for(var s=Object.keys(e),c=0;c<s.length;c++){var p=s[c];"protocol"!==p&&(n[p]=e[p])}return S[n.protocol]&&n.hostname&&!n.pathname&&(n.path=n.pathname="/"),n.href=n.format(),n}if(e.protocol&&e.protocol!==n.protocol){if(!S[e.protocol]){for(var l=Object.keys(e),h=0;h<l.length;h++){var f=l[h];n[f]=e[f]}return n.href=n.format(),n}if(n.protocol=e.protocol,e.host||_[e.protocol])n.pathname=e.pathname;else{for(var d=(e.pathname||"").split("/");d.length&&!(e.host=d.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==d[0]&&d.unshift(""),d.length<2&&d.unshift(""),n.pathname=d.join("/")}if(n.search=e.search,n.query=e.query,n.host=e.host||"",n.auth=e.auth,n.hostname=e.hostname||e.host,n.port=e.port,n.pathname||n.search){var y=n.pathname||"",m=n.search||"";n.path=y+m}return n.slashes=n.slashes||e.slashes,n.href=n.format(),n}var v=n.pathname&&"/"===n.pathname.charAt(0),g=e.host||e.pathname&&"/"===e.pathname.charAt(0),E=g||v||n.host&&e.pathname,C=E,A=n.pathname&&n.pathname.split("/")||[],d=e.pathname&&e.pathname.split("/")||[],T=n.protocol&&!S[n.protocol];if(T&&(n.hostname="",n.port=null,n.host&&(""===A[0]?A[0]=n.host:A.unshift(n.host)),n.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===d[0]?d[0]=e.host:d.unshift(e.host)),e.host=null),E=E&&(""===d[0]||""===A[0])),g)n.host=e.host||""===e.host?e.host:n.host,n.hostname=e.hostname||""===e.hostname?e.hostname:n.hostname,n.search=e.search,n.query=e.query,A=d;else if(d.length)A||(A=[]),A.pop(),A=A.concat(d),n.search=e.search,n.query=e.query;else if(!u.isNullOrUndefined(e.search)){if(T){n.hostname=n.host=A.shift();var b=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@");b&&(n.auth=b.shift(),n.host=n.hostname=b.shift())}return n.search=e.search,n.query=e.query,u.isNull(n.pathname)&&u.isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.href=n.format(),n}if(!A.length)return n.pathname=null,n.search?n.path="/"+n.search:n.path=null,n.href=n.format(),n;for(var O=A.slice(-1)[0],I=(n.host||e.host||A.length>1)&&("."===O||".."===O)||""===O,R=0,N=A.length;N>=0;N--)O=A[N],"."===O?A.splice(N,1):".."===O?(A.splice(N,1),R++):R&&(A.splice(N,1),R--);if(!E&&!C)for(;R--;R)A.unshift("..");!E||""===A[0]||A[0]&&"/"===A[0].charAt(0)||A.unshift(""),I&&"/"!==A.join("/").substr(-1)&&A.push("");var L=""===A[0]||A[0]&&"/"===A[0].charAt(0);if(T){n.hostname=n.host=L?"":A.length?A.shift():"";var b=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@");b&&(n.auth=b.shift(),n.host=n.hostname=b.shift())}return E=E||n.host&&A.length,E&&!L&&A.unshift(""),A.length?n.pathname=A.join("/"):(n.pathname=null,n.path=null),u.isNull(n.pathname)&&u.isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.auth=e.auth||n.auth,n.slashes=n.slashes||e.slashes,n.href=n.format(),n},o.prototype.parseHost=function(){var e=this.host,t=l.exec(e);t&&(t=t[0],":"!==t&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},function(e,t,n){(function(e,o){var r;!function(i){function a(e){throw new RangeError(k[e])}function s(e,t){for(var n=e.length,o=[];n--;)o[n]=t(e[n]);return o}function c(e,t){var n=e.split("@"),o="";return n.length>1&&(o=n[0]+"@",e=n[1]),e=e.replace(w,"."),o+s(e.split("."),t).join(".")}function u(e){for(var t,n,o=[],r=0,i=e.length;r<i;)t=e.charCodeAt(r++),t>=55296&&t<=56319&&r<i?(n=e.charCodeAt(r++),56320==(64512&n)?o.push(((1023&t)<<10)+(1023&n)+65536):(o.push(t),r--)):o.push(t);return o}function p(e){return s(e,function(e){var t="";return e>65535&&(e-=65536,t+=M(e>>>10&1023|55296),e=56320|1023&e),t+=M(e)}).join("")}function l(e){return e-48<10?e-22:e-65<26?e-65:e-97<26?e-97:_}function h(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function f(e,t,n){var o=0;for(e=n?P(e/b):e>>1,e+=P(e/t);e>D*A>>1;o+=_)e=P(e/D);return P(o+(D+1)*e/(e+T))}function d(e){var t,n,o,r,i,s,c,u,h,d,y=[],m=e.length,v=0,g=I,E=O;for(n=e.lastIndexOf(R),n<0&&(n=0),o=0;o<n;++o)e.charCodeAt(o)>=128&&a("not-basic"),y.push(e.charCodeAt(o));for(r=n>0?n+1:0;r<m;){for(i=v,s=1,c=_;r>=m&&a("invalid-input"),u=l(e.charCodeAt(r++)),(u>=_||u>P((C-v)/s))&&a("overflow"),v+=u*s,h=c<=E?S:c>=E+A?A:c-E,!(u<h);c+=_)d=_-h,s>P(C/d)&&a("overflow"),s*=d;t=y.length+1,E=f(v-i,t,0==i),P(v/t)>C-g&&a("overflow"),g+=P(v/t),v%=t,y.splice(v++,0,g)}return p(y)}function y(e){var t,n,o,r,i,s,c,p,l,d,y,m,v,g,E,T=[];for(e=u(e),m=e.length,t=I,n=0,i=O,s=0;s<m;++s)(y=e[s])<128&&T.push(M(y));for(o=r=T.length,r&&T.push(R);o<m;){for(c=C,s=0;s<m;++s)(y=e[s])>=t&&y<c&&(c=y);for(v=o+1,c-t>P((C-n)/v)&&a("overflow"),n+=(c-t)*v,t=c,s=0;s<m;++s)if(y=e[s],y<t&&++n>C&&a("overflow"),y==t){for(p=n,l=_;d=l<=i?S:l>=i+A?A:l-i,!(p<d);l+=_)E=p-d,g=_-d,T.push(M(h(d+E%g,0))),p=P(E/g);T.push(M(h(p,0))),i=f(n,v,o==r),n=0,++o}++n,++t}return T.join("")}function m(e){return c(e,function(e){return N.test(e)?d(e.slice(4).toLowerCase()):e})}function v(e){return c(e,function(e){return L.test(e)?"xn--"+y(e):e})}var g=("object"==typeof t&&t&&t.nodeType,"object"==typeof e&&e&&e.nodeType,"object"==typeof o&&o);var E,C=2147483647,_=36,S=1,A=26,T=38,b=700,O=72,I=128,R="-",N=/^xn--/,L=/[^\x20-\x7E]/,w=/[\x2E\u3002\uFF0E\uFF61]/g,k={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},D=_-S,P=Math.floor,M=String.fromCharCode;E={version:"1.4.1",ucs2:{decode:u,encode:p},decode:d,encode:y,toASCII:v,toUnicode:m},void 0!==(r=function(){return E}.call(t,n,t,e))&&(e.exports=r)}()}).call(t,n(14)(e),n(0))},function(e,t,n){"use strict";e.exports={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}}},function(e,t,n){n(38),e.exports=self.fetch.bind(self)},function(e,t){!function(e){"use strict";function t(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function n(e){return"string"!=typeof e&&(e=String(e)),e}function o(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return v.iterable&&(t[Symbol.iterator]=function(){return t}),t}function r(e){this.map={},e instanceof r?e.forEach(function(e,t){this.append(t,e)},this):Array.isArray(e)?e.forEach(function(e){this.append(e[0],e[1])},this):e&&Object.getOwnPropertyNames(e).forEach(function(t){this.append(t,e[t])},this)}function i(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function a(e){return new Promise(function(t,n){e.onload=function(){t(e.result)},e.onerror=function(){n(e.error)}})}function s(e){var t=new FileReader,n=a(t);return t.readAsArrayBuffer(e),n}function c(e){var t=new FileReader,n=a(t);return t.readAsText(e),n}function u(e){for(var t=new Uint8Array(e),n=new Array(t.length),o=0;o<t.length;o++)n[o]=String.fromCharCode(t[o]);return n.join("")}function p(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function l(){return this.bodyUsed=!1,this._initBody=function(e){if(this._bodyInit=e,e)if("string"==typeof e)this._bodyText=e;else if(v.blob&&Blob.prototype.isPrototypeOf(e))this._bodyBlob=e;else if(v.formData&&FormData.prototype.isPrototypeOf(e))this._bodyFormData=e;else if(v.searchParams&&URLSearchParams.prototype.isPrototypeOf(e))this._bodyText=e.toString();else if(v.arrayBuffer&&v.blob&&E(e))this._bodyArrayBuffer=p(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!v.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(e)&&!C(e))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=p(e)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):v.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},v.blob&&(this.blob=function(){var e=i(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?i(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(s)}),this.text=function(){var e=i(this);if(e)return e;if(this._bodyBlob)return c(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(u(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},v.formData&&(this.formData=function(){return this.text().then(d)}),this.json=function(){return this.text().then(JSON.parse)},this}function h(e){var t=e.toUpperCase();return _.indexOf(t)>-1?t:e}function f(e,t){t=t||{};var n=t.body;if(e instanceof f){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new r(e.headers)),this.method=e.method,this.mode=e.mode,n||null==e._bodyInit||(n=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"omit",!t.headers&&this.headers||(this.headers=new r(t.headers)),this.method=h(t.method||this.method||"GET"),this.mode=t.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&n)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(n)}function d(e){var t=new FormData;return e.trim().split("&").forEach(function(e){if(e){var n=e.split("="),o=n.shift().replace(/\+/g," "),r=n.join("=").replace(/\+/g," ");t.append(decodeURIComponent(o),decodeURIComponent(r))}}),t}function y(e){var t=new r;return e.split(/\r?\n/).forEach(function(e){var n=e.split(":"),o=n.shift().trim();if(o){var r=n.join(":").trim();t.append(o,r)}}),t}function m(e,t){t||(t={}),this.type="default",this.status="status"in t?t.status:200,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new r(t.headers),this.url=t.url||"",this._initBody(e)}if(!e.fetch){var v={searchParams:"URLSearchParams"in e,iterable:"Symbol"in e&&"iterator"in Symbol,blob:"FileReader"in e&&"Blob"in e&&function(){try{return new Blob,!0}catch(e){return!1}}(),formData:"FormData"in e,arrayBuffer:"ArrayBuffer"in e};if(v.arrayBuffer)var g=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],E=function(e){return e&&DataView.prototype.isPrototypeOf(e)},C=ArrayBuffer.isView||function(e){return e&&g.indexOf(Object.prototype.toString.call(e))>-1};r.prototype.append=function(e,o){e=t(e),o=n(o);var r=this.map[e];this.map[e]=r?r+","+o:o},r.prototype.delete=function(e){delete this.map[t(e)]},r.prototype.get=function(e){return e=t(e),this.has(e)?this.map[e]:null},r.prototype.has=function(e){return this.map.hasOwnProperty(t(e))},r.prototype.set=function(e,o){this.map[t(e)]=n(o)},r.prototype.forEach=function(e,t){for(var n in this.map)this.map.hasOwnProperty(n)&&e.call(t,this.map[n],n,this)},r.prototype.keys=function(){var e=[];return this.forEach(function(t,n){e.push(n)}),o(e)},r.prototype.values=function(){var e=[];return this.forEach(function(t){e.push(t)}),o(e)},r.prototype.entries=function(){var e=[];return this.forEach(function(t,n){e.push([n,t])}),o(e)},v.iterable&&(r.prototype[Symbol.iterator]=r.prototype.entries);var _=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];f.prototype.clone=function(){return new f(this,{body:this._bodyInit})},l.call(f.prototype),l.call(m.prototype),m.prototype.clone=function(){return new m(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new r(this.headers),url:this.url})},m.error=function(){var e=new m(null,{status:0,statusText:""});return e.type="error",e};var S=[301,302,303,307,308];m.redirect=function(e,t){if(-1===S.indexOf(t))throw new RangeError("Invalid status code");return new m(null,{status:t,headers:{location:e}})},e.Headers=r,e.Request=f,e.Response=m,e.fetch=function(e,t){return new Promise(function(n,o){var r=new f(e,t),i=new XMLHttpRequest;i.onload=function(){var e={status:i.status,statusText:i.statusText,headers:y(i.getAllResponseHeaders()||"")};e.url="responseURL"in i?i.responseURL:e.headers.get("X-Request-URL");var t="response"in i?i.response:i.responseText;n(new m(t,e))},i.onerror=function(){o(new TypeError("Network request failed"))},i.ontimeout=function(){o(new TypeError("Network request failed"))},i.open(r.method,r.url,!0),"include"===r.credentials&&(i.withCredentials=!0),"responseType"in i&&v.blob&&(i.responseType="blob"),r.headers.forEach(function(e,t){i.setRequestHeader(t,e)}),i.send(void 0===r._bodyInit?null:r._bodyInit)})},e.fetch.polyfill=!0}}("undefined"!=typeof self?self:this)},function(e,t,n){function o(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,o=r(e),i=o.source,u=o.id,p=o.path,l=c[u]&&p in c[u].nsps,h=t.forceNew||t["force new connection"]||!1===t.multiplex||l;return h?(s("ignoring socket cache for %s",i),n=a(i,t)):(c[u]||(s("new io instance for %s",i),c[u]=a(i,t)),n=c[u]),o.query&&!t.query&&(t.query=o.query),n.socket(o.path,t)}var r=n(40),i=n(6),a=n(18),s=n(1)("socket.io-client");e.exports=t=o;var c=t.managers={};t.protocol=i.protocol,t.connect=o,t.Manager=n(18),t.Socket=n(23)},function(e,t,n){(function(t){function o(e,n){var o=e;n=n||t.location,null==e&&(e=n.protocol+"//"+n.host),"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?n.protocol+e:n.host+e),/^(https?|wss?):\/\//.test(e)||(i("protocol-less url %s",e),e=void 0!==n?n.protocol+"//"+e:"https://"+e),i("parse %s",e),o=r(e)),o.port||(/^(http|ws)$/.test(o.protocol)?o.port="80":/^(http|ws)s$/.test(o.protocol)&&(o.port="443")),o.path=o.path||"/";var a=-1!==o.host.indexOf(":"),s=a?"["+o.host+"]":o.host;return o.id=o.protocol+"://"+s+":"+o.port,o.href=o.protocol+"://"+s+(n&&n.port===o.port?"":":"+o.port),o}var r=n(15),i=n(1)("socket.io-client:url");e.exports=o}).call(t,n(0))},function(e,t){function n(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function r(e){if(p===setTimeout)return setTimeout(e,0);if((p===n||!p)&&setTimeout)return p=setTimeout,setTimeout(e,0);try{return p(e,0)}catch(t){try{return p.call(null,e,0)}catch(t){return p.call(this,e,0)}}}function i(e){if(l===clearTimeout)return clearTimeout(e);if((l===o||!l)&&clearTimeout)return l=clearTimeout,clearTimeout(e);try{return l(e)}catch(t){try{return l.call(null,e)}catch(t){return l.call(this,e)}}}function a(){y&&f&&(y=!1,f.length?d=f.concat(d):m=-1,d.length&&s())}function s(){if(!y){var e=r(a);y=!0;for(var t=d.length;t;){for(f=d,d=[];++m<t;)f&&f[m].run();m=-1,t=d.length}f=null,y=!1,i(e)}}function c(e,t){this.fun=e,this.array=t}function u(){}var p,l,h=e.exports={};!function(){try{p="function"==typeof setTimeout?setTimeout:n}catch(e){p=n}try{l="function"==typeof clearTimeout?clearTimeout:o}catch(e){l=o}}();var f,d=[],y=!1,m=-1;h.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];d.push(new c(e,t)),1!==d.length||y||r(s)},c.prototype.run=function(){this.fun.apply(null,this.array)},h.title="browser",h.browser=!0,h.env={},h.argv=[],h.version="",h.versions={},h.on=u,h.addListener=u,h.once=u,h.off=u,h.removeListener=u,h.removeAllListeners=u,h.emit=u,h.prependListener=u,h.prependOnceListener=u,h.listeners=function(e){return[]},h.binding=function(e){throw new Error("process.binding is not supported")},h.cwd=function(){return"/"},h.chdir=function(e){throw new Error("process.chdir is not supported")},h.umask=function(){return 0}},function(e,t,n){function o(e){var n,o=0;for(n in e)o=(o<<5)-o+e.charCodeAt(n),o|=0;return t.colors[Math.abs(o)%t.colors.length]}function r(e){function n(){if(n.enabled){var e=n,o=+new Date,r=o-(u||o);e.diff=r,e.prev=u,e.curr=o,u=o;for(var i=new Array(arguments.length),a=0;a<i.length;a++)i[a]=arguments[a];i[0]=t.coerce(i[0]),"string"!=typeof i[0]&&i.unshift("%O");var s=0;i[0]=i[0].replace(/%([a-zA-Z%])/g,function(n,o){if("%%"===n)return n;s++;var r=t.formatters[o];if("function"==typeof r){var a=i[s];n=r.call(e,a),i.splice(s,1),s--}return n}),t.formatArgs.call(e,i);(n.log||t.log||console.log.bind(console)).apply(e,i)}}return n.namespace=e,n.enabled=t.enabled(e),n.useColors=t.useColors(),n.color=o(e),"function"==typeof t.init&&t.init(n),n}function i(e){t.save(e),t.names=[],t.skips=[];for(var n=("string"==typeof e?e:"").split(/[\s,]+/),o=n.length,r=0;r<o;r++)n[r]&&(e=n[r].replace(/\*/g,".*?"),"-"===e[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))}function a(){t.enable("")}function s(e){var n,o;for(n=0,o=t.skips.length;n<o;n++)if(t.skips[n].test(e))return!1;for(n=0,o=t.names.length;n<o;n++)if(t.names[n].test(e))return!0;return!1}function c(e){return e instanceof Error?e.stack||e.message:e}t=e.exports=r.debug=r.default=r,t.coerce=c,t.disable=a,t.enable=i,t.enabled=s,t.humanize=n(43),t.names=[],t.skips=[],t.formatters={};var u},function(e,t){function n(e){if(e=String(e),!(e.length>100)){var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(t){var n=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return n*p;case"days":case"day":case"d":return n*u;case"hours":case"hour":case"hrs":case"hr":case"h":return n*c;case"minutes":case"minute":case"mins":case"min":case"m":return n*s;case"seconds":case"second":case"secs":case"sec":case"s":return n*a;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return n;default:return}}}}function o(e){return e>=u?Math.round(e/u)+"d":e>=c?Math.round(e/c)+"h":e>=s?Math.round(e/s)+"m":e>=a?Math.round(e/a)+"s":e+"ms"}function r(e){return i(e,u,"day")||i(e,c,"hour")||i(e,s,"minute")||i(e,a,"second")||e+" ms"}function i(e,t,n){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+n:Math.ceil(e/t)+" "+n+"s"}var a=1e3,s=60*a,c=60*s,u=24*c,p=365.25*u;e.exports=function(e,t){t=t||{};var i=typeof e;if("string"===i&&e.length>0)return n(e);if("number"===i&&!1===isNaN(e))return t.long?r(e):o(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t,n){(function(e){function o(e,t){if(!e)return e;if(a(e)){var n={_placeholder:!0,num:t.length};return t.push(e),n}if(i(e)){for(var r=new Array(e.length),s=0;s<e.length;s++)r[s]=o(e[s],t);return r}if("object"==typeof e&&!(e instanceof Date)){var r={};for(var c in e)r[c]=o(e[c],t);return r}return e}function r(e,t){if(!e)return e;if(e&&e._placeholder)return t[e.num];if(i(e))for(var n=0;n<e.length;n++)e[n]=r(e[n],t);else if("object"==typeof e)for(var o in e)e[o]=r(e[o],t);return e}var i=n(46),a=n(17),s=Object.prototype.toString,c="function"==typeof e.Blob||"[object BlobConstructor]"===s.call(e.Blob),u="function"==typeof e.File||"[object FileConstructor]"===s.call(e.File);t.deconstructPacket=function(e){var t=[],n=e.data,r=e;return r.data=o(n,t),r.attachments=t.length,{packet:r,buffers:t}},t.reconstructPacket=function(e,t){return e.data=r(e.data,t),e.attachments=void 0,e},t.removeBlobs=function(e,t){function n(e,s,p){if(!e)return e;if(c&&e instanceof Blob||u&&e instanceof File){o++;var l=new FileReader;l.onload=function(){p?p[s]=this.result:r=this.result,--o||t(r)},l.readAsArrayBuffer(e)}else if(i(e))for(var h=0;h<e.length;h++)n(e[h],h,e);else if("object"==typeof e&&!a(e))for(var f in e)n(e[f],f,e)}var o=0,r=e;n(r),o||t(r)}}).call(t,n(0))},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t,n){e.exports=n(48)},function(e,t,n){e.exports=n(49),e.exports.parser=n(3)},function(e,t,n){(function(t){function o(e,n){if(!(this instanceof o))return new o(e,n);n=n||{},e&&"object"==typeof e&&(n=e,e=null),e?(e=p(e),n.hostname=e.host,n.secure="https"===e.protocol||"wss"===e.protocol,n.port=e.port,e.query&&(n.query=e.query)):n.host&&(n.hostname=p(n.host).host),this.secure=null!=n.secure?n.secure:t.location&&"https:"===location.protocol,n.hostname&&!n.port&&(n.port=this.secure?"443":"80"),this.agent=n.agent||!1,this.hostname=n.hostname||(t.location?location.hostname:"localhost"),this.port=n.port||(t.location&&location.port?location.port:this.secure?443:80),this.query=n.query||{},"string"==typeof this.query&&(this.query=h.decode(this.query)),this.upgrade=!1!==n.upgrade,this.path=(n.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!n.forceJSONP,this.jsonp=!1!==n.jsonp,this.forceBase64=!!n.forceBase64,this.enablesXDR=!!n.enablesXDR,this.timestampParam=n.timestampParam||"t",this.timestampRequests=n.timestampRequests,this.transports=n.transports||["polling","websocket"],this.transportOptions=n.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=n.policyPort||843,this.rememberUpgrade=n.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=n.onlyBinaryUpgrades,this.perMessageDeflate=!1!==n.perMessageDeflate&&(n.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=n.pfx||null,this.key=n.key||null,this.passphrase=n.passphrase||null,this.cert=n.cert||null,this.ca=n.ca||null,this.ciphers=n.ciphers||null,this.rejectUnauthorized=void 0===n.rejectUnauthorized||n.rejectUnauthorized,this.forceNode=!!n.forceNode;var r="object"==typeof t&&t;r.global===r&&(n.extraHeaders&&Object.keys(n.extraHeaders).length>0&&(this.extraHeaders=n.extraHeaders),n.localAddress&&(this.localAddress=n.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}function r(e){var t={};for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var i=n(19),a=n(2),s=n(1)("engine.io-client:socket"),c=n(22),u=n(3),p=n(15),l=n(61),h=n(4);e.exports=o,o.priorWebsocketSuccess=!1,a(o.prototype),o.protocol=u.protocol,o.Socket=o,o.Transport=n(8),o.transports=n(19),o.parser=n(3),o.prototype.createTransport=function(e){s('creating transport "%s"',e);var t=r(this.query);t.EIO=u.protocol,t.transport=e;var n=this.transportOptions[e]||{};return this.id&&(t.sid=this.id),new i[e]({query:t,socket:this,agent:n.agent||this.agent,hostname:n.hostname||this.hostname,port:n.port||this.port,secure:n.secure||this.secure,path:n.path||this.path,forceJSONP:n.forceJSONP||this.forceJSONP,jsonp:n.jsonp||this.jsonp,forceBase64:n.forceBase64||this.forceBase64,enablesXDR:n.enablesXDR||this.enablesXDR,timestampRequests:n.timestampRequests||this.timestampRequests,timestampParam:n.timestampParam||this.timestampParam,policyPort:n.policyPort||this.policyPort,pfx:n.pfx||this.pfx,key:n.key||this.key,passphrase:n.passphrase||this.passphrase,cert:n.cert||this.cert,ca:n.ca||this.ca,ciphers:n.ciphers||this.ciphers,rejectUnauthorized:n.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:n.perMessageDeflate||this.perMessageDeflate,extraHeaders:n.extraHeaders||this.extraHeaders,forceNode:n.forceNode||this.forceNode,localAddress:n.localAddress||this.localAddress,requestTimeout:n.requestTimeout||this.requestTimeout,protocols:n.protocols||void 0})},o.prototype.open=function(){var e;if(this.rememberUpgrade&&o.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length){var t=this;return void setTimeout(function(){t.emit("error","No transports available")},0)}e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return this.transports.shift(),void this.open()}e.open(),this.setTransport(e)},o.prototype.setTransport=function(e){s("setting transport %s",e.name);var t=this;this.transport&&(s("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",function(){t.onDrain()}).on("packet",function(e){t.onPacket(e)}).on("error",function(e){t.onError(e)}).on("close",function(){t.onClose("transport close")})},o.prototype.probe=function(e){function t(){if(h.onlyBinaryUpgrades){var t=!this.supportsBinary&&h.transport.supportsBinary;l=l||t}l||(s('probe transport "%s" opened',e),p.send([{type:"ping",data:"probe"}]),p.once("packet",function(t){if(!l)if("pong"===t.type&&"probe"===t.data){if(s('probe transport "%s" pong',e),h.upgrading=!0,h.emit("upgrading",p),!p)return;o.priorWebsocketSuccess="websocket"===p.name,s('pausing current transport "%s"',h.transport.name),h.transport.pause(function(){l||"closed"!==h.readyState&&(s("changing transport and sending upgrade packet"),u(),h.setTransport(p),p.send([{type:"upgrade"}]),h.emit("upgrade",p),p=null,h.upgrading=!1,h.flush())})}else{s('probe transport "%s" failed',e);var n=new Error("probe error");n.transport=p.name,h.emit("upgradeError",n)}}))}function n(){l||(l=!0,u(),p.close(),p=null)}function r(t){var o=new Error("probe error: "+t);o.transport=p.name,n(),s('probe transport "%s" failed because of error: %s',e,t),h.emit("upgradeError",o)}function i(){r("transport closed")}function a(){r("socket closed")}function c(e){p&&e.name!==p.name&&(s('"%s" works - aborting "%s"',e.name,p.name),n())}function u(){p.removeListener("open",t),p.removeListener("error",r),p.removeListener("close",i),h.removeListener("close",a),h.removeListener("upgrading",c)}s('probing transport "%s"',e);var p=this.createTransport(e,{probe:1}),l=!1,h=this;o.priorWebsocketSuccess=!1,p.once("open",t),p.once("error",r),p.once("close",i),this.once("close",a),this.once("upgrading",c),p.open()},o.prototype.onOpen=function(){if(s("socket open"),this.readyState="open",o.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){s("starting upgrade probes");for(var e=0,t=this.upgrades.length;e<t;e++)this.probe(this.upgrades[e])}},o.prototype.onPacket=function(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(s('socket receive: type "%s", data "%s"',e.type,e.data),this.emit("packet",e),this.emit("heartbeat"),e.type){case"open":this.onHandshake(l(e.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emit("data",e.data),this.emit("message",e.data)}else s('packet received with socket readyState "%s"',this.readyState)},o.prototype.onHandshake=function(e){this.emit("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},o.prototype.onHeartbeat=function(e){clearTimeout(this.pingTimeoutTimer);var t=this;t.pingTimeoutTimer=setTimeout(function(){"closed"!==t.readyState&&t.onClose("ping timeout")},e||t.pingInterval+t.pingTimeout)},o.prototype.setPing=function(){var e=this;clearTimeout(e.pingIntervalTimer),e.pingIntervalTimer=setTimeout(function(){s("writing ping packet - expecting pong within %sms",e.pingTimeout),e.ping(),e.onHeartbeat(e.pingTimeout)},e.pingInterval)},o.prototype.ping=function(){var e=this;this.sendPacket("ping",function(){e.emit("ping")})},o.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},o.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(s("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},o.prototype.write=o.prototype.send=function(e,t,n){return this.sendPacket("message",e,t,n),this},o.prototype.sendPacket=function(e,t,n,o){if("function"==typeof t&&(o=t,t=void 0),"function"==typeof n&&(o=n,n=null),"closing"!==this.readyState&&"closed"!==this.readyState){n=n||{},n.compress=!1!==n.compress;var r={type:e,data:t,options:n};this.emit("packetCreate",r),this.writeBuffer.push(r),o&&this.once("flush",o),this.flush()}},o.prototype.close=function(){function e(){o.onClose("forced close"),s("socket closing - telling transport to close"),o.transport.close()}function t(){o.removeListener("upgrade",t),o.removeListener("upgradeError",t),e()}function n(){o.once("upgrade",t),o.once("upgradeError",t)}if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var o=this;this.writeBuffer.length?this.once("drain",function(){this.upgrading?n():e()}):this.upgrading?n():e()}return this},o.prototype.onError=function(e){s("socket error %j",e),o.priorWebsocketSuccess=!1,this.emit("error",e),this.onClose("transport error",e)},o.prototype.onClose=function(e,t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){s('socket close with reason: "%s"',e);var n=this;clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",e,t),n.writeBuffer=[],n.prevBufferLen=0}},o.prototype.filterUpgrades=function(e){for(var t=[],n=0,o=e.length;n<o;n++)~c(this.transports,e[n])&&t.push(e[n]);return t}}).call(t,n(0))},function(e,t){try{e.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){e.exports=!1}},function(e,t,n){(function(t){function o(){}function r(e){if(c.call(this,e),this.requestTimeout=e.requestTimeout,this.extraHeaders=e.extraHeaders,t.location){var n="https:"===location.protocol,o=location.port;o||(o=n?443:80),this.xd=e.hostname!==t.location.hostname||o!==e.port,this.xs=e.secure!==n}}function i(e){this.method=e.method||"GET",this.uri=e.uri,this.xd=!!e.xd,this.xs=!!e.xs,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.agent=e.agent,this.isBinary=e.isBinary,this.supportsBinary=e.supportsBinary,this.enablesXDR=e.enablesXDR,this.requestTimeout=e.requestTimeout,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.extraHeaders=e.extraHeaders,this.create()}function a(){for(var e in i.requests)i.requests.hasOwnProperty(e)&&i.requests[e].abort()}var s=n(7),c=n(20),u=n(2),p=n(5),l=n(1)("engine.io-client:polling-xhr");e.exports=r,e.exports.Request=i,p(r,c),r.prototype.supportsBinary=!0,r.prototype.request=function(e){return e=e||{},e.uri=this.uri(),e.xd=this.xd,e.xs=this.xs,e.agent=this.agent||!1,e.supportsBinary=this.supportsBinary,e.enablesXDR=this.enablesXDR,e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized,e.requestTimeout=this.requestTimeout,e.extraHeaders=this.extraHeaders,new i(e)},r.prototype.doWrite=function(e,t){var n="string"!=typeof e&&void 0!==e,o=this.request({method:"POST",data:e,isBinary:n}),r=this;o.on("success",t),o.on("error",function(e){r.onError("xhr post error",e)}),this.sendXhr=o},r.prototype.doPoll=function(){l("xhr poll");var e=this.request(),t=this;e.on("data",function(e){t.onData(e)}),e.on("error",function(e){t.onError("xhr poll error",e)}),this.pollXhr=e},u(i.prototype),i.prototype.create=function(){var e={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized;var n=this.xhr=new s(e),o=this;try{l("xhr open %s: %s",this.method,this.uri),n.open(this.method,this.uri,this.async);try{if(this.extraHeaders){n.setDisableHeaderCheck&&n.setDisableHeaderCheck(!0);for(var r in this.extraHeaders)this.extraHeaders.hasOwnProperty(r)&&n.setRequestHeader(r,this.extraHeaders[r])}}catch(e){}if("POST"===this.method)try{this.isBinary?n.setRequestHeader("Content-type","application/octet-stream"):n.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{n.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in n&&(n.withCredentials=!0),this.requestTimeout&&(n.timeout=this.requestTimeout),this.hasXDR()?(n.onload=function(){o.onLoad()},n.onerror=function(){o.onError(n.responseText)}):n.onreadystatechange=function(){if(2===n.readyState){var e;try{e=n.getResponseHeader("Content-Type")}catch(e){}"application/octet-stream"===e&&(n.responseType="arraybuffer")}4===n.readyState&&(200===n.status||1223===n.status?o.onLoad():setTimeout(function(){o.onError(n.status)},0))},l("xhr data %s",this.data),n.send(this.data)}catch(e){return void setTimeout(function(){o.onError(e)},0)}t.document&&(this.index=i.requestsCount++,i.requests[this.index]=this)},i.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},i.prototype.onData=function(e){this.emit("data",e),this.onSuccess()},i.prototype.onError=function(e){this.emit("error",e),this.cleanup(!0)},i.prototype.cleanup=function(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=o:this.xhr.onreadystatechange=o,e)try{this.xhr.abort()}catch(e){}t.document&&delete i.requests[this.index],this.xhr=null}},i.prototype.onLoad=function(){var e;try{var t;try{t=this.xhr.getResponseHeader("Content-Type")}catch(e){}e="application/octet-stream"===t?this.xhr.response||this.xhr.responseText:this.xhr.responseText}catch(e){this.onError(e)}null!=e&&this.onData(e)},i.prototype.hasXDR=function(){return void 0!==t.XDomainRequest&&!this.xs&&this.enablesXDR},i.prototype.abort=function(){this.cleanup()},i.requestsCount=0,i.requests={},t.document&&(t.attachEvent?t.attachEvent("onunload",a):t.addEventListener&&t.addEventListener("beforeunload",a,!1))}).call(t,n(0))},function(e,t){e.exports=Object.keys||function(e){var t=[],n=Object.prototype.hasOwnProperty;for(var o in e)n.call(e,o)&&t.push(o);return t}},function(e,t){e.exports=function(e,t,n){var o=e.byteLength;if(t=t||0,n=n||o,e.slice)return e.slice(t,n);if(t<0&&(t+=o),n<0&&(n+=o),n>o&&(n=o),t>=o||t>=n||0===o)return new ArrayBuffer(0);for(var r=new Uint8Array(e),i=new Uint8Array(n-t),a=t,s=0;a<n;a++,s++)i[s]=r[a];return i.buffer}},function(e,t){function n(e,t,n){function r(e,o){if(r.count<=0)throw new Error("after called too many times");--r.count,e?(i=!0,t(e),t=n):0!==r.count||i||t(null,o)}var i=!1;return n=n||o,r.count=e,0===e?t():r}function o(){}e.exports=n},function(e,t,n){(function(e,o){var r;!function(i){function a(e){for(var t,n,o=[],r=0,i=e.length;r<i;)t=e.charCodeAt(r++),t>=55296&&t<=56319&&r<i?(n=e.charCodeAt(r++),56320==(64512&n)?o.push(((1023&t)<<10)+(1023&n)+65536):(o.push(t),r--)):o.push(t);return o}function s(e){for(var t,n=e.length,o=-1,r="";++o<n;)t=e[o],t>65535&&(t-=65536,r+=C(t>>>10&1023|55296),t=56320|1023&t),r+=C(t);return r}function c(e,t){if(e>=55296&&e<=57343){if(t)throw Error("Lone surrogate U+"+e.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function u(e,t){return C(e>>t&63|128)}function p(e,t){if(0==(4294967168&e))return C(e);var n="";return 0==(4294965248&e)?n=C(e>>6&31|192):0==(4294901760&e)?(c(e,t)||(e=65533),n=C(e>>12&15|224),n+=u(e,6)):0==(4292870144&e)&&(n=C(e>>18&7|240),n+=u(e,12),n+=u(e,6)),n+=C(63&e|128)}function l(e,t){t=t||{};for(var n,o=!1!==t.strict,r=a(e),i=r.length,s=-1,c="";++s<i;)n=r[s],c+=p(n,o);return c}function h(){if(E>=g)throw Error("Invalid byte index");var e=255&v[E];if(E++,128==(192&e))return 63&e;throw Error("Invalid continuation byte")}function f(e){var t,n,o,r,i;if(E>g)throw Error("Invalid byte index");if(E==g)return!1;if(t=255&v[E],E++,0==(128&t))return t;if(192==(224&t)){if(n=h(),(i=(31&t)<<6|n)>=128)return i;throw Error("Invalid continuation byte")}if(224==(240&t)){if(n=h(),o=h(),(i=(15&t)<<12|n<<6|o)>=2048)return c(i,e)?i:65533;throw Error("Invalid continuation byte")}if(240==(248&t)&&(n=h(),o=h(),r=h(),(i=(7&t)<<18|n<<12|o<<6|r)>=65536&&i<=1114111))return i;throw Error("Invalid UTF-8 detected")}function d(e,t){t=t||{};var n=!1!==t.strict;v=a(e),g=v.length,E=0;for(var o,r=[];!1!==(o=f(n));)r.push(o);return s(r)}var y="object"==typeof t&&t,m=("object"==typeof e&&e&&e.exports,"object"==typeof o&&o);var v,g,E,C=String.fromCharCode,_={version:"2.1.2",encode:l,decode:d};void 0!==(r=function(){return _}.call(t,n,t,e))&&(e.exports=r)}()}).call(t,n(14)(e),n(0))},function(e,t){!function(){"use strict";for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=new Uint8Array(256),o=0;o<e.length;o++)n[e.charCodeAt(o)]=o;t.encode=function(t){var n,o=new Uint8Array(t),r=o.length,i="";for(n=0;n<r;n+=3)i+=e[o[n]>>2],i+=e[(3&o[n])<<4|o[n+1]>>4],i+=e[(15&o[n+1])<<2|o[n+2]>>6],i+=e[63&o[n+2]];return r%3==2?i=i.substring(0,i.length-1)+"=":r%3==1&&(i=i.substring(0,i.length-2)+"=="),i},t.decode=function(e){var t,o,r,i,a,s=.75*e.length,c=e.length,u=0;"="===e[e.length-1]&&(s--,"="===e[e.length-2]&&s--);var p=new ArrayBuffer(s),l=new Uint8Array(p);for(t=0;t<c;t+=4)o=n[e.charCodeAt(t)],r=n[e.charCodeAt(t+1)],i=n[e.charCodeAt(t+2)],a=n[e.charCodeAt(t+3)],l[u++]=o<<2|r>>4,l[u++]=(15&r)<<4|i>>2,l[u++]=(3&i)<<6|63&a;return p}}()},function(e,t,n){(function(t){function n(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.buffer instanceof ArrayBuffer){var o=n.buffer;if(n.byteLength!==o.byteLength){var r=new Uint8Array(n.byteLength);r.set(new Uint8Array(o,n.byteOffset,n.byteLength)),o=r.buffer}e[t]=o}}}function o(e,t){t=t||{};var o=new i;n(e);for(var r=0;r<e.length;r++)o.append(e[r]);return t.type?o.getBlob(t.type):o.getBlob()}function r(e,t){return n(e),new Blob(e,t||{})}var i=t.BlobBuilder||t.WebKitBlobBuilder||t.MSBlobBuilder||t.MozBlobBuilder,a=function(){try{return 2===new Blob(["hi"]).size}catch(e){return!1}}(),s=a&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(e){return!1}}(),c=i&&i.prototype.append&&i.prototype.getBlob;e.exports=function(){return a?s?t.Blob:r:c?o:void 0}()}).call(t,n(0))},function(e,t,n){(function(t){function o(){}function r(e){i.call(this,e),this.query=this.query||{},s||(t.___eio||(t.___eio=[]),s=t.___eio),this.index=s.length;var n=this;s.push(function(e){n.onData(e)}),this.query.j=this.index,t.document&&t.addEventListener&&t.addEventListener("beforeunload",function(){n.script&&(n.script.onerror=o)},!1)}var i=n(20),a=n(5);e.exports=r;var s,c=/\n/g,u=/\\n/g;a(r,i),r.prototype.supportsBinary=!1,r.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),i.prototype.doClose.call(this)},r.prototype.doPoll=function(){var e=this,t=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),t.async=!0,t.src=this.uri(),t.onerror=function(t){e.onError("jsonp poll error",t)};var n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(t,n):(document.head||document.body).appendChild(t),this.script=t,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout(function(){var e=document.createElement("iframe");document.body.appendChild(e),document.body.removeChild(e)},100)},r.prototype.doWrite=function(e,t){function n(){o(),t()}function o(){if(r.iframe)try{r.form.removeChild(r.iframe)}catch(e){r.onError("jsonp polling iframe removal error",e)}try{var e='<iframe src="javascript:0" name="'+r.iframeId+'">';i=document.createElement(e)}catch(e){i=document.createElement("iframe"),i.name=r.iframeId,i.src="javascript:0"}i.id=r.iframeId,r.form.appendChild(i),r.iframe=i}var r=this;if(!this.form){var i,a=document.createElement("form"),s=document.createElement("textarea"),p=this.iframeId="eio_iframe_"+this.index;a.className="socketio",a.style.position="absolute",a.style.top="-1000px",a.style.left="-1000px",a.target=p,a.method="POST",a.setAttribute("accept-charset","utf-8"),s.name="d",a.appendChild(s),document.body.appendChild(a),this.form=a,this.area=s}this.form.action=this.uri(),o(),e=e.replace(u,"\\\n"),this.area.value=e.replace(c,"\\n");try{this.form.submit()}catch(e){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===r.iframe.readyState&&n()}:this.iframe.onload=n}}).call(t,n(0))},function(e,t,n){(function(t){function o(e){e&&e.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=e.perMessageDeflate,this.usingBrowserWebSocket=l&&!e.forceNode,this.protocols=e.protocols,this.usingBrowserWebSocket||(h=r),i.call(this,e)}var r,i=n(8),a=n(3),s=n(4),c=n(5),u=n(21),p=n(1)("engine.io-client:websocket"),l=t.WebSocket||t.MozWebSocket;if("undefined"==typeof window)try{r=n(60)}catch(e){}var h=l;h||"undefined"!=typeof window||(h=r),e.exports=o,c(o,i),o.prototype.name="websocket",o.prototype.supportsBinary=!0,o.prototype.doOpen=function(){if(this.check()){var e=this.uri(),t=this.protocols,n={agent:this.agent,perMessageDeflate:this.perMessageDeflate};n.pfx=this.pfx,n.key=this.key,n.passphrase=this.passphrase,n.cert=this.cert,n.ca=this.ca,n.ciphers=this.ciphers,n.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(n.headers=this.extraHeaders),this.localAddress&&(n.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket?t?new h(e,t):new h(e):new h(e,t,n)}catch(e){return this.emit("error",e)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},o.prototype.addEventListeners=function(){var e=this;this.ws.onopen=function(){e.onOpen()},this.ws.onclose=function(){e.onClose()},this.ws.onmessage=function(t){e.onData(t.data)},this.ws.onerror=function(t){e.onError("websocket error",t)}},o.prototype.write=function(e){function n(){o.emit("flush"),setTimeout(function(){o.writable=!0,o.emit("drain")},0)}var o=this;this.writable=!1;for(var r=e.length,i=0,s=r;i<s;i++)!function(e){a.encodePacket(e,o.supportsBinary,function(i){if(!o.usingBrowserWebSocket){var a={};if(e.options&&(a.compress=e.options.compress),o.perMessageDeflate){("string"==typeof i?t.Buffer.byteLength(i):i.length)<o.perMessageDeflate.threshold&&(a.compress=!1)}}try{o.usingBrowserWebSocket?o.ws.send(i):o.ws.send(i,a)}catch(e){p("websocket closed before onclose event")}--r||n()})}(e[i])},o.prototype.onClose=function(){i.prototype.onClose.call(this)},o.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},o.prototype.uri=function(){var e=this.query||{},t=this.secure?"wss":"ws",n="";return this.port&&("wss"===t&&443!==Number(this.port)||"ws"===t&&80!==Number(this.port))&&(n=":"+this.port),this.timestampRequests&&(e[this.timestampParam]=u()),this.supportsBinary||(e.b64=1),e=s.encode(e),e.length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+e},o.prototype.check=function(){return!(!h||"__initialize"in h&&this.name===o.prototype.name)}}).call(t,n(0))},function(e,t){},function(e,t,n){(function(t){var n=/^[\],:{}\s]*$/,o=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,r=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,i=/(?:^|:|,)(?:\s*\[)+/g,a=/^\s+/,s=/\s+$/;e.exports=function(e){return"string"==typeof e&&e?(e=e.replace(a,"").replace(s,""),t.JSON&&JSON.parse?JSON.parse(e):n.test(e.replace(o,"@").replace(r,"]").replace(i,""))?new Function("return "+e)():void 0):null}}).call(t,n(0))},function(e,t){function n(e,t){var n=[];t=t||0;for(var o=t||0;o<e.length;o++)n[o-t]=e[o];return n}e.exports=n},function(e,t){function n(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}e.exports=n,n.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),n=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-n:e+n}return 0|Math.min(e,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(e){this.ms=e},n.prototype.setMax=function(e){this.max=e},n.prototype.setJitter=function(e){this.jitter=e}},function(e,t,n){n(65),e.exports=n(26).Object.assign},function(e,t,n){var o=n(66);o(o.S+o.F,"Object",{assign:n(76)})},function(e,t,n){var o=n(9),r=n(26),i=n(67),a=n(69),s=function(e,t,n){var c,u,p,l=e&s.F,h=e&s.G,f=e&s.S,d=e&s.P,y=e&s.B,m=e&s.W,v=h?r:r[t]||(r[t]={}),g=v.prototype,E=h?o:f?o[t]:(o[t]||{}).prototype;h&&(n=t);for(c in n)(u=!l&&E&&void 0!==E[c])&&c in v||(p=u?E[c]:n[c],v[c]=h&&"function"!=typeof E[c]?n[c]:y&&u?i(p,o):m&&E[c]==p?function(e){var t=function(t,n,o){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,n)}return new e(t,n,o)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(p):d&&"function"==typeof p?i(Function.call,p):p,d&&((v.virtual||(v.virtual={}))[c]=p,e&s.R&&g&&!g[c]&&a(g,c,p)))};s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,s.U=64,s.R=128,e.exports=s},function(e,t,n){var o=n(68);e.exports=function(e,t,n){if(o(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,o){return e.call(t,n,o)};case 3:return function(n,o,r){return e.call(t,n,o,r)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){var o=n(70),r=n(75);e.exports=n(11)?function(e,t,n){return o.f(e,t,r(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var o=n(71),r=n(72),i=n(74),a=Object.defineProperty;t.f=n(11)?Object.defineProperty:function(e,t,n){if(o(e),t=i(t,!0),o(n),r)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var o=n(10);e.exports=function(e){if(!o(e))throw TypeError(e+" is not an object!");return e}},function(e,t,n){e.exports=!n(11)&&!n(12)(function(){return 7!=Object.defineProperty(n(73)("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){var o=n(10),r=n(9).document,i=o(r)&&o(r.createElement);e.exports=function(e){return i?r.createElement(e):{}}},function(e,t,n){var o=n(10);e.exports=function(e,t){if(!o(e))return e;var n,r;if(t&&"function"==typeof(n=e.toString)&&!o(r=n.call(e)))return r;if("function"==typeof(n=e.valueOf)&&!o(r=n.call(e)))return r;if(!t&&"function"==typeof(n=e.toString)&&!o(r=n.call(e)))return r;throw TypeError("Can't convert object to primitive value")}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){"use strict";var o=n(77),r=n(88),i=n(89),a=n(90),s=n(28),c=Object.assign;e.exports=!c||n(12)(function(){var e={},t={},n=Symbol(),o="abcdefghijklmnopqrst";return e[n]=7,o.split("").forEach(function(e){t[e]=e}),7!=c({},e)[n]||Object.keys(c({},t)).join("")!=o})?function(e,t){for(var n=a(e),c=arguments.length,u=1,p=r.f,l=i.f;c>u;)for(var h,f=s(arguments[u++]),d=p?o(f).concat(p(f)):o(f),y=d.length,m=0;y>m;)l.call(f,h=d[m++])&&(n[h]=f[h]);return n}:c},function(e,t,n){var o=n(78),r=n(87);e.exports=Object.keys||function(e){return o(e,r)}},function(e,t,n){var o=n(79),r=n(27),i=n(81)(!1),a=n(84)("IE_PROTO");e.exports=function(e,t){var n,s=r(e),c=0,u=[];for(n in s)n!=a&&o(s,n)&&u.push(n);for(;t.length>c;)o(s,n=t[c++])&&(~i(u,n)||u.push(n));return u}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var o=n(27),r=n(82),i=n(83);e.exports=function(e){return function(t,n,a){var s,c=o(t),u=r(c.length),p=i(a,u);if(e&&n!=n){for(;u>p;)if((s=c[p++])!=s)return!0}else for(;u>p;p++)if((e||p in c)&&c[p]===n)return e||p||0;return!e&&-1}}},function(e,t,n){var o=n(30),r=Math.min;e.exports=function(e){return e>0?r(o(e),9007199254740991):0}},function(e,t,n){var o=n(30),r=Math.max,i=Math.min;e.exports=function(e,t){return e=o(e),e<0?r(e+t,0):i(e,t)}},function(e,t,n){var o=n(85)("keys"),r=n(86);e.exports=function(e){return o[e]||(o[e]=r(e))}},function(e,t,n){var o=n(9),r=o["__core-js_shared__"]||(o["__core-js_shared__"]={});e.exports=function(e){return r[e]||(r[e]={})}},function(e,t){var n=0,o=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+o).toString(36))}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,n){var o=n(29);e.exports=function(e){return Object(o(e))}}])})},273:function(e,t,n){"use strict";function o(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),o(n(590)),o(n(614)),o(n(615)),o(n(627)),o(n(628)),o(n(629)),o(n(630)),o(n(631)),o(n(632))},310:function(e,t,n){n(311),n(313),e.exports=n(324)},324:function(e,t,n){"use strict";var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r="function"==typeof Symbol&&"symbol"===o(Symbol.iterator)?function(e){return void 0===e?"undefined":o(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":o(e)},i=this;Object.defineProperty(t,"__esModule",{value:!0});var a=n(2),s=n(128),c=n(50),u=n(232),p=n(439),l=n(98),h=n(272),f=n(22);u.createBrowserHistory();t.init=function(e){if("object"!==(void 0===e?"undefined":r(e)))throw console.error("You should provide initialization parameters as an object."),new Error("You should provide initialization parameters as an object.");if("string"!=typeof e.apiKey)throw console.error("You should provide a Dive API KEY in the initialization parameter 'apiKey"),new Error("You should provide a Dive API KEY in the initialization parameter 'apiKey");if("string"!=typeof e.deviceId)throw console.error("You should provide a unique client id in order to authenticate him,\n      provide it through the initialization parameter 'clientId'"),new Error("You should provide a unique client id in order to authenticate him,\n      provide it through the initialization parameter 'clientId'");try{if(KeyEvent){var t=f.KeyMap;t.UP=KeyEvent.VK_UP,t.DOWN=KeyEvent.VK_DOWN,t.LEFT=KeyEvent.VK_LEFT,t.RIGHT=KeyEvent.VK_RIGHT,t.ENTER=KeyEvent.VK_ENTER}}catch(e){console.error("NO KEYMAP FOUND")}var n=new h.DiveAPIClass({env:"PRO",storeToken:"cookies",apiKey:e.apiKey,deviceId:e.deviceId});n.setLocale("es-ES"),window.DiveAPI=n,n.postTokenAndSave({deviceId:i.deviceId,grantType:"device_credentials"}).then(function(t){if(console.log("Authorized!"),window.DiveAPI=n,console.log("DiveAPI generated, available through DiveSDK.API or window.DiveAPI (global)"),"string"!=typeof e.selector)throw console.error("You should provide a selector that resolves to an existing DOM Element\n        in the initialization parameter 'selector'"),new Error("You should provide a selector that resolves to an existing DOM Element\n        in the initialization parameter 'selector'")}).then(function(){s.render(a.createElement("div",{className:"diveContainer"},a.createElement(c.Provider,{store:p.store},a.createElement(l.App,null))),document.querySelector(e.selector))}).catch(function(e){console.error("ERROR LOADING",e)})}},439:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(79),r=n(440),i=n(441),a=n(518),s="undefined"==typeof window?null:window,c=s.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__||o.compose;t.store=o.createStore(o.combineReducers({nav:a.NavReducer,carousel:a.SyncReducer,ui:a.UIReducer}),c(function(){return o.applyMiddleware(r.default,i.default())}()))},441:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(58),r=n(488),i=n(263),a=function(){var e,t=function(t,n,r){return function(t){n.dispatch(o.SocketActions.socketConnected()),void 0!==e&&(e.on("channelStatus",u(e,n)),e.emit("tuneChannel",r))}},n=function(t,n){return function(t){void 0!==e&&e.close(),n.dispatch(o.SocketActions.socketDisconnected())}},a=function(t,n){return function(t){void 0!==e&&e.close(),n.dispatch(o.SocketActions.socketDisconnected())}},s=function(t,n){return function(t){void 0!==e&&e.close(),n.dispatch(o.SocketActions.socketDisconnected())}},c=function(t,n){return function(t){void 0!==e&&e.close(),n.dispatch(o.SocketActions.socketDisconnected())}},u=function(e,t){return function(e){var n=(t.dispatch,e);switch(n.status){case"authenticated":t.dispatch(o.SocketActions.authReceived());break;case"unauthorized":t.dispatch(o.SocketActions.unauthReceived({message:n.message,code:n.code,type:n.type}));break;case"error":t.dispatch(o.SocketActions.errorReceived({status:n.status,description:n.description}));break;case"movie_start":t.dispatch(o.SocketActions.movieStartReceived({movie_id:n.movie_id}));break;case"movie_end":t.dispatch(o.SocketActions.movieEndRecieved());break;case"scene_start":t.dispatch(o.SocketActions.sceneStartReceived({cards:n.cards}));break;case"scene_update":t.dispatch(o.SocketActions.sceneUpdateReceived({cards:n.cards}));break;case"scene_end":t.dispatch(o.SocketActions.sceneEndReceived())}}},p=function(e){switch(e){case"DEV":return"https://dev-stream.dive.tv";case"PRE":return"https://pre-stream.dive.tv";case"PRO":default:return"https://stream.dive.tv"}};return function(u){return function(l){return function(h){switch(h.type){case"CONNECT":void 0!==e&&e.close(),u.dispatch(o.SocketActions.socketConnecting());var f=DiveAPI.getSavedToken();if(void 0===f)throw console.error("No token present while trying to connect the socket"),new Error("No token present while trying to connect the socket");var d=void 0!==h.payload.url?h.payload.url:p(i.DIVE_ENVIRONMENT);e=r.connect(d,{forceNew:!0,query:"token="+f.access_token,rejectUnauthorized:!1,secure:!0,transports:["websocket","xhr-polling","polling","htmlfile"]});var y=h.payload.channelId;e.on("connect",t(0,u,y)),e.on("connect_error",s(0,u)),e.on("error",s(0,u)),e.on("connect_timeout",c(0,u)),e.on("disconnect",n(0,u)),e.on("end",a(0,u));break;case"DISCONNECT":void 0!==e&&e.close(),e=void 0,u.dispatch(o.SocketActions.socketDisconnected());break;default:return l(h)}}}}};t.default=a},442:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(95);t.uiCreateAction=function(e,t){return o.createAction(e,t)},t.UIActions={goBack:t.uiCreateAction("UI/UI_BACK",function(){return 0}),setDivider:t.uiCreateAction("UI/SET_DIVIDER",function(e){return e}),openCard:function(e,n){return function(n){e&&e.length>0&&n(t.UIActions.performOpenCard()),DiveAPI.getCard({cardId:e}).then(function(e){n(t.UIActions.performOpenCard(e))}).catch(function(e){console.error("Error getting card",e)})}},performOpenCard:t.uiCreateAction("UI/OPEN_CARD",function(e){return e}),openSync:t.uiCreateAction("UI/OPEN_SYNC"),open:function(e){return function(n){n(t.UIActions.performOpen(e))}},performOpen:t.uiCreateAction("UI/OPEN",function(e){return e}),addTestCards:t.uiCreateAction("UI/ADD_TEST_CARDS",function(e){return e})}},484:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(95);t.navCreateAction=function(e,t){return o.createAction(e,t)},t.NavActions={addNode:t.navCreateAction("NAV/ADD_NODE",function(e){return e}),setLastKey:t.navCreateAction("NAV/KEY",function(e){return e}),setSelected:t.navCreateAction("NAV/SELECTED",function(e){return e}),setLeaf:t.navCreateAction("NAV/SELECT_LEAF",function(e){return e}),setActivated:t.navCreateAction("NAV/ACTIVATED",function(e){return e}),moveHorizontal:t.navCreateAction("NAV/MOVE_HORIZONTAL",function(e){return e}),moveVertical:t.navCreateAction("NAV/MOVE_VERTICAL",function(e){return e}),deleteNode:t.navCreateAction("NAV/DELETE_NODE",function(e){return e}),setNodeByName:t.navCreateAction("NAV/SELECT_BY_NAME",function(e){return e}),setNodeById:t.navCreateAction("NAV/SELECT_BY_ID",function(e){return e})}},485:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(95);t.syncCreateAction=function(e,t){return o.createAction(e,t)},t.SyncActions={openCard:t.syncCreateAction("SYNC/OPEN_CARD",function(e){return e}),setMovie:t.syncCreateAction("SYNC/SET_MOVIE",function(e){return e}),setChunkStatus:t.syncCreateAction("SYNC/SET_CHUNK_STATUS",function(e){return e}),setSyncType:t.syncCreateAction("SYNC/SET_SYNC_TYPE",function(e){return e}),setSelectedOnSceneChange:t.syncCreateAction("SYNC/SET_SELECTED_ON_SCENE_CHANGE",function(e){return e}),syncChannel:function(e){return function(e){console.log("[SOCKET]"),e(t.SyncActions.setSyncType("SOCKET")),DiveAPI.syncWithMovieStreaming({protocol:"http",channelId:"dive",callbacks:{onError:function(){console.log("[SOCKET] onError")},onMovieStart:function(n){n&&n.movie_id&&e(t.SyncActions.setMovie(n.movie_id))},onMovieEnd:function(){console.log("[SOCKET] onMovieEnd")},onSceneStart:function(n){e(n&&n.cards?t.SyncActions.startScene(n.cards):t.SyncActions.startScene([]))},onSceneUpdate:function(n){n&&n.cards&&e(t.SyncActions.updateScene(n.cards))},onSceneEnd:function(){e(t.SyncActions.endScene())},onPauseStart:function(){console.log("[SOCKET] onPauseStart")},onPauseEnd:function(){console.log("[SOCKET] onPauseEnd")}}})}},dataSync:function(e){return function(e){e(t.SyncActions.setChunkStatus("LOADING"))}},startScene:t.syncCreateAction("SYNC/START_SCENE",function(e){return e}),updateScene:t.syncCreateAction("SYNC/UPDATE_SCENE",function(e){return e}),endScene:t.syncCreateAction("SYNC/END_SCENE",function(e){return e}),setTime:t.syncCreateAction("SYNC/SET_TIME",function(e){return e})}},486:function(e,t,n){"use strict";function o(e,t){return r.createAction(e,t)}Object.defineProperty(t,"__esModule",{value:!0});var r=n(95);t.SocketActions={authReceived:o("SOCKET/AUTHENTICATED"),unauthReceived:o("SOCKET/UNAUTHORIZED",function(e){return e}),errorReceived:o("SOCKET/ERROR",function(e){return e}),movieStartReceived:o("SOCKET/MOVIE_START",function(e){return e}),movieEndReceived:o("SOCKET/MOVIE_END"),sceneStartReceived:o("SOCKET/SCENE_START",function(e){return e}),sceneUpdateReceived:o("SOCKET/SCENE_UPDATE",function(e){return e}),sceneEndReceived:o("SOCKET/SCENE_END")}},487:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(95);t.userCreateAction=function(e,t){return o.createAction(e,t)}},514:function(e,t){},518:function(e,t,n){"use strict";function o(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),o(n(519)),o(n(520)),o(n(521)),o(n(522))},519:function(e,t,n){"use strict";var o=this&&this.__assign||Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++){t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e};Object.defineProperty(t,"__esModule",{value:!0}),t.NavReducer=function(e,n){switch(void 0===e&&(e=t.initialNavState),n.type){case"NAV/ADD_NODE":var c=n.payload;if(-1!==c.parentId){var u=e.navigation.get(c.parentId);if(void 0===u)e.navigation.set(c.parentId,{parentId:-1,id:c.parentId,children:[[c.id]],columns:1});else{var p=u.children.length-1,l=u.children[p].length;if(void 0!==c.columns&&c.columns===l)u.children=u.children.concat([[c.id]]);else if(void 0!==c.forceOrder){var h=u.children[p].slice();h.splice(c.forceOrder,0,c.id),u.children[p]=h}else u.children[p]=u.children[p].concat([c.id]);e.navigation.set(u.id,u)}}var f=e.navigation.get(c.id);return void 0===f?e.navigation.set(c.id,c):e.navigation.set(c.id,o({},c,f,{parentId:c.parentId})),void 0!==c.name&&e.navNames.set(c.name,c.id),e;case"NAV/DELETE_NODE":var d=e.navigation.get(n.payload);if(void 0!==d&&d.parentId>=0){var y=e.navigation.get(d.parentId);if(void 0!==y){for(var m=0;m<y.children.length;m++){var v=a(y.children[m],n.payload);if(v>=0){var g=y.children[m].slice();g.splice(v,1),g.length>=0?y.children[m]=g:m>0&&y.children.splice(m,1);break}}e.navigation.set(y.id,y)}}return void 0!==d&&e.navigation.delete(d.id),e;case"NAV/KEY":return o({},e,{lastKey:n.payload});case"NAV/SELECTED":return s(e.navigation,e.selected,n.payload)?e:o({},e,{lastSelected:e.selected,selected:n.payload,selectedNav:e.navigation.get(n.payload)});case"NAV/SELECT_LEAF":var E=r(e,n.payload);return o({},e,{lastSelected:e.selected,selected:E,selectedNav:e.navigation.get(E)});case"NAV/ACTIVATED":return o({},e,{lastActivated:e.activated,activated:n.payload});case"NAV/MOVE_HORIZONTAL":var C=e.selected,_=e.selected,S=e.navigation.get(e.selected);if(void 0!==S&&S.parentId>=0){var A=e.navigation.get(S.parentId),T=!0;e:for(;T;)if(T=!1,void 0!==A)t:for(var b=0,O=A.children;b<O.length;b++)for(var I=O[b],R=0;R<I.length;R++){var N=I[R];if(N===_){if(e.navigation.get(_).modal)return e;if(1===n.payload&&R<I.length-1){C=r(e,I[R+1]);break e}if(-1===n.payload&&R>0){C=i(e,I[R-1]);break e}if(A.parentId>=0){_=A.id,A=e.navigation.get(A.parentId),T=!0;break t}}}}return o({},e,{lastSelected:e.selected,selected:C,selectedNav:e.navigation.get(C)});case"NAV/MOVE_VERTICAL":var L=e.selected,w=e.selected,k=e.navigation.get(e.selected);if(void 0!==k&&k.parentId>=0){var D=e.navigation.get(k.parentId),T=!0;e:for(;T;)if(T=!1,void 0!==D)t:for(var R=0;R<D.children.length;R++)if(D.children[R].length>0){var v=a(D.children[R],w);if(v<0)continue;var N=D.children[R][v];if(N===w){if(e.navigation.get(w).modal)return e;if(1===n.payload&&R<D.children.length-1){L=r(e,D.children[R+1][0]);break e}if(-1===n.payload&&R>0){L=i(e,D.children[R-1][0]);break e}if(D.parentId>=0){w=D.id,D=e.navigation.get(D.parentId),T=!0;break t}}}}return o({},e,{lastSelected:e.selected,selected:L,selectedNav:e.navigation.get(L)});case"NAV/SELECT_BY_NAME":var P=n.payload,M=r(e,e.navNames.get(P));return void 0!==M?o({},e,{lastSelected:e.selected,selected:M,selectedNav:e.navigation.get(M)}):e;case"NAV/SELECT_BY_ID":var x=r(e,n.payload);return void 0!==x?o({},e,{lastSelected:e.selected,selected:x,selectedNav:e.navigation.get(x)}):e;default:return e}};var r=function(e,t){for(var n=e.navigation.get(t),o=!0;void 0!==n&&o;)n.children[0].length>0?n=e.navigation.get(n.children[0][0]):o=!1;return void 0!==n?n.id:t},i=function(e,t){for(var n=e.navigation.get(t),o=!0;void 0!==n&&o;)if(!0===n.forceFirst&&n.children[0].length>0)n=e.navigation.get(n.children[0][0]);else if(n.children[n.children.length-1].length>0){var r=n.children[n.children.length-1][n.children[0].length-1];n=e.navigation.get(r)}else o=!1;return void 0!==n?n.id:t},a=function(e,t){for(var n=0;n<e.length;n++)if(e[n]===t)return n;return-1},s=function(e,t,n){var o,r=-1;do{if(void 0===(o=e.get(t)))break;!0===o.modal&&(r=o.id),t=o.parentId}while(r<0&&void 0!==t);if(-1===r)return!1;if(r>=0)do{if(o=e.get(n),o.id===r)return!1;t=o.parentId}while(r<0&&void 0!==t);return!0};t.initialNavState={navigation:new Map,lastKey:"",selected:3,selectedNav:void 0,activated:-1,lastSelected:-1,lastActivated:-1,navNames:new Map}},520:function(e,t,n){"use strict";var o=this&&this.__assign||Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++){t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e};Object.defineProperty(t,"__esModule",{value:!0}),t.UIReducer=function(e,n){switch(void 0===e&&(e=t.initialUIState),console.log("UIReducer: ",n),n.type){case"UI/SET_DIVIDER":return console.log("UI/SET_DIVIDER",n.payload),n.payload===e.divider?e:o({},e,{divider:n.payload});case"UI/OPEN_SYNC":var r=e.containers.slice();return r[1].component="CAROUSEL",o({},e,{divider:60,containers:r});case"UI/OPEN":var i=[{component:n.payload.top},{component:n.payload.bottom}],a=100;return["GRID","CAROUSEL","HOME","CARDS","CARD","PROFILE","HELP"].indexOf(n.payload.bottom)>=0&&(a=60),a!==e.divider||e.containers[0].component!==i[0].component||e.containers[0].component!==i[1].component?o({},e,{divider:a,containers:i}):e;case"UI/OPEN_CARD":var s=[e.containers[0],{component:"CARD"}];return o({},e,{divider:60,containers:s,card:n.payload});case"UI/ADD_TEST_CARDS":return o({},e,{testCards:e.testCards.concat([n.payload])});default:return e}},t.initialUIState={containers:[{component:"EMPTY"},{component:"CAROUSEL"}],card:void 0,testCards:[{card_id:"28e7cb52-01a2-3e95-a71f-4fc2d3e46f86",version:"0jOeUIeLCaOcSI4FSebNj4+E7VZ"},{card_id:"bd4f26ba-0c2a-3a16-bb7b-79aa066abf44"},{card_id:"e0143d7b-1e76-11e6-97ac-0684985cbbe3"},{card_id:"df5b9dd1-1e76-11e6-97ac-0684985cbbe3",version:"0jOeUIeLCaOcSI4FSebNj4+E7VZ"},{card_id:"f266ee0a-1e76-11e6-97ac-0684985cbbe3",version:"0jOeUIeLCaOcSI4FSebNj4+E7VZ"},{card_id:"de57c239-1e76-11e6-97ac-0684985cbbe3",version:"0jOeUIeLCaOcSI4FSebNj4+E7VZ"},{card_id:"f0913395-1e76-11e6-97ac-0684985cbbe3",version:"0jOeUIeLCaOcSI4FSebNj4+E7VZ"}],divider:60}},521:function(e,t,n){"use strict";var o=this&&this.__assign||Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++){t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e};Object.defineProperty(t,"__esModule",{value:!0}),t.SyncReducer=function(e,n){switch(void 0===e&&(e=t.initialSyncState),n.type){case"SYNC/SET_MOVIE":return o({},e,{movieId:n.payload,cards:[]});case"SYNC/UPDATE_TIME":return o({},e,{currentTime:r(e,Date.now()),lastUpdatedTime:Date.now()});case"SYNC/START_SCENE":return e.cards instanceof Array&&n.payload instanceof Array&&e.cards.length!==n.payload.length?o({},e,{cards:n.payload,selectedOnSceneChange:!0}):o({},e,{cards:[],selectedOnSceneChange:!0});case"SYNC/UPDATE_SCENE":return n.payload instanceof Array&&n.payload.length?o({},e,{cards:n.payload.concat(e.cards)}):e;case"SYNC/END_SCENE":return o({},e,{cards:[]});case"SYNC/SET_TRAILER":return o({},e,{demo:n.payload});case"SYNC/SET_SYNC_TYPE":return o({},e,{type:n.payload,socketStatus:"INIT",timeMovieSynced:t.initialSyncState.timeMovieSynced,currentTime:t.initialSyncState.currentTime,lastUpdatedTime:t.initialSyncState.lastUpdatedTime});case"SYNC/SET_SELECTED_ON_SCENE_CHANGE":return o({},e,{selectedOnSceneChange:n.payload});default:return e}};var r=function(e,t){return(e.timeMovie+(t-e.timeMovieSynced)*e.timeRatio)/1e3};t.initialSyncState={selectedOnSceneChange:!0,socketStatus:"INIT",movieId:"m00001",cards:[],demo:"",currentTime:0,timeMovie:0,timeMovieSynced:0,timeRatio:1,lastUpdatedTime:0}},522:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UserReducer=function(e,n){switch(void 0===e&&(e=t.initialUserState),n.type){case"USER/SET_USER":return n.payload;default:return e}},t.initialUserState={}},523:function(e,t,n){"use strict";var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(50),a=n(98),s=n(58),c=n(16),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.render=function(){if(console.log("[LayoutClass] Render ",this.props.ui),this.props&&this.props.ui){console.log("[LayoutClass] Render OK");var e=this.props.ui.containers[0].component,t={height:this.props.ui.divider+"%"},n=this.props.ui.containers[1].component,o={height:100-this.props.ui.divider+"%"};return r.createElement("div",{className:"containerLayout"},r.createElement("div",{className:"layoutTop",style:t},this.getTop(e)),r.createElement("div",{className:"layoutBottom",style:o},this.getBottom(n)))}return null},t.prototype.componentDidMount=function(){window.setTimeout(this.getVideoStatus,500)},t.prototype.componentDidUpdate=function(){window.setTimeout(this.getVideoStatus,500)},t.prototype.getVideoStatus=function(){try{var e=document.getElementById("video1");if(!e.play)throw new Error("not video found");e.onPlayStateChange=function(){1==e.playState?e.onPlayStateChange=null:6==e.playState&&(e.onPlayStateChange=null)},e.data="http://demo.dive.tv:8095/bd4f26ba-0c2a-3a16-bb7b-79aa066abf44-3000",e.play(1)}catch(e){document.getElementsByClassName("layoutTop")[0].style.backgroundColor="pink",document.getElementsByClassName("layoutTop")[0].style.color="black",document.getElementsByClassName("layoutTop")[0].style.fontSize="40px",document.getElementsByClassName("layoutTop")[0].innerHTML+="ERROR: "+e}},t.prototype.getTop=function(e){return r.createElement("div",{id:"videoContainer",dangerouslySetInnerHTML:{__html:'<object xmlns="http://www.w3.org/1999/xhtml" id="video1" type="video/mpeg" style="position: relative; top: 0; width: 100%; height: 100%;"></object>'}})},t.prototype.getBottom=function(e){var t=this;switch(e){case"CAROUSEL":return r.createElement(a.Carousel,{key:"carousel#"+this.lastTimeMenuClicked,parent:this,columns:1,name:"CAROUSEL",groupName:"CAROUSEL",isDefault:!0});case"CARD":return this.props.ui.testCards.map(function(e,n){return r.createElement(a.CardDetailContainer,{cardId:e.card_id,version:e.version,key:"cardDetail_"+n,navClass:"cardDetailNav",parent:t,columns:1,isDefault:!0})});default:return null}},t.prototype.componentWillMount=function(){console.log("[Layout] componentWillMount:",this.props),this.props.setDivider(this.props.ui.divider)},t.prototype.componentWillUpdate=function(e,t){this.lastTimeMenuClicked=Date.now()},t}(r.PureComponent);t.LayoutClass=u;var p=function(e){return{ui:e.ui}};t.Layout=c.navigable(i.connect(p,s.UIActions)(u))},524:function(e,t,n){"use strict";var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++){t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},i=this&&this.__rest||function(e,t){var n={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.indexOf(o)<0&&(n[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var r=0,o=Object.getOwnPropertySymbols(e);r<o.length;r++)t.indexOf(o[r])<0&&(n[o[r]]=e[o[r]]);return n};Object.defineProperty(t,"__esModule",{value:!0});var a=n(2),s=n(128),c=n(99),u=n(50),p=n(58),l=n(22);window.currentNavId=0;var h=function(e){var t=function(t){function n(e){var n=t.call(this,e)||this;return n.navId=0,n.focusTracked=!1,n.getNewId=function(){return++window.currentNavId},n.onMouseEnter=function(){var e=n.getId(),t=n.props.navigation.get(e);void 0!==t&&0===t.children[0].length&&(n.props.setSelected(e),e===n.props.selected&&n.wrapper.focus())},n.onClick=function(e){if(e.stopPropagation(),e.preventDefault(),1===e.buttons||e.keyCode){var t=n.props.navigation.get(n.getId()),o=!1;return void 0!==t&&0===t.children[0].length&&(n.props.setActivated(t.id),o=!0),n.props.clickAction&&(n.props.clickAction(),o=!0),o}},n.onFocus=function(e){var t=n.getId(),o=n.props.navigation.get(t);if(void 0!==n.props.selectedNav&&n.props.selectedNav.id===t&&n.doSelfScroll(!0),void 0===n.props.onFocusCallback||n.focusTracked&&!n.props.onFocusCallbackRepeat||(n.focusTracked=!0,n.props.onFocusCallback()),void 0!==o&&0===o.children[0].length)return!0;e.stopPropagation(),e.preventDefault()},n.getId=function(){return n.navId},n.onKeyPress=function(e){return e.preventDefault(),!1},n.onKeyPressDown=function(e){e.preventDefault(),e.stopPropagation();var t=l.KeyMap;switch(e.keyCode){case t.UP:n.props.moveVertical(-1);break;case t.RIGHT:n.props.moveHorizontal(1);break;case t.LEFT:n.props.moveHorizontal(-1);break;case t.DOWN:n.props.moveVertical(1);break;case t.ENTER:s.findDOMNode(n.refComponent).click(),n.onClick(e)}return!1},n.isScrollable=function(){if(n.isSelected()){var e=n.props.selectedNav;do{if(void 0!==e&&-1!==e.parentId){if(e&&!0===e.isScrollable)return!0;e=n.props.navigation.get(e.parentId)}else e=void 0}while(void 0!==e)}return!0},n.isSelected=function(){return n.props.selected===n.getId()},n.getScrollableElement=function(){var e=n.wrapper;return null!=e&&e.closest instanceof Function?e.closest(".scrollable"):null},n.calculateScroll=function(e,t){if(!0!==n.isScrollable())return-1;if(null!==document&&null!==t){var o=s.findDOMNode(t).parentElement;if(null!==o){var r=100;void 0!==n.props.scrollPadding&&(r=n.props.scrollPadding);var i=t.offsetLeft,a=t.offsetWidth+t.offsetLeft,c=(t.offsetWidth,o.offsetLeft),u=o.offsetWidth+o.offsetLeft,p=o.offsetWidth,l=0;return a+r>u+o.scrollLeft?l=a-p+r:i-r<o.scrollLeft+c?(l=i-r)<0&&(l=0):l=o.scrollLeft,l}}return-1},n.doSelfScroll=function(e,t){var o=void 0===t?function(){return 0}:t,r=n.getScrollableElement(),i=r?s.findDOMNode(r).parentElement:null,a=n.calculateScroll(i,r);if(a>=0&&null!=i){if(!0!==e)return i.scrollLeft=a,o();setTimeout(function(){return i.scrollLeft=a,o()},10)}return o()},n.navId=n.getNewId(),n}return o(n,t),n.prototype.componentDidUpdate=function(){var e=this;this.getId()===this.props.selected&&this.wrapper&&this.doSelfScroll(!0,function(){setTimeout(function(){e.wrapper.focus()},10)})},n.prototype.componentDidMount=function(){var e=this.getId(),t=this.props.parent,n=-1;t&&t.props&&void 0!==t.props.idx&&(n=t.props.idx);var o={parentId:n,children:[[]],id:e,columns:this.props.columns,groupName:this.props.groupName,forceFirst:this.props.forceFirst,forceOrder:this.props.forceOrder,modal:this.props.modal,isScrollable:this.props.isScrollable};if(this.props.addNode(o),e===this.props.selected&&this.wrapper.focus(),!0===this.props.isDefault)this.props.setNodeById(e);else if(void 0!==this.props.selectedNav){var r=this.props.selectedNav,i=this.props.navigation.get(e);r.id===i.parentId&&r.children[0][0]===e&&this.props.setNodeById(e)}this.forceUpdate()},n.prototype.componentWillUnmount=function(){var e=this.getId();if(void 0!==this.props.onBeforeUnmount&&this.props.onBeforeUnmount(this.props.selectedNav),void 0!==this.props.selectedNav){var t=this.props.selectedNav,n=this.props.navigation.get(e);t.id===e&&this.props.setNodeById(n.parentId)}this.props.deleteNode(e)},n.prototype.render=function(){var t=this,n=this.getId(),o=void 0===this.props.selectedNav||this.props.groupName!==this.props.selectedNav.groupName,s=n===this.props.activated,u={navigable:!0,navActive:s};this.props.navClass&&(u[this.props.navClass]=!0),this.props.focusChainClass&&this.props.focusChainClass.length&&this.props.selectedNav&&(u[this.props.focusChainClass]=this.inFocusChain(this.props.selectedNav)),this.props.activeGroupClass&&this.props.activeGroupClass.length&&!o&&(u[this.props.activeGroupClass]=!0);var p=c(u),l=this.props,h=(l.idx,l.columns,l.tabIndex,l.clickAction,l.isDefault,l.onFocusCallback,l.onFocusCallbackRepeat,l.forceFirst,l.forceOrder,l.modal,l.onBeforeUnmount,l.focusChainClass,l.navClass,i(l,["idx","columns","tabIndex","clickAction","isDefault","onFocusCallback","onFocusCallbackRepeat","forceFirst","forceOrder","modal","onBeforeUnmount","focusChainClass","navClass"])),f=(h.navigation,h.lastKey,h.selected,h.selectedNav,h.lastSelected,h.activated,h.lastActivated,h.navNames,i(h,["navigation","lastKey","selected","selectedNav","lastSelected","activated","lastActivated","navNames"])),d=e;return a.createElement("div",{ref:function(e){e&&(t.wrapper=e)},className:p,tabIndex:-1,key:this.props.key?this.props.key+"_Nav":"",onKeyUp:this.onKeyPress,onKeyDown:this.onKeyPressDown,onMouseEnter:this.onMouseEnter,onMouseDown:this.onClick,onFocus:function(e){return t.onFocus(e),!1},id:n.toString()},a.createElement(d,r({ref:function(e){e&&(t.refComponent=e)}},f,{idx:n})))},n.prototype.inFocusChain=function(e){var t=e,n=this.getId();if(t){if(t.id===n||t.parentId===n)return!0;if(-1!==t.parentId)return this.inFocusChain(this.props.navigation.get(t.parentId))}return!1},n}(a.PureComponent),n=function(e){return e.nav};return u.connect(n,p.NavActions,void 0,{withRef:!0})(t)};t.navigable=h,t.default=t.navigable},525:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(){this.getContainer=function(e,t){return e.info?e.info.filter(function(e){return e.type===t})[0]:void 0},this.getRelation=function(e,t,n){return void 0===n&&(n="type"),e?e.filter(function(e){return e[n]===t})[0]:void 0},this.cutText=function(e,t){return e.length>t?(t+3>=e.length&&(t-=2),e.substring(0,t)+"..."):e}}return e}();t.Helper=new o},526:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=n(527),i=n(583),a=n(584),s=n(585),c=function(){function e(){this.language="EN",this.texts={EN:a,ES:i,DE:s}}return e.prototype.setLanguage=function(e){this.language=e},e.prototype.getLanguage=function(){return this.language},e.prototype.getLiteral=function(e){for(var t=this,n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];if("string"==typeof e){for(var i=this.getLiteralWithLanguage(e,this.language)||"",a=i.split("\\n"),s=0,c=1,u=a.length;s<u-1;s++)a.splice(c,0,o.createElement("br",{key:s})),c+=2;var p=[];return a.map(function(r){if("string"==typeof r){for(var i=r.split(/%[\d]+\$s/),a=Math.min(i.length-1,n.length),s=0,c=1;s<a;s++){var u="";n[s]&&(u=t.getLiteral(n[s])||""),i.splice(c,0,o.createElement("span",{className:"substitution substitution-"+(s+1)+" "+e+"-"+n[s],"data-index":""+s},u)),c+=2}p.push(i)}else p.push(r)}),p}return""},e.prototype.getLiteralWithLanguage=function(e,t){try{var n=this.texts[t][e];if(!n)throw console.error("Missing literal in "+t+", "+e),new Error("Missing literal in "+t+", "+e);return n}catch(t){var n=this.texts.EN[e];return n||"Missing literal"}},e.prototype.textToMarkupWithLineBreaks=function(e,t){if(void 0===t&&(t="\\n"),"string"==typeof e)return e.split(t).map(function(e,t){return o.createElement("p",{key:t},e)})},e}();t.Localized=new c,t.Localize=r(t.Localized.getLiteral.bind(t.Localized)),window.Localized=t.Localized,window.Localize=t.Localized.getLiteral.bind(t.Localized)},58:function(e,t,n){"use strict";function o(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),o(n(442)),o(n(484)),o(n(485)),o(n(486)),o(n(487))},583:function(e,t){e.exports={VERSION_OUTDATED_TITLE:"",VERSION_OUTDATED_TEXT:"",VERSION_DEPRECATED_TITLE:"",VERSION_DEPRECATED_TEXT:"",GOT_IT:"",NOW_TITLE:"",NOW_SUBTITLE:"",UPCOMING_TITLE:"",GRID_NO_DATA_TEXT:"",TRY_DEMO:"",MENU_SETTINGS:"",MENU_DEMO:"DEMO",MENU_PROFILE:"PERFIL",MENU_CARDS:"MIS CARDS",MENU_SYNC:"DIVE IN",SEE_INFO:"",TVGRID_BROADCAST_TITLE1:"Ahora en TV",TVGRID_BROADCAST_TITLE2:"Test de traducción",TVGRID_UPCOMING_TITLE:"",TVGRID_BROADCAST_NO_CONTENT:"",TVGRID_BROADCAST_NO_CONTENT_TRY_DEMO:"",TVGRID_UPCOMING_NO_CONTENT:"",TVGRID_UPCOMING_NO_CONTENT_TRY_DEMO:"",GENERIC_ERROR_TITLE:"",GENERIC_ERROR_TEXT:"",EXIT_TITLE:"",EXIT_TEXT:"",EXIT_BUTTON_OK:"",NETWORK_ERROR_TITLE:"",NETWORK_ERROR_TEXT:"",TVGRID_EMPTY_BROADCAST_TITLE1:"",TVGRID_EMPTY_BROADCAST_TITLE2:"",TVGRID_EMPTY_UPCOMING_TXT1:"",TVGRID_EMPTY_UPCOMING_TXT2:"",TVGRID_EMPTY_WATCH_OUR_DEMO:"",SELECTOR_ALL_CATEGORIES:"",SELECTOR_CAST_CHARACTER:"",SELECTOR_FASHION_BEAUTY:"",SELECTOR_MUSIC:"",SELECTOR_PLACES_TRAVEL:"",SELECTOR_CARS_MORE:"",SELECTOR_FUN_FACTS:"",SELECTOR_OTHER_CATEGORIES:"",BIOGRAPHY:"Biografía",COMEDY:"Comedia",CRIME:"Crimen",ACTION:"Acción",THRILLER:"Suspense",ADVENTURE:"Aventuras",SCI_FI:"Ciencia ficción",FANTASY:"Fantasía",DRAMA:"Drama",ROMANCE:"Romántica",TERROR:"Terror",HISTORY:"Histórica",WESTERN:"Western",WAR:"Bélicas",MISTERY:"Misterio",FAMILY:"Familar",SPORT:"Deporte",MUSIC:"Música",MUSICAL:"Musical",ANIMATION:"Animación",DOCUMENTARY:"Documental",FILM_NOIR:"Cine negro",NEWS:"Noticias",KIDS:"Infantil",TALK_SHOW:"Entrevistas",CURRENT_SCENE:"",PIZZA_OR_POP_CORN:"",WE_RECOMMEND:"",MAKE_POP_CORN:"",LIGHTS_CAMERA:"",WE_ARE_LOADING:"",EVERYTHING_END:"",MOVIE_OFF:"",MOVIE_ENDED:"",OKAY:"",CAROUSEL_CARD_SAVE:"",CAROUSEL_CARD_SAVED:"",CAROUSEL_NEW_CARD_ADDED:"",CAROUSEL_NEW_CARDS_ADDED:"",TVGRID_COMMERCIAL_TXT:"",TVGRID_TODAY:"",TVGRID_TOMORROW:"",EXIT_BUTTON_CANCEL:"",ERROR_SCAN_CHANNELS_TITLE:"",ERROR_SCAN_CHANNELS_TEXT:"",ERROR_SCAN_CHANNELS_BTN_SCAN:"",SCAN_FIRST_TIME_TITLE:"",SCAN_FIRST_TIME_TEXT:"",SCAN_FIRST_TIME_BTN:"",SCAN_HELP_RESCAN_TITLE:"",SCAN_HELP_RESCAN_TEXT:"",SCAN_HELP_RESCAN_BTN:"",SCAN_HELP_TITLE_1:"",SCAN_HELP_TITLE_2:"",SCAN_HELP_SUGGESTION:"",SCAN_HELP_PLEASE_CONTACT:"",SCAN_HELP_EMAIL:"",SCAN_HELP_SUBJECT:"",SCAN_HELP_VERSION:"",REGION_SET_TITLE:"",REGION_SET_TEXT:"",REGION_SET_SPAIN:"",REGION_SET_GERMANY:"",REGION_SET_USA:"",TVGRID_CHANGE_CHANNEL_TITLE:"",TVGRID_CHANGE_CHANNEL_TEXT:"",TVGRID_CHANGE_CHANNEL_BTN:"",CAROUSEL_ALIAS_MOVIE:"",CAROUSEL_ALIAS_SERIE:"",CAROUSEL_ALIAS_PERSON:"",CAROUSEL_ALIAS_CHARACTER:"",CAROUSEL_ALIAS_VEHICLE:"",CAROUSEL_ALIAS_FASHION:"",CAROUSEL_ALIAS_LOCATION:"",CAROUSEL_ALIAS_HISTORIC:"",CAROUSEL_ALIAS_TRIVIA:"",CAROUSEL_ALIAS_QUOTE:"",CAROUSEL_ALIAS_OST:"",CAROUSEL_ALIAS_HOME:"",CAROUSEL_ALIAS_TECHNOLOGY:"",CAROUSEL_ALIAS_ART:"",CAROUSEL_ALIAS_SONG:"",CAROUSEL_ALIAS_LOOK:"",CAROUSEL_ALIAS_TRAILER:"",CAROUSEL_ALIAS_WEAPON:"",CAROUSEL_ALIAS_LEISURE_SPORT:"",CAROUSEL_ALIAS_HEALTH_BEAUTY:"",CAROUSEL_ALIAS_FOOD_DRINK:"",CAROUSEL_ALIAS_FAUNA_FLORA:"",CAROUSEL_ALIAS_BUSINESS:"",CAROUSEL_ALIAS_REFERENCE:"",CAROUSEL_ALIAS_VIDEOCLIP:"",CAROUSEL_ALIAS_CHAPTER:"",CAROUSEL_ALIAS_ACTION_EMOTION:"",CAROUSEL_ALIAS_SEE_MORE:"",SOURCE:"",SPECS:"",BASIC_DATA:"",AWARDS:"",WINNER_SINGULAR:"Premio",WINNER_PLURAL:"Premios",NOMINEE_SINGULAR:"Nominación",NOMINEE_PLURAL:"Nominaciones",POCKET_TITLE_1:"",POCKET_TITLE_2:"",POCKET_NO_CARDS_TITLE:"",POCKET_NO_CARDS_TXT:"",GALLERY:"Galería",LOCATION:"Localización",CURIOSITY_TITLE:"",OVERVIEW:""}},584:function(e,t){e.exports={VERSION_OUTDATED_TITLE:"Warning",VERSION_OUTDATED_TEXT:"The version you've installed is outdated.\\nYou need to upgrade now to the latest version in order to continue enjoying Dive.",VERSION_DEPRECATED_TITLE:"Warning",VERSION_DEPRECATED_TEXT:"The version you've installed is outdated.\\nA new version of Dive is available for you.\\nYou can update or continue with an old version of Dive.",GOT_IT:"GOT IT",NOW_TITLE:"NOW ON TV",NOW_SUBTITLE:"What will you discover?",UPCOMING_TITLE:"UPCOMING",GRID_NO_DATA_TEXT:"At the moment, there is nothing available to sync with Dive. Have you tried the demo?",TRY_DEMO:"TRY DEMO",MENU_SETTINGS:"SETTINGS",MENU_DEMO:"DEMO",MENU_PROFILE:"PROFILE",MENU_CARDS:"MY CARDS",MENU_SYNC:"DIVE IN",SEE_INFO:"SEE INFO",TVGRID_BROADCAST_TITLE1:"Now on TV",TVGRID_BROADCAST_TITLE2:"What will you discover?",TVGRID_UPCOMING_TITLE:"Upcoming…",TVGRID_BROADCAST_NO_CONTENT:"At the moment, there is nothing available to sync with Dive. Have you tried the demo?",TVGRID_BROADCAST_NO_CONTENT_TRY_DEMO:"Try demo",TVGRID_UPCOMING_NO_CONTENT:"No content available on our guide. Try again later or try our demo.",TVGRID_UPCOMING_NO_CONTENT_TRY_DEMO:"Try demo",GENERIC_ERROR_TITLE:"¡HOUSTON! WE’VE A PROBLEM…",GENERIC_ERROR_TEXT:"Were having some issues with the app. We’re working on it to fix it, please try again or come back again in a few minutes.",EXIT_TITLE:"PLEASE, DON’T GO.",EXIT_TEXT:"You\\'re about to leave Dive.\\nAre you sure you want to exit?",EXIT_BUTTON_OK:"YES, EXIT",NETWORK_ERROR_TITLE:"INTERNET CONNECTION REQUIRED",NETWORK_ERROR_TEXT:"No connection detected. \\nGo to settings and verify if your Internet is working.",TVGRID_EMPTY_BROADCAST_TITLE1:"This is awkward",TVGRID_EMPTY_BROADCAST_TITLE2:"What can I do?",TVGRID_EMPTY_UPCOMING_TXT1:"There's no content right now.\\nCheck later or enjoy %1$s.",TVGRID_EMPTY_UPCOMING_TXT2:"Dive on your phone",TVGRID_EMPTY_WATCH_OUR_DEMO:"Watch\\nour\\ndemo",SELECTOR_ALL_CATEGORIES:"All categories",SELECTOR_CAST_CHARACTER:"Cast & Character",SELECTOR_FASHION_BEAUTY:"Fashion & Beauty",SELECTOR_MUSIC:"Music",SELECTOR_PLACES_TRAVEL:"Places & Travel",SELECTOR_CARS_MORE:"Cars & More",SELECTOR_FUN_FACTS:"Fun facts",SELECTOR_OTHER_CATEGORIES:"Categories",BIOGRAPHY:"Biography",COMEDY:"Comedy",CRIME:"Crime",ACTION:"Action",THRILLER:"Thriller",ADVENTURE:"Adventure",SCI_FI:"Sci-Fi",FANTASY:"Fantasy",DRAMA:"Drama",ROMANCE:"Romance",TERROR:"Horror",HISTORY:"History",WESTERN:"Western",WAR:"War",MISTERY:"Mystery",FAMILY:"Family",SPORT:"Sport",MUSIC:"Music",MUSICAL:"Musical",ANIMATION:"Animation",DOCUMENTARY:"Documentary",FILM_NOIR:"Film-Noir",NEWS:"News",KIDS:"Kids",TALK_SHOW:"Talk-Show",CURRENT_SCENE:"Current Scene",PIZZA_OR_POP_CORN:"PIZZA OR POP CORN?",WE_RECOMMEND:"The show you’re watching is on advertising, we recommend:",MAKE_POP_CORN:"1. Make more Pop Corn.\n2. And browse the content while we’re on a break",LIGHTS_CAMERA:"LIGHTS, CAMERA AND ACTION",WE_ARE_LOADING:"We're loading the content you're watching on TV.",EVERYTHING_END:"EVERYTHING HAS AN END",MOVIE_OFF:"The broadcast has been interrupted.",MOVIE_ENDED:"The movie has ended",OKAY:"OKAY",CAROUSEL_CARD_SAVE:"Save for later",CAROUSEL_CARD_SAVED:"Saved",CAROUSEL_NEW_CARD_ADDED:"1 new card has been added!",CAROUSEL_NEW_CARDS_ADDED:"%1$d new cards have been added!",TVGRID_COMMERCIAL_TXT:"Enjoy Dive on your phone",TVGRID_TODAY:"Today",TVGRID_TOMORROW:"Tomorrow",EXIT_BUTTON_CANCEL:"NO, I DON'T WANT TO",ERROR_SCAN_CHANNELS_TITLE:"RE-SCAN TV CHANNELS",ERROR_SCAN_CHANNELS_TEXT:"This channel is not set yet, please re-scan to add the new channels.\\nWe need this to set the TV signal.",ERROR_SCAN_CHANNELS_BTN_SCAN:"OK, START SCAN",SCAN_FIRST_TIME_TITLE:"LET’S SET THE TV SIGNAL",SCAN_FIRST_TIME_TEXT:"We need to scan the channels to set the TV signal.\\nYou’ll be able to re-scan the channels in your menu if you want to add more.",SCAN_FIRST_TIME_BTN:"OK, START SCAN",SCAN_HELP_RESCAN_TITLE:"RE-SCAN TV CHANNELS",SCAN_HELP_RESCAN_TEXT:"Re-scan to add new channels.\\nWe need this to set the TV signal.",SCAN_HELP_RESCAN_BTN:"OK, START SCAN",SCAN_HELP_TITLE_1:"SETTINGS",SCAN_HELP_TITLE_2:"Set your Dive experience",SCAN_HELP_SUGGESTION:"Something wrong? Any suggestions?",SCAN_HELP_PLEASE_CONTACT:"For customer support please contact:",SCAN_HELP_EMAIL:"support@dive.tv",SCAN_HELP_SUBJECT:"Write TV in the subject line and we will contact you as soon as possible.",SCAN_HELP_VERSION:"DIVE v%1$s",REGION_SET_TITLE:"FIRST THINGS, FIRST…",REGION_SET_TEXT:"We need to know where you are to show you the TV contents available to sync with.",REGION_SET_SPAIN:"SPAIN",REGION_SET_GERMANY:"GERMANY",REGION_SET_USA:"USA",TVGRID_CHANGE_CHANNEL_TITLE:"CHANNEL CHANGE",TVGRID_CHANGE_CHANNEL_TEXT:"Please confirm that you\\'ve changed the channel so that we can load the content of %1$s.",TVGRID_CHANGE_CHANNEL_BTN:"CONFIRM",CAROUSEL_ALIAS_MOVIE:"Movie",CAROUSEL_ALIAS_SERIE:"Serie",CAROUSEL_ALIAS_PERSON:"Person",CAROUSEL_ALIAS_CHARACTER:"Character",CAROUSEL_ALIAS_VEHICLE:"Vehicle",CAROUSEL_ALIAS_FASHION:"Fashion",CAROUSEL_ALIAS_LOCATION:"Location",CAROUSEL_ALIAS_HISTORIC:"Historic",CAROUSEL_ALIAS_TRIVIA:"Trivia",CAROUSEL_ALIAS_QUOTE:"Quote",CAROUSEL_ALIAS_OST:"OST",CAROUSEL_ALIAS_HOME:"Home",CAROUSEL_ALIAS_TECHNOLOGY:"Technology",CAROUSEL_ALIAS_ART:"Art",CAROUSEL_ALIAS_SONG:"Song",CAROUSEL_ALIAS_LOOK:"Look",CAROUSEL_ALIAS_TRAILER:"Trailer",CAROUSEL_ALIAS_WEAPON:"Weapon",CAROUSEL_ALIAS_LEISURE_SPORT:"Leisure Sport",CAROUSEL_ALIAS_HEALTH_BEAUTY:"Health & Beauty",CAROUSEL_ALIAS_FOOD_DRINK:"Food & Drink",CAROUSEL_ALIAS_FAUNA_FLORA:"Fauna & Flora",CAROUSEL_ALIAS_BUSINESS:"Business",CAROUSEL_ALIAS_REFERENCE:"Reference",CAROUSEL_ALIAS_VIDEOCLIP:"Videoclip",CAROUSEL_ALIAS_CHAPTER:"Chapter",CAROUSEL_ALIAS_ACTION_EMOTION:"Action & Emotion",CAROUSEL_ALIAS_SEE_MORE:"Explore More",SOURCE:"Source",SPECS:"Specs",BASIC_DATA:"Basic Data",AWARDS:"Awards",WINNER_SINGULAR:"",WINNER_PLURAL:"",NOMINEE_SINGULAR:"",NOMINEE_PLURAL:"",POCKET_TITLE_1:"MY CARDS",POCKET_TITLE_2:"The content you\\'ve liked",POCKET_NO_CARDS_TITLE:"NO SAVED CARDS YET",POCKET_NO_CARDS_TXT:"Save every card you like by pressing on the heart icon or activate your account to see the cards saved from your Dive mobile version.",GALLERY:"Gallery",LOCATION:"Location",CURIOSITY_TITLE:"Did you know...?",OVERVIEW:"Synopsis"}},585:function(e,t){e.exports={VERSION_OUTDATED_TITLE:"",VERSION_OUTDATED_TEXT:"",VERSION_DEPRECATED_TITLE:"",VERSION_DEPRECATED_TEXT:"",GOT_IT:"",NOW_TITLE:"",NOW_SUBTITLE:"",UPCOMING_TITLE:"",GRID_NO_DATA_TEXT:"",TRY_DEMO:"",MENU_SETTINGS:"",MENU_DEMO:"",MENU_PROFILE:"",MENU_CARDS:"",MENU_SYNC:"",SEE_INFO:"",TVGRID_BROADCAST_TITLE1:"",TVGRID_BROADCAST_TITLE2:"",TVGRID_UPCOMING_TITLE:"",TVGRID_BROADCAST_NO_CONTENT:"",TVGRID_BROADCAST_NO_CONTENT_TRY_DEMO:"",TVGRID_UPCOMING_NO_CONTENT:"",TVGRID_UPCOMING_NO_CONTENT_TRY_DEMO:"",GENERIC_ERROR_TITLE:"",GENERIC_ERROR_TEXT:"",EXIT_TITLE:"",EXIT_TEXT:"",EXIT_BUTTON_OK:"",NETWORK_ERROR_TITLE:"",NETWORK_ERROR_TEXT:"",TVGRID_EMPTY_BROADCAST_TITLE1:"",TVGRID_EMPTY_BROADCAST_TITLE2:"",TVGRID_EMPTY_UPCOMING_TXT1:"",TVGRID_EMPTY_UPCOMING_TXT2:"",TVGRID_EMPTY_WATCH_OUR_DEMO:"",SELECTOR_ALL_CATEGORIES:"",SELECTOR_CAST_CHARACTER:"",SELECTOR_FASHION_BEAUTY:"",SELECTOR_MUSIC:"",SELECTOR_PLACES_TRAVEL:"",SELECTOR_CARS_MORE:"",SELECTOR_FUN_FACTS:"",SELECTOR_OTHER_CATEGORIES:"",BIOGRAPHY:"Biographie",COMEDY:"Comedy",CRIME:"Krimi",ACTION:"Action",THRILLER:"Thriller",ADVENTURE:"Abenteuer",SCI_FI:"Sci-Fi",FANTASY:"Fantasy",DRAMA:"Drama",ROMANCE:"Romance",TERROR:"Horror",HISTORY:"Geschichte",WESTERN:"Western",WAR:"Krieg",MISTERY:"Mystery",FAMILY:"Familie",SPORT:"Sport",MUSIC:"Musik",MUSICAL:"Musical",ANIMATION:"Animation",DOCUMENTARY:"Dokumentar",FILM_NOIR:"Film noir",NEWS:"News",KIDS:"Kinder",TALK_SHOW:"Talkshow",CURRENT_SCENE:"",PIZZA_OR_POP_CORN:"",WE_RECOMMEND:"",MAKE_POP_CORN:"",LIGHTS_CAMERA:"",WE_ARE_LOADING:"",EVERYTHING_END:"",MOVIE_OFF:"",MOVIE_ENDED:"",OKAY:"",CAROUSEL_CARD_SAVE:"",CAROUSEL_CARD_SAVED:"",CAROUSEL_NEW_CARD_ADDED:"",CAROUSEL_NEW_CARDS_ADDED:"",TVGRID_COMMERCIAL_TXT:"",TVGRID_TODAY:"",TVGRID_TOMORROW:"",EXIT_BUTTON_CANCEL:"",ERROR_SCAN_CHANNELS_TITLE:"",ERROR_SCAN_CHANNELS_TEXT:"",ERROR_SCAN_CHANNELS_BTN_SCAN:"",SCAN_FIRST_TIME_TITLE:"",SCAN_FIRST_TIME_TEXT:"",SCAN_FIRST_TIME_BTN:"",SCAN_HELP_RESCAN_TITLE:"",SCAN_HELP_RESCAN_TEXT:"",SCAN_HELP_RESCAN_BTN:"",SCAN_HELP_TITLE_1:"",SCAN_HELP_TITLE_2:"",SCAN_HELP_SUGGESTION:"",SCAN_HELP_PLEASE_CONTACT:"",SCAN_HELP_EMAIL:"",SCAN_HELP_SUBJECT:"",SCAN_HELP_VERSION:"",REGION_SET_TITLE:"",REGION_SET_TEXT:"",REGION_SET_SPAIN:"",REGION_SET_GERMANY:"",REGION_SET_USA:"",TVGRID_CHANGE_CHANNEL_TITLE:"",TVGRID_CHANGE_CHANNEL_TEXT:"",TVGRID_CHANGE_CHANNEL_BTN:"",CAROUSEL_ALIAS_MOVIE:"",CAROUSEL_ALIAS_SERIE:"",CAROUSEL_ALIAS_PERSON:"",CAROUSEL_ALIAS_CHARACTER:"",CAROUSEL_ALIAS_VEHICLE:"",CAROUSEL_ALIAS_FASHION:"",CAROUSEL_ALIAS_LOCATION:"",CAROUSEL_ALIAS_HISTORIC:"",CAROUSEL_ALIAS_TRIVIA:"",CAROUSEL_ALIAS_QUOTE:"",CAROUSEL_ALIAS_OST:"",CAROUSEL_ALIAS_HOME:"",CAROUSEL_ALIAS_TECHNOLOGY:"",CAROUSEL_ALIAS_ART:"",CAROUSEL_ALIAS_SONG:"",CAROUSEL_ALIAS_LOOK:"",CAROUSEL_ALIAS_TRAILER:"",CAROUSEL_ALIAS_WEAPON:"",CAROUSEL_ALIAS_LEISURE_SPORT:"",CAROUSEL_ALIAS_HEALTH_BEAUTY:"",CAROUSEL_ALIAS_FOOD_DRINK:"",CAROUSEL_ALIAS_FAUNA_FLORA:"",CAROUSEL_ALIAS_BUSINESS:"",CAROUSEL_ALIAS_REFERENCE:"",CAROUSEL_ALIAS_VIDEOCLIP:"",CAROUSEL_ALIAS_CHAPTER:"",CAROUSEL_ALIAS_ACTION_EMOTION:"",CAROUSEL_ALIAS_SEE_MORE:"",SOURCE:"",SPECS:"",BASIC_DATA:"",AWARDS:"",WINNER_SINGULAR:"",WINNER_PLURAL:"",NOMINEE_SINGULAR:"",NOMINEE_PLURAL:"",POCKET_TITLE_1:"",POCKET_TITLE_2:"",POCKET_NO_CARDS_TITLE:"",POCKET_NO_CARDS_TXT:"",GALLERY:"",LOCATION:"",CURIOSITY_TITLE:"",OVERVIEW:""}},586:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o={};t.loadHbbtvKeys=function(){if(KeyEvent){var e=o;e.UP=KeyEvent.VK_UP,e.DOWN=KeyEvent.VK_DOWN,e.LEFT=KeyEvent.VK_LEFT,e.RIGHT=KeyEvent.VK_RIGHT,e.ENTER=KeyEvent.VK_ENTER}},t.KeyMap=o},587:function(e,t,n){"use strict";function o(e){return function(t){return Object.assign(t,e)}}Object.defineProperty(t,"__esModule",{value:!0}),t.statics=o},588:function(e,t,n){"use strict";function o(e){return{}}function r(e){return s({},l.UIActions)}function i(e,t,n){return s({},e,n,t)}var a=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),s=this&&this.__assign||Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++){t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e};Object.defineProperty(t,"__esModule",{value:!0});var c=n(2),u=n(50),p=n(98),l=n(58),h=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.componentWillMount=function(){},t.prototype.render=function(){return c.createElement("div",{className:"app"},c.createElement(p.Layout,{columns:1,parent:this}))},t}(c.Component);t.AppClass=h,t.App=u.connect(o,r,i)(h)},589:function(e,t,n){"use strict";var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(273),a=n(16),s=n(18),c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.render=function(){return r.createElement("div",{className:"cardModulesContainer"},this.props.card?this.decideModules(this.props.card):r.createElement(s.Loading,null))},t.prototype.decideModules=function(e){var t=this,n=[],o=i.cardModuleConfig[e.type];return e.type&&o&&o.sections&&o.sections[0]&&o.sections[0].modules instanceof Array&&o.sections[0].modules.map(function(o,a){if(o.type&&""!==o.type){var s=i.cardModuleClasses[o.type];if(i.isValidatable(s))if(s){console.warn("Instantiating",o.type);var c=s.validate(e,o.type,t,{isScrollable:!0,scrollPadding:300});if(c){console.warn("Instantiating because validated",o.type);var u=s.moduleName?s.moduleName.toLocaleLowerCase()+"-container cardModule-container scrollable":"container";n.push(r.createElement("div",{className:u,key:e.card_id+"_module_"+a},c))}}else console.warn("No existe el módulo o no ha validado",o.type);else console.warn("No existe el módulo",o.type)}}),n},t}(r.PureComponent);t.CardModuleList=c,t.NavigableCardModuleList=a.navigable(c)},590:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(591),r=n(592),i=n(593),a=n(594),s=n(595),c=n(596),u=n(597),p=n(598),l=n(599),h=n(600),f=n(601),d=n(602),y=n(603),m=n(604),v=n(605),g=n(606),E=n(607),C=n(608),_=n(609),S=n(610),A=n(611),T=n(612),b=n(613),O={artConfig:o,businessConfig:r,chapterConfig:i,fashionConfig:a,fauna_floraConfig:s,food_drinkConfig:c,health_beautyConfig:u,historicConfig:p,homeConfig:l,leisure_sportConfig:h,locationConfig:f,lookConfig:d,movieConfig:y,ostConfig:m,personConfig:v,characterConfig:g,referenceConfig:E,serieConfig:C,songConfig:_,technologyConfig:S,triviaConfig:A,vehicleConfig:T,weaponConfig:b};t.cardModuleConfig={art:O.artConfig,business:O.businessConfig,chapter:O.chapterConfig,fashion:O.fashionConfig,fauna_flora:O.fauna_floraConfig,food_drink:O.food_drinkConfig,health_beauty:O.health_beautyConfig,historic:O.historicConfig,home:O.homeConfig,leisure_sport:O.leisure_sportConfig,location:O.locationConfig,look:O.lookConfig,movie:O.movieConfig,ost:O.ostConfig,person:O.personConfig,character:O.characterConfig,reference:O.referenceConfig,serie:O.serieConfig,song:O.songConfig,technology:O.technologyConfig,trivia:O.triviaConfig,vehicle:O.vehicleConfig,weapon:O.weaponConfig}},591:function(e,t){e.exports={sections:[{title:"main",main:!0,modules:[{type:"Header"},{type:"Description"},{type:"Shop"},{type:"TravelShop"},{type:"Specifications"},{type:"MapModule"},{type:"Gallery"},{type:"Curiosities"},{type:"AppearsIn"},{type:"AppearsInSingle"},{type:"BackToHome"}]}]}},592:function(e,t){e.exports={sections:[{title:"main",main:!0,modules:[{type:"Header"},{type:"Description"},{type:"Shop"},{type:"TravelShop"},{type:"Specifications"},{type:"Gallery"},{type:"Curiosities"},{type:"AppearsInSingle"},{type:"AppearsIn"},{type:"BackToHome"}]}]}},593:function(e,t){e.exports={sections:[{title:"main",main:!0,modules:[{type:"MovieHeader"},{type:"MovieHeaderSmall"},{type:"Overview"},{type:"BasicInfo"},{type:"Trailer"},{type:"Cast"},{type:"BelongToSingle"},{type:"Shop"},{type:"TravelShop"},{type:"Curiosities"},{type:"PlacesShown"},{type:"Vehicles"},{type:"MovieSoundtrack"},{type:"Highlights"},{type:"DiveInModule"},{type:"Recommended"},{type:"BackToHome"}]}]}},594:function(e,t){e.exports={sections:[{title:"main",main:!0,modules:[{type:"ButtonHeader"},{type:"Description"},{type:"Shop"},{type:"TravelShop"},{type:"Specifications"},{type:"Gallery"},{type:"Fashion"},{type:"Curiosities"},{type:"AppearsInSingle"},{type:"AppearsIn"},{type:"BackToHome"}]}]}},595:function(e,t){e.exports={sections:[{title:"main",main:!0,modules:[{type:"Header"},{type:"Description"},{type:"Shop"},{type:"TravelShop"},{type:"Specifications"},{type:"Gallery"},{type:"Curiosities"},{type:"AppearsInSingle"},{type:"AppearsIn"},{type:"BackToHome"}]}]}},596:function(e,t){e.exports={sections:[{title:"main",main:!0,modules:[{type:"Header"},{type:"Description"},{type:"Shop"},{type:"TravelShop"},{type:"Specifications"},{type:"Gallery"},{type:"Video"},{type:"Curiosities"},{type:"AppearsInSingle"},{type:"AppearsIn"},{type:"BackToHome"}]}]}},597:function(e,t){e.exports={sections:[{title:"main",main:!0,modules:[{type:"Header"},{type:"Description"},{type:"Shop"},{type:"TravelShop"},{type:"Specifications"},{type:"Gallery"},{type:"Curiosities"},{type:"AppearsInSingle"},{type:"AppearsIn"},{type:"BackToHome"}]}]}},598:function(e,t){e.exports={sections:[{title:"main",main:!0,modules:[{type:"Header"},{type:"Description"},{type:"Shop"},{type:"TravelShop"},{type:"MapModule"},{type:"Gallery"},{type:"Curiosities"},{type:"AppearsInSingle"},{type:"AppearsIn"},{type:"BackToHome"}]}]}},599:function(e,t){e.exports={sections:[{title:"main",main:!0,modules:[{type:"ButtonHeader"},{type:"Description"},{type:"Shop"},{type:"TravelShop"},{type:"Specifications"},{type:"Gallery"},{type:"Home"},{type:"CompleteTheDeco"},{type:"Curiosities"},{type:"AppearsIn"},{type:"AppearsInSingle"},{type:"BackToHome"}]}]}},600:function(e,t){e.exports={sections:[{title:"main",main:!0,modules:[{type:"Header"},{type:"Description"},{type:"Shop"},{type:"TravelShop"},{type:"Specifications"},{type:"Gallery"},{type:"Curiosities"},{type:"AppearsInSingle"},{type:"AppearsIn"},{type:"BackToHome"}]}]}},601:function(e,t){e.exports={sections:[{title:"main",main:!0,modules:[{type:"Header"},{type:"Description"},{type:"Shop"},{type:"TravelShop"},{type:"BasicInfo"},{type:"Gallery"},{type:"MapModule"},{type:"Curiosities"},{type:"AppearsInLocation"},{type:"BackToHome"}]}]}},602:function(e,t){e.exports={sections:[{title:"main",main:!0,modules:[{type:"ButtonHeader"},{type:"Description"},{type:"Specifications"},{type:"Gallery"},{type:"Look"},{type:"Carry"},{type:"MoreLooks"},{type:"Curiosities"},{type:"BackToHome"}]}]}},603:function(e,t){e.exports={sections:[{title:"main",main:!0,modules:[{type:"MovieHeader"},{type:"MovieHeaderSmall"},{type:"Overview"},{type:"BasicInfo"},{type:"Trailer"},{type:"Cast"},{type:"Shop"},{type:"TravelShop"},{type:"Curiosities"},{type:"PlacesShown"},{type:"Vehicles"},{type:"MovieSoundtrack"},{type:"Highlights"},{type:"DiveInModule"},{type:"Recommended"},{type:"BackToHome"}]}]}},604:function(e,t){e.exports={sections:[{title:"main",main:!0,modules:[{type:"Header"},{type:"Soundtrack"},{type:"Description"},{type:"Shop"},{type:"TravelShop"},{type:"SoundsIn"},{type:"BackToHome"}]}]}},605:function(e,t){e.exports={sections:[{title:"main",main:!0,modules:[{type:"Header"},{type:"Biography"},{type:"BasicInfo"},{type:"Gallery"},{type:"AwardsModuleList"},{type:"Shop"},{type:"TravelShop"},{type:"Curiosities"},{type:"Filmography"},{type:"BackToHome"}]}]}},606:function(e,t){e.exports={sections:[{title:"main",main:!0,modules:[{type:"Header"},{type:"Biography"},{type:"Shop"},{type:"TravelShop"},{type:"BasicInfo"},{type:"Gallery"},{type:"Video"},{type:"Curiosities"},{type:"Highligts"},{type:"InterpretedBySingle"},{type:"InterpretedBy"},{type:"BackToHome"}]}]}},607:function(e,t){e.exports={sections:[{title:"main",main:!0,modules:[{type:"Reference"},{type:"Gallery"},{type:"Video"},{type:"AppearsInSingle"},{type:"AppearsIn"},{type:"BackToHome"}]}]}},608:function(e,t){e.exports={sections:[{title:"main",main:!0,modules:[{type:"MovieHeader"},{type:"MovieHeaderSmall"},{type:"Overview"},{type:"Seasons"},{type:"Trailer"},{type:"BasicInfo"},{type:"Gallery"},{type:"AwardsModuleList"},{type:"Cast"},{type:"Shop"},{type:"TravelShop"},{type:"Recommended"},{type:"BackToHome"}]}]}},609:function(e,t){e.exports={sections:[{title:"main",main:!0,modules:[{type:"Header"},{type:"MusicShop"},{type:"Description"},{type:"Shop"},{type:"TravelShop"},{type:"Curiosities"},{type:"SongBelongToSingle"},{type:"SongBelongTo"},{type:"BackToHome"}]}]}},610:function(e,t){e.exports={sections:[{title:"main",main:!0,modules:[{type:"Header"},{type:"Description"},{type:"Shop"},{type:"TravelShop"},{type:"Specifications"},{type:"Gallery"},{type:"Video"},{type:"AppearsInSingle"},{type:"AppearsIn"},{type:"BackToHome"}]}]}},611:function(e,t){e.exports={sections:[{title:"main",main:!0,modules:[{type:"FullCuriosity"},{type:"Gallery"},{type:"Video"},{type:"AppearsInSingle"},{type:"AppearsIn"},{type:"BackToHome"}]}]}},612:function(e,t){e.exports={sections:[{title:"main",main:!0,modules:[{type:"Header"},{type:"Description"},{type:"Shop"},{type:"TravelShop"},{type:"Specifications"},{type:"Gallery"},{type:"Video"},{type:"Curiosities"},{type:"AppearsInSingle"},{type:"AppearsIn"},{type:"BackToHome"}]}]}},613:function(e,t){e.exports={sections:[{title:"main",main:!0,modules:[{type:"Header"},{type:"Description"},{type:"Shop"},{type:"TravelShop"},{type:"Specifications"},{type:"Gallery"},{type:"Curiosities"},{type:"AppearsInSingle"},{type:"AppearsIn"},{type:"BackToHome"}]}]}},614:function(e,t,n){"use strict";function o(e){return e&&"validate"in e}Object.defineProperty(t,"__esModule",{value:!0}),t.isValidatable=o},615:function(e,t,n){"use strict";var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r="function"==typeof Symbol&&"symbol"===o(Symbol.iterator)?function(e){return void 0===e?"undefined":o(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":o(e)},i=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),a=this&&this.__assign||Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++){t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},s=this&&this.__decorate||function(e,t,n,o){var i,a=arguments.length,s=a<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"===("undefined"==typeof Reflect?"undefined":r(Reflect))&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var c=e.length-1;c>=0;c--)(i=e[c])&&(s=(a<3?i(s):a>3?i(t,n,s):i(t,n))||s);return a>3&&s&&Object.defineProperty(t,n,s),s};Object.defineProperty(t,"__esModule",{value:!0});var c=n(2),u=n(22),p=n(18),l=n(16),h=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),n=t,t.prototype.getSubtitle=function(){return this.props.navigableSubtitle&&this.props.subtitle?c.createElement("div",{className:"subtitle"},c.createElement(p.NavigationContainer,{parent:this,columns:1},this.props.subtitle)):this.props.subtitle?c.createElement("div",{className:"subtitle"},this.props.subtitle):null},t.prototype.render=function(){var e=this.getSubtitle();return c.createElement("div",{className:"header cardModule"},c.createElement(p.CardAndCategory,{card:this.props.card}),c.createElement("div",{className:"rightPart"},c.createElement("div",{className:"info"},c.createElement("div",{className:"titleContainer"},c.createElement("p",{className:"title"},this.props.title),this.props.titleParenthesis?c.createElement("div",{className:"titleParenthesis"}," (",this.props.titleParenthesis,")"):null),e,this.props.categories?c.createElement("div",{className:"categories"},this.props.categories):null,this.props.time?c.createElement("div",{className:"time"},c.createElement("i",{className:"clock"}),c.createElement("span",null,this.props.time)):null,c.createElement("div",{className:"headerButtons"},c.createElement(p.NavigationContainer,{parent:this,columns:1,isDefault:!0,className:"likeButton genericBtn"},c.createElement("div",{className:"centeredContent"},c.createElement("i",{className:"icon like"}),c.createElement("span",null,u.Localize("CAROUSEL_CARD_SAVE"))))))))},t=n=s([l.statics({moduleName:"header",validate:function(e,t,o,r){var i=e.title,s=e.subtitle&&""!==e.subtitle?e.subtitle:null,p=null,h=null,f=null,d=!1;switch(e.type){case"movie":case"serie":case"chapter":var y=u.Helper.getContainer(e,"catalog");if(y&&y.data&&y.data[0]){var m=y.data[0];if(m.runtime){var v=m.runtime,g=Math.floor(v/3600);v%=3600;p=Math.floor(v/60)+" m",g>0&&(p=g+" h "+p)}m.year&&(h=""+y.data[0].year),m.genres&&m.genres.length>0&&(f=m.genres.join(", ")),m.director&&""!==m.director&&(s=m.director,d=!0)}}var E=l.navigable(n);return c.createElement(E,a({parent:o,isScrollable:!0,card:e,moduleType:t,title:i,subtitle:s,navigableSubtitle:d,time:p,titleParenthesis:h,categories:f},r))}})],t);var n}(c.PureComponent);t.Header=h},616:function(e,t,n){"use strict";var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++){t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},i=this&&this.__rest||function(e,t){var n={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.indexOf(o)<0&&(n[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var r=0,o=Object.getOwnPropertySymbols(e);r<o.length;r++)t.indexOf(o[r])<0&&(n[o[r]]=e[o[r]]);return n};Object.defineProperty(t,"__esModule",{value:!0});var a=n(2),s=n(16),c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.render=function(){var e=this.props,t=e.accept,n=e.acceptCharset,o=e.action,s=e.allowFullScreen,c=e.allowTransparency,u=e.alt,p=e.async,l=e.autoComplete,h=e.autoFocus,f=e.autoPlay,d=e.capture,y=e.cellPadding,m=e.cellSpacing,v=e.charSet,g=e.challenge,E=e.checked,C=e.cite,_=e.classID,S=e.cols,A=e.colSpan,T=e.content,b=e.controls,O=e.coords,I=e.crossOrigin,R=e.data,N=e.dateTime,L=e.defer,w=e.disabled,k=e.download,D=e.encType,P=e.form,M=e.formAction,x=e.formEncType,U=e.formMethod,B=e.formNoValidate,j=e.formTarget,H=e.frameBorder,F=e.headers,V=e.height,G=e.high,z=e.href,q=e.hrefLang,K=e.htmlFor,W=e.httpEquiv,Y=e.integrity,X=e.keyParams,J=e.keyType,$=e.kind,Z=e.label,Q=e.list,ee=e.loop,te=e.low,ne=e.manifest,oe=e.marginHeight,re=e.marginWidth,ie=e.max,ae=e.maxLength,se=e.media,ce=e.mediaGroup,ue=e.method,pe=e.min,le=e.minLength,he=e.multiple,fe=e.muted,de=e.name,ye=e.nonce,me=e.noValidate,ve=e.open,ge=e.optimum,Ee=e.pattern,Ce=e.placeholder,_e=e.playsInline,Se=e.poster,Ae=e.preload,Te=e.readOnly,be=e.rel,Oe=e.required,Ie=e.reversed,Re=e.rows,Ne=e.rowSpan,Le=e.sandbox,we=e.scope,ke=e.scoped,De=e.scrolling,Pe=e.seamless,Me=e.selected,xe=e.shape,Ue=e.size,Be=e.sizes,je=e.span,He=e.src,Fe=e.srcDoc,Ve=e.srcLang,Ge=e.srcSet,ze=e.start,qe=e.step,Ke=e.summary,We=e.target,Ye=e.type,Xe=e.useMap,Je=e.value,$e=e.width,Ze=e.wmode,Qe=e.wrap,et=e.defaultChecked,tt=e.defaultValue,nt=e.suppressContentEditableWarning,ot=e.accessKey,rt=e.contentEditable,it=e.contextMenu,at=e.dir,st=e.draggable,ct=e.hidden,ut=e.id,pt=e.lang,lt=e.spellCheck,ht=e.style,ft=e.tabIndex,dt=e.title,yt=e.inputMode,mt=e.is,vt=e.radioGroup,gt=e.role,Et=e.about,Ct=e.datatype,_t=e.inlist,St=e.prefix,At=e.property,Tt=e.resource,bt=e.vocab,Ot=e.autoCapitalize,It=e.autoCorrect,Rt=e.autoSave,Nt=e.color,Lt=e.itemProp,wt=e.itemScope,kt=e.itemType,Dt=e.itemID,Pt=e.itemRef,Mt=e.results,xt=e.security,Ut=e.unselectable,Bt=e.children,jt=e.dangerouslySetInnerHTML,Ht=e.onCopy,Ft=e.onCopyCapture,Vt=e.onCut,Gt=e.onCutCapture,zt=e.onPaste,qt=e.onPasteCapture,Kt=e.onCompositionEnd,Wt=e.onCompositionEndCapture,Yt=e.onCompositionStart,Xt=e.onCompositionStartCapture,Jt=e.onCompositionUpdate,$t=e.onCompositionUpdateCapture,Zt=e.onFocus,Qt=e.onFocusCapture,en=e.onBlur,tn=e.onBlurCapture,nn=e.onChange,on=e.onChangeCapture,rn=e.onInput,an=e.onInputCapture,sn=e.onReset,cn=e.onResetCapture,un=e.onSubmit,pn=e.onSubmitCapture,ln=e.onInvalid,hn=e.onInvalidCapture,fn=e.onLoad,dn=e.onLoadCapture,yn=e.onError,mn=e.onErrorCapture,vn=e.onKeyDown,gn=e.onKeyDownCapture,En=e.onKeyPress,Cn=e.onKeyPressCapture,_n=e.onKeyUp,Sn=e.onKeyUpCapture,An=e.onAbort,Tn=e.onAbortCapture,bn=e.onCanPlay,On=e.onCanPlayCapture,In=e.onCanPlayThrough,Rn=e.onCanPlayThroughCapture,Nn=e.onDurationChange,Ln=e.onDurationChangeCapture,wn=e.onEmptied,kn=e.onEmptiedCapture,Dn=e.onEncrypted,Pn=e.onEncryptedCapture,Mn=e.onEnded,xn=e.onEndedCapture,Un=e.onLoadedData,Bn=e.onLoadedDataCapture,jn=e.onLoadedMetadata,Hn=e.onLoadedMetadataCapture,Fn=e.onLoadStart,Vn=e.onLoadStartCapture,Gn=e.onPause,zn=e.onPauseCapture,qn=e.onPlay,Kn=e.onPlayCapture,Wn=e.onPlaying,Yn=e.onPlayingCapture,Xn=e.onProgress,Jn=e.onProgressCapture,$n=e.onRateChange,Zn=e.onRateChangeCapture,Qn=e.onSeeked,eo=e.onSeekedCapture,to=e.onSeeking,no=e.onSeekingCapture,oo=e.onStalled,ro=e.onStalledCapture,io=e.onSuspend,ao=e.onSuspendCapture,so=e.onTimeUpdate,co=e.onTimeUpdateCapture,uo=e.onVolumeChange,po=e.onVolumeChangeCapture,lo=e.onWaiting,ho=e.onWaitingCapture,fo=e.onClick,yo=e.onClickCapture,mo=e.onContextMenu,vo=e.onContextMenuCapture,go=e.onDoubleClick,Eo=e.onDoubleClickCapture,Co=e.onDrag,_o=e.onDragCapture,So=e.onDragEnd,Ao=e.onDragEndCapture,To=e.onDragEnter,bo=e.onDragEnterCapture,Oo=e.onDragExit,Io=e.onDragExitCapture,Ro=e.onDragLeave,No=e.onDragLeaveCapture,Lo=e.onDragOver,wo=e.onDragOverCapture,ko=e.onDragStart,Do=e.onDragStartCapture,Po=e.onDrop,Mo=e.onDropCapture,xo=e.onMouseDown,Uo=e.onMouseDownCapture,Bo=e.onMouseEnter,jo=e.onMouseLeave,Ho=e.onMouseMove,Fo=e.onMouseMoveCapture,Vo=e.onMouseOut,Go=e.onMouseOutCapture,zo=e.onMouseOver,qo=e.onMouseOverCapture,Ko=e.onMouseUp,Wo=e.onMouseUpCapture,Yo=e.onSelect,Xo=e.onSelectCapture,Jo=e.onTouchCancel,$o=e.onTouchCancelCapture,Zo=e.onTouchEnd,Qo=e.onTouchEndCapture,er=e.onTouchMove,tr=e.onTouchMoveCapture,nr=e.onTouchStart,or=e.onTouchStartCapture,rr=e.onScroll,ir=e.onScrollCapture,ar=e.onWheel,sr=e.onWheelCapture,cr=e.onAnimationStart,ur=e.onAnimationStartCapture,pr=e.onAnimationEnd,lr=e.onAnimationEndCapture,hr=e.onAnimationIteration,fr=e.onAnimationIterationCapture,dr=e.onTransitionEnd,yr=e.onTransitionEndCapture,mr=e.key,vr=(i(e,["accept","acceptCharset","action","allowFullScreen","allowTransparency","alt","async","autoComplete","autoFocus","autoPlay","capture","cellPadding","cellSpacing","charSet","challenge","checked","cite","classID","cols","colSpan","content","controls","coords","crossOrigin","data","dateTime","defer","disabled","download","encType","form","formAction","formEncType","formMethod","formNoValidate","formTarget","frameBorder","headers","height","high","href","hrefLang","htmlFor","httpEquiv","integrity","keyParams","keyType","kind","label","list","loop","low","manifest","marginHeight","marginWidth","max","maxLength","media","mediaGroup","method","min","minLength","multiple","muted","name","nonce","noValidate","open","optimum","pattern","placeholder","playsInline","poster","preload","readOnly","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","scrolling","seamless","selected","shape","size","sizes","span","src","srcDoc","srcLang","srcSet","start","step","summary","target","type","useMap","value","width","wmode","wrap","defaultChecked","defaultValue","suppressContentEditableWarning","accessKey","contentEditable","contextMenu","dir","draggable","hidden","id","lang","spellCheck","style","tabIndex","title","inputMode","is","radioGroup","role","about","datatype","inlist","prefix","property","resource","vocab","autoCapitalize","autoCorrect","autoSave","color","itemProp","itemScope","itemType","itemID","itemRef","results","security","unselectable","children","dangerouslySetInnerHTML","onCopy","onCopyCapture","onCut","onCutCapture","onPaste","onPasteCapture","onCompositionEnd","onCompositionEndCapture","onCompositionStart","onCompositionStartCapture","onCompositionUpdate","onCompositionUpdateCapture","onFocus","onFocusCapture","onBlur","onBlurCapture","onChange","onChangeCapture","onInput","onInputCapture","onReset","onResetCapture","onSubmit","onSubmitCapture","onInvalid","onInvalidCapture","onLoad","onLoadCapture","onError","onErrorCapture","onKeyDown","onKeyDownCapture","onKeyPress","onKeyPressCapture","onKeyUp","onKeyUpCapture","onAbort","onAbortCapture","onCanPlay","onCanPlayCapture","onCanPlayThrough","onCanPlayThroughCapture","onDurationChange","onDurationChangeCapture","onEmptied","onEmptiedCapture","onEncrypted","onEncryptedCapture","onEnded","onEndedCapture","onLoadedData","onLoadedDataCapture","onLoadedMetadata","onLoadedMetadataCapture","onLoadStart","onLoadStartCapture","onPause","onPauseCapture","onPlay","onPlayCapture","onPlaying","onPlayingCapture","onProgress","onProgressCapture","onRateChange","onRateChangeCapture","onSeeked","onSeekedCapture","onSeeking","onSeekingCapture","onStalled","onStalledCapture","onSuspend","onSuspendCapture","onTimeUpdate","onTimeUpdateCapture","onVolumeChange","onVolumeChangeCapture","onWaiting","onWaitingCapture","onClick","onClickCapture","onContextMenu","onContextMenuCapture","onDoubleClick","onDoubleClickCapture","onDrag","onDragCapture","onDragEnd","onDragEndCapture","onDragEnter","onDragEnterCapture","onDragExit","onDragExitCapture","onDragLeave","onDragLeaveCapture","onDragOver","onDragOverCapture","onDragStart","onDragStartCapture","onDrop","onDropCapture","onMouseDown","onMouseDownCapture","onMouseEnter","onMouseLeave","onMouseMove","onMouseMoveCapture","onMouseOut","onMouseOutCapture","onMouseOver","onMouseOverCapture","onMouseUp","onMouseUpCapture","onSelect","onSelectCapture","onTouchCancel","onTouchCancelCapture","onTouchEnd","onTouchEndCapture","onTouchMove","onTouchMoveCapture","onTouchStart","onTouchStartCapture","onScroll","onScrollCapture","onWheel","onWheelCapture","onAnimationStart","onAnimationStartCapture","onAnimationEnd","onAnimationEndCapture","onAnimationIteration","onAnimationIterationCapture","onTransitionEnd","onTransitionEndCapture","key"]),this.props.className);vr=vr?"navigableContainer "+vr:"navigableContainer",vr="fillParent "+vr;var gr={accept:t,acceptCharset:n,action:o,allowFullScreen:s,allowTransparency:c,alt:u,async:p,autoComplete:l,autoFocus:h,autoPlay:f,capture:d,cellPadding:y,cellSpacing:m,charSet:v,challenge:g,checked:E,cite:C,classID:_,cols:S,colSpan:A,content:T,controls:b,coords:O,crossOrigin:I,data:R,dateTime:N,defer:L,disabled:w,download:k,encType:D,form:P,formAction:M,formEncType:x,formMethod:U,formNoValidate:B,formTarget:j,frameBorder:H,headers:F,height:V,high:G,href:z,hrefLang:q,htmlFor:K,httpEquiv:W,integrity:Y,keyParams:X,keyType:J,kind:$,label:Z,list:Q,loop:ee,low:te,manifest:ne,marginHeight:oe,marginWidth:re,max:ie,maxLength:ae,media:se,mediaGroup:ce,method:ue,min:pe,minLength:le,multiple:he,muted:fe,name:de,nonce:ye,noValidate:me,open:ve,optimum:ge,pattern:Ee,placeholder:Ce,playsInline:_e,poster:Se,preload:Ae,readOnly:Te,rel:be,required:Oe,reversed:Ie,rows:Re,rowSpan:Ne,sandbox:Le,scope:we,scoped:ke,scrolling:De,seamless:Pe,selected:Me,shape:xe,size:Ue,sizes:Be,span:je,src:He,srcDoc:Fe,srcLang:Ve,srcSet:Ge,start:ze,step:qe,summary:Ke,target:We,type:Ye,useMap:Xe,value:Je,width:$e,wmode:Ze,wrap:Qe,defaultChecked:et,defaultValue:tt,suppressContentEditableWarning:nt,accessKey:ot,className:vr,contentEditable:rt,contextMenu:it,dir:at,draggable:st,hidden:ct,id:ut,lang:pt,spellCheck:lt,style:ht,tabIndex:ft,title:dt,inputMode:yt,is:mt,radioGroup:vt,role:gt,about:Et,datatype:Ct,inlist:_t,prefix:St,property:At,resource:Tt,vocab:bt,autoCapitalize:Ot,autoCorrect:It,autoSave:Rt,color:Nt,itemProp:Lt,itemScope:wt,itemType:kt,itemID:Dt,itemRef:Pt,results:Mt,security:xt,unselectable:Ut,children:Bt,dangerouslySetInnerHTML:jt,onCopy:Ht,onCopyCapture:Ft,onCut:Vt,onCutCapture:Gt,onPaste:zt,onPasteCapture:qt,onCompositionEnd:Kt,onCompositionEndCapture:Wt,onCompositionStart:Yt,onCompositionStartCapture:Xt,onCompositionUpdate:Jt,onCompositionUpdateCapture:$t,onFocus:Zt,onFocusCapture:Qt,onBlur:en,onBlurCapture:tn,onChange:nn,onChangeCapture:on,onInput:rn,onInputCapture:an,onReset:sn,onResetCapture:cn,onSubmit:un,onSubmitCapture:pn,onInvalid:ln,onInvalidCapture:hn,onLoad:fn,onLoadCapture:dn,onError:yn,onErrorCapture:mn,onKeyDown:vn,onKeyDownCapture:gn,onKeyPress:En,onKeyPressCapture:Cn,onKeyUp:_n,onKeyUpCapture:Sn,onAbort:An,onAbortCapture:Tn,onCanPlay:bn,onCanPlayCapture:On,onCanPlayThrough:In,onCanPlayThroughCapture:Rn,onDurationChange:Nn,onDurationChangeCapture:Ln,onEmptied:wn,onEmptiedCapture:kn,onEncrypted:Dn,onEncryptedCapture:Pn,onEnded:Mn,onEndedCapture:xn,onLoadedData:Un,onLoadedDataCapture:Bn,onLoadedMetadata:jn,onLoadedMetadataCapture:Hn,onLoadStart:Fn,onLoadStartCapture:Vn,onPause:Gn,onPauseCapture:zn,onPlay:qn,onPlayCapture:Kn,onPlaying:Wn,onPlayingCapture:Yn,onProgress:Xn,onProgressCapture:Jn,onRateChange:$n,onRateChangeCapture:Zn,onSeeked:Qn,onSeekedCapture:eo,onSeeking:to,onSeekingCapture:no,onStalled:oo,onStalledCapture:ro,onSuspend:io,onSuspendCapture:ao,onTimeUpdate:so,onTimeUpdateCapture:co,onVolumeChange:uo,onVolumeChangeCapture:po,onWaiting:lo,onWaitingCapture:ho,onClick:fo,onClickCapture:yo,onContextMenu:mo,onContextMenuCapture:vo,onDoubleClick:go,onDoubleClickCapture:Eo,onDrag:Co,onDragCapture:_o,onDragEnd:So,onDragEndCapture:Ao,onDragEnter:To,onDragEnterCapture:bo,onDragExit:Oo,onDragExitCapture:Io,onDragLeave:Ro,onDragLeaveCapture:No,onDragOver:Lo,onDragOverCapture:wo,onDragStart:ko,onDragStartCapture:Do,onDrop:Po,onDropCapture:Mo,onMouseDown:xo,onMouseDownCapture:Uo,onMouseEnter:Bo,onMouseLeave:jo,onMouseMove:Ho,onMouseMoveCapture:Fo,onMouseOut:Vo,onMouseOutCapture:Go,onMouseOver:zo,onMouseOverCapture:qo,onMouseUp:Ko,onMouseUpCapture:Wo,onSelect:Yo,onSelectCapture:Xo,onTouchCancel:Jo,onTouchCancelCapture:$o,onTouchEnd:Zo,onTouchEndCapture:Qo,onTouchMove:er,onTouchMoveCapture:tr,onTouchStart:nr,onTouchStartCapture:or,onScroll:rr,onScrollCapture:ir,onWheel:ar,onWheelCapture:sr,onAnimationStart:cr,onAnimationStartCapture:ur,onAnimationEnd:pr,onAnimationEndCapture:lr,onAnimationIteration:hr,onAnimationIterationCapture:fr,onTransitionEnd:dr,onTransitionEndCapture:yr,key:mr};return a.createElement("div",r({},gr),this.props.children?this.recursiveCloneChildren(this.props.children):null)},t.prototype.recursiveCloneChildren=function(e){var t=this;return this.props.propagateParent?a.Children.map(e,function(e,n){if(!e)return e;var o=r({},e.props),i=!1;return void 0==e.props?e:e.type&&o.parent?(o=r({},o,{parent:t}),i=!0,e.props&&e.props.children&&(i||(o.children=t.recursiveCloneChildren(e.props.children))),a.cloneElement(e,r({},o))):e}):e},t}(a.Component);c.defaultProps={propagateParent:!1},t.NavigationContainer=s.navigable(c)},617:function(e,t,n){"use strict";var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++){t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e};Object.defineProperty(t,"__esModule",{value:!0});var i=n(2),a=n(79),s=n(50),c=n(18),u=n(58),p=n(16),l=n(98);t.cardDetailInitialState={status:"LOADING"};var h=function(e){function n(n){var o=e.call(this,n)||this;return o.cardModules=[],o.state=t.cardDetailInitialState,o}return o(n,e),n.prototype.render=function(){return i.createElement("div",{className:"cardDetail fillParent"},i.createElement("div",{className:"bottomContainerTopButtons"},i.createElement("div",{className:"cardDetailBtn"},i.createElement(c.NavigationContainer,{key:"carouselClose",className:"bctButton close",parent:this,clickAction:function(){return""},columns:1}))),this.props.card?i.createElement(l.NavigableCardModuleList,{isDefault:!0,parent:this,columns:1,card:this.props.card,forceFirst:!0}):i.createElement(c.Loading,null))},n.prototype.closeAllCards=function(){console.log("CLOSE ALL CARDS"),this.props.uiActions.openSync()},n.prototype.componentDidUpdate=function(){this.props.card&&"DONE"!==this.state.status&&this.setState(r({},this.state,{status:"DONE"}))},n.prototype.addToArrayIfExists=function(e,t){t&&e.push(t)},n}(i.PureComponent);t.CardDetailClass=h;var f=function(e){return{uiActions:a.bindActionCreators(u.UIActions,e)}},d=function(e,t,n){return r({},e,n,t)};t.CardDetail=p.navigable(s.connect(void 0,f,d)(h))},618:function(e,t,n){"use strict";var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(22),a=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.render=function(){var e=this.props.card;if(e){var t=!1;e.image&&e.image.thumb&&(t=!0);var n=!t,o=!1,a=!1;switch(e.type){case"ost":case"song":t=!1,n=!0,o=!0,a=!0;break;case"quote":case"reference":case"trivia":t=!1,n=!1,o=!0}var s=i.Localize("CAROUSEL_ALIAS_"+e.type.toUpperCase())||e.type;return r.createElement("div",{className:"cardAndCategory"},r.createElement("div",{className:"image "+e.type,style:t?{backgroundImage:"url("+e.image.thumb+")",backgroundPosition:e.image.anchor_x+"% "+e.image.anchor_y+"%"}:void 0},n?r.createElement("div",{className:"icon"}):null,o?r.createElement("div",{className:"title"},e.title):null,a&&!n?r.createElement("div",{className:"subtitle"},e.subtitle):null),r.createElement("div",{className:"category"},s))}return null},t.defaultProps={card:null},t}(r.PureComponent);t.CardAndCategory=a},619:function(e,t,n){"use strict";var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(99),a=n(22),s=n(18),c=n(16),u=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.downAction=function(){t.scrollBox.scrollTop+=t.scrollBox.offsetHeight},t.upAction=function(){t.scrollBox.scrollTop-=t.scrollBox.offsetHeight},t}return o(t,e),t.prototype.render=function(){var e=this,t=void 0!==this.props.source&&void 0!==this.props.source.name&&""!==this.props.source.name,n=(i({full:t,scrollBox:!0}),this.props.source&&this.props.source.name?this.props.source.name:this.props.source&&this.props.source.url?this.props.source.url:null);return r.createElement("div",{className:"verticalScroll"},r.createElement("div",{className:"scrollBox",ref:function(t){t&&(e.scrollBox=t)}},this.props.children),n?r.createElement("div",{className:"source"},r.createElement("label",{className:"label"},a.Localize("SOURCE"),": "),r.createElement("label",{className:"text"},n)):null,r.createElement("div",{className:"btns"},r.createElement(s.DirectionButtonList,{parent:this,template:"horizontal",btns:[{direction:"up",action:this.upAction},{direction:"down",action:this.downAction}]})))},t}(r.PureComponent);t.VerticalScrollClass=u,t.VerticalScroll=c.navigable(u)},620:function(e,t,n){"use strict";var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(18),a=n(16),s=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.offset=0,t.showElements=function(){var e=[];if(t.props.children instanceof Array)for(var n=t.offset;n<t.props.itemsShown+t.offset&&n<t.props.children.length;n++)e.push(t.props.children[n]);return e},t.leftAction=function(){t.offset-=t.props.itemsShown,t.offset<0&&(t.offset=0),t.forceUpdate()},t.rightAction=function(){t.offset+=t.props.itemsShown,t.props.children instanceof Array&&t.offset+t.props.itemsShown>=t.props.children.length&&(t.offset=t.props.children.length-t.props.itemsShown),t.forceUpdate()},t}return o(t,e),t.prototype.render=function(){var e=this;return r.createElement("div",{className:"horizontalScroll"},r.createElement("div",{className:"scrollBox",ref:function(t){t&&(e.scrollBox=t)}},r.createElement(i.NavigationContainer,{parent:this,propagateParent:!0,className:"scrollBoxContent"},this.showElements())),r.createElement("div",{className:"btns"},r.createElement(i.DirectionButtonList,{parent:this,template:"vertical",btns:[{direction:"right",action:this.rightAction},{direction:"left",action:this.leftAction}]})))},t}(r.PureComponent);t.HorizontalScrollClass=s,t.HorizontalScroll=a.navigable(s)},621:function(e,t,n){"use strict";var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(16),a=n(18),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.render=function(){var e=this;return r.createElement("ul",{className:"directionButtonList "+this.props.template},this.props.btns.map(function(t,n){return r.createElement("li",{className:"btn",key:n},r.createElement(a.DirectionButton,{direction:t.direction,clickAction:t.action,parent:e,columns:"vertical"!==e.props.template?e.props.btns.length:1}))}))},t}(r.PureComponent);t.DirectionButtonListClass=s,t.DirectionButtonList=i.navigable(s)},622:function(e,t,n){"use strict";var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(99),a=n(16),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.render=function(){var e=i("directionButton",this.props.direction);return r.createElement("div",{className:e})},t}(r.PureComponent);t.DirectionButtonClass=s,t.DirectionButton=a.navigable(s)},623:function(e,t,n){"use strict";var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(99),a=n(16),s=n(22),c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.render=function(){switch(this.props.type){case"MORE":return r.createElement("div",{className:"miniCardButton fillParent more",onClick:this.props.clickAction},"+");case"SAVE":var e=i({icon:!0,like:!this.props.liked,liked:!!this.props.liked});return r.createElement("div",{className:"miniCardButton fillParent",onClick:this.props.clickAction},r.createElement("span",{className:e}),this.props.liked?s.Localize("CAROUSEL_CARD_SAVED"):s.Localize("CAROUSEL_CARD_SAVE"));default:return r.createElement("div",{className:"miniCardButton fillParent",onClick:this.props.clickAction})}},t}(r.PureComponent);t.MiniCardButtonClass=c,t.MiniCardButton=a.navigable(c)},624:function(e,t,n){"use strict";var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r="function"==typeof Symbol&&"symbol"===o(Symbol.iterator)?function(e){return void 0===e?"undefined":o(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":o(e)},i=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),a=this&&this.__assign||Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++){t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e};Object.defineProperty(t,"__esModule",{value:!0});var s=n(2),c=n(79),u=n(50),p=n(16),l=n(18),h=n(58),f=function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.getRelations=function(e){var t=[];if(e.relations instanceof Array)for(var n=0,o=0,r=e.relations;o<r.length;o++){var i=r[o];if(3==n)break;var a=i;switch(a.content_type){case"home_deco":var s=i;t.push.apply(t,s.data)}n++}return t},t}return i(n,e),n.prototype.shouldComponentUpdate=function(e){return r(this.props.elements)!==r(e.elements)||!(!e.elements||e.elements.length===this.props.elements.length)},n.prototype.componentWillUpdate=function(e){this.props.wasSelectedOnChangeScene&&(this.props.setNodeById&&this.props.idx&&this.props.setNodeById(this.props.idx),void 0!==this.props.setSelectedOnSceneChange&&this.props.elements.length>0&&this.props.setSelectedOnSceneChange(!1))},n.prototype.render=function(){var e=this;return console.log("Elements: ",this.props.elements),s.createElement("ul",{className:"miniCardList"},this.props.elements.map(function(t,n,o){return e.element({el:t,key:t.card_id+"#"+t.version,count:o.length,index:n,parent:parent})}))},n.prototype.element=function(e){var n=e.el,o=e.key,r=(e.count,e.index),i=(e.parent,e.el),a=this.getRelations(i),c=[s.createElement(l.MiniCard,{focusChainClass:"childFocused",activeGroupClass:"activeGroup",groupName:(n.card_id+""+n.version).toString(),element:i,parent:this,forceFirst:!0,forceOrder:r,clickActionMore:this.clickActionMore.bind(this)(i),clickActionLike:this.clickActionLike.bind(this)(i),onFocusCallback:this.onFocusCallback.bind(this)(i),key:i.card_id+"#"+i.version,id:""+o,isScrollable:!0,navClass:"scrollable"})];return a.length>0&&c.push(s.createElement(t.MiniCardList,{elements:a,movieId:this.props.movieId,getMovieTime:this.props.getMovieTime,parent:this,columns:1,forceOrder:r+1,groupName:"MiniCardList",setSelectedOnSceneChange:this.props.setSelectedOnSceneChange,wasSelectedOnChangeScene:this.props.wasSelectedOnChangeScene})),c},n.prototype.clickActionLike=function(e){var t=this;return function(n){var o=n||e;o&&(console.log("LIKE",o.card_id),t.props.userActions.likeCard(o).then(function(){console.log("Liked success")}))}},n.prototype.clickActionMore=function(e){var t=this;return function(n){var o=n||e;o&&(console.log("Card clicked",o),t.props.uiActions.openCard(o.card_id,"offmovie"))}},n.prototype.onFocusCallback=function(e){return function(e){}},n}(s.Component);t.MiniCardListClass=f;var d=function(e){return{uiActions:c.bindActionCreators(h.UIActions,e)}},y=function(e,t,n){return a({},e,n,t)};t.MiniCardList=u.connect(void 0,d,y,{withRef:!0})(p.navigable(f))},625:function(e,t,n){"use strict";var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(16),a=n(22),s=n(18),c=n(99),u=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.miniCard=function(){return r.createElement("div",{className:"cardLeft",onMouseOver:function(){return t.props.setNodeById(t.props.idx)}},r.createElement(s.CardAndCategory,{card:t.props.element}))},t.expandedInfo=function(){var e=t.expandedInfoText();return r.createElement("div",{className:"expandedInfoContainer"},r.createElement("div",{className:"expandedInfo"},r.createElement("div",{className:"expandedInfoInside"},r.createElement("div",{className:"text"},e),r.createElement("div",{className:"btn"},t.button("MORE")),r.createElement("div",{className:"btn"},t.button("SAVE")))))},t.expandedInfoText=function(){var e,n="",o=a.Helper.getContainer(t.props.element,"text");switch(void 0!==o&&o.data.length>0&&(n=o.data[0].text),t.props.element.type){case"quote":case"reference":e=r.createElement("div",{className:"text alone"},n);break;case"character":var i=a.Helper.getRelation(t.props.element.relations,"played_by"),s=i;if(s&&s.data instanceof Array&&s.data.length>0){var c=s.data[0].from,u=t.props.element.title;if(void 0!==c){t.openCard=c,void 0!==c.title&&(u=c.title+" as "+u);var p=a.Helper.getContainer(c,"text");void 0!==p&&p.data.length>0&&(n=p.data[0].text)}e=r.createElement("div",{className:"text"},r.createElement("div",{className:"title"},u),r.createElement("div",{className:"desc"},n));break}case"song":e=r.createElement("div",{className:"text"});break;default:e=r.createElement("div",{className:"text"},r.createElement("div",{className:"title"},t.props.element.title),r.createElement("div",{className:"desc"},n))}return e},t.button=function(e){var n=function(){t.props.clickActionMore(t.openCard)},o=function(){t.props.clickActionLike(t.openCard)};return r.createElement(s.MiniCardButton,{clickAction:"SAVE"===e?o:n,parent:t,columns:1,groupName:t.props.groupName,type:e})},t}return o(t,e),t.prototype.render=function(){var e=c({minicard:!0,relation:!1});return r.createElement("li",{id:this.props.id},r.createElement("div",{className:e},"",this.miniCard(),this.expandedInfo()))},t.prototype.componentWillMount=function(){this.openCard=this.props.element},t}(r.PureComponent);t.MiniCardClass=u,t.MiniCard=i.navigable(u)},626:function(e,t,n){"use strict";var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.render=function(){return r.createElement("div",{className:"fillParent",style:{position:"relative"}},r.createElement("div",{className:"spinner"}))},t}(r.PureComponent);t.Loading=i},627:function(e,t,n){"use strict";var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r="function"==typeof Symbol&&"symbol"===o(Symbol.iterator)?function(e){return void 0===e?"undefined":o(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":o(e)},i=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),a=this&&this.__assign||Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++){t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},s=this&&this.__decorate||function(e,t,n,o){var i,a=arguments.length,s=a<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"===("undefined"==typeof Reflect?"undefined":r(Reflect))&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var c=e.length-1;c>=0;c--)(i=e[c])&&(s=(a<3?i(s):a>3?i(t,n,s):i(t,n))||s);return a>3&&s&&Object.defineProperty(t,n,s),s};Object.defineProperty(t,"__esModule",{value:!0});var c=n(2),u=n(16),p=n(22),l=n(18),h=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),n=t,t.prototype.render=function(){var e=this.getTitle();return c.createElement("div",{className:"cardModuleText cardModule"},c.createElement("div",{className:"container"},c.createElement(l.VerticalScroll,{source:this.props.textData?this.props.textData.source:void 0,parent:this},e?c.createElement("div",{className:"cardTitle"},e):null,c.createElement("div",{className:"cardText"},this.props.textData.text))))},t.prototype.getTitle=function(){if(void 0===this.props.container)return"";switch(this.props.container.content_type){case"biography":return p.Localize("BIOGRAPHY");case"overview":return p.Localize("OVERVIEW");case"curiosity":case"reference":return p.Localize("CURIOSITY_TITLE");case"quote":case"reference":case"description":default:return null}},t=n=s([u.statics({moduleName:"text",validate:function(e,t,o,r){var i=p.Helper.getContainer(e,"text");if(void 0!==i&&void 0!==i.data&&i.data.length>0){var s=u.navigable(n);return c.createElement(s,a({container:i,textData:i.data[0],parent:o,isScrollable:!0,card:e,moduleType:t},r))}return null}})],t);var n}(c.PureComponent);t.Text=h},628:function(e,t,n){"use strict";var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r="function"==typeof Symbol&&"symbol"===o(Symbol.iterator)?function(e){return void 0===e?"undefined":o(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":o(e)},i=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),a=this&&this.__decorate||function(e,t,n,o){var i,a=arguments.length,s=a<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"===("undefined"==typeof Reflect?"undefined":r(Reflect))&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var c=e.length-1;c>=0;c--)(i=e[c])&&(s=(a<3?i(s):a>3?i(t,n,s):i(t,n))||s);return a>3&&s&&Object.defineProperty(t,n,s),s};Object.defineProperty(t,"__esModule",{value:!0});var s=n(2),c=n(22),u=n(18),p=n(16),l=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.getTitle=function(){switch(t.props.container.content_type){case"specs":return c.Localize("SPECS");case"basic_data":default:return c.Localize("BASIC_DATA")}},t}return i(t,e),n=t,t.prototype.render=function(){return s.createElement("div",{className:"cardModuleTable cardModule"},s.createElement("div",{className:"container"},s.createElement(u.VerticalScroll,{parent:this},s.createElement("div",{className:"cardTitle"},this.getTitle()),s.createElement("div",{className:"table"},s.createElement("table",null,s.createElement("tbody",null,this.props.container.data.map(function(e,t){return s.createElement("tr",{key:t},s.createElement("td",null,e.text),s.createElement("td",null,e.value))})))))))},t=n=a([p.statics({moduleName:"table",validate:function(e,t,o,r){var i=c.Helper.getContainer(e,"listing");if(i&&i.data&&i.data.length>0){var a=p.navigable(n);return s.createElement(a,{container:i,parent:o,isScrollable:!0,card:e,moduleType:t})}return null}})],t);var n}(s.PureComponent);t.Table=l},629:function(e,t,n){"use strict";var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r="function"==typeof Symbol&&"symbol"===o(Symbol.iterator)?function(e){return void 0===e?"undefined":o(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":o(e)},i=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),a=this&&this.__decorate||function(e,t,n,o){var i,a=arguments.length,s=a<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"===("undefined"==typeof Reflect?"undefined":r(Reflect))&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var c=e.length-1;c>=0;c--)(i=e[c])&&(s=(a<3?i(s):a>3?i(t,n,s):i(t,n))||s);return a>3&&s&&Object.defineProperty(t,n,s),s};Object.defineProperty(t,"__esModule",{value:!0});var s=n(2),c=n(22),u=n(18),p=n(16),l=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.getList=function(){switch(t.props.moduleType){case"Gallery":return t.getGalleryList();case"Shop":case"TravelShop":return t.getShopList();case"Filmography":return t.getFilmographyList();case"Cast":return t.getCastList();case"AppearsInLocation":case"CompleteTheDeco":return t.getRelSingleList();case"Seasons":return t.getSeasonList()}},t.getGalleryList=function(){if(t.props.container){return t.props.container.data.map(function(e,n){return s.createElement(u.NavigationContainer,{key:t.props.container.content_type+"_show_"+n,parent:t,forceOrder:n%t.props.itemsShown,columns:2,className:"horizontalElement listElement focusable"},s.createElement("img",{src:e.thumb}))})}return null},t.getShopList=function(){if(t.props.container){return t.props.container.data.map(function(e,n){return t.getGenericElement(e.price.toString()+e.currency,e.image,n)})}return null},t.getFilmographyList=function(){if(t.props.container){return t.props.container.data.map(function(e,n){return t.getGenericElement(e.from.title,e.from.image?e.from.image.thumb:null,n)})}return null},t.getCastList=function(){if(t.props.container){return t.props.container.data.filter(function(e){return"plays"==e.rel_type&&null!==e.from.image}).map(function(e,n){return t.getGenericElement(e.from.title,e.from.image.thumb,n)})}return null},t.getRelSingleList=function(){if(t.props.container){return t.props.container.data.map(function(e,n){return t.getGenericElement(e.title,e.image.thumb,n)})}return null},t.getSeasonList=function(){if(t.props.container){return t.props.container.data.map(function(e,n){return t.getGenericElement("Season "+e.season_index,e.image.thumb,n)})}return null},t.getGenericElement=function(e,n,o){return s.createElement(u.NavigationContainer,{key:t.props.container.content_type+"_show_"+o,parent:t,forceOrder:o%t.props.itemsShown,columns:2,className:"horizontalElement listElement"},s.createElement("div",{className:"image focusable"},s.createElement("img",{src:n})),s.createElement("div",{className:"title focusable"},e))},t.getTitle=function(){switch(t.props.container.content_type){case"gallery":return c.Localize("GALLERY");default:return null}},t}return i(t,e),n=t,t.getContainer=function(e,t){switch(console.log("Filmography card: ",e),t){case"Gallery":return c.Helper.getContainer(e,"image");case"Shop":return{content_type:"products",data:e.products,type:"listing"};case"TravelShop":return{content_type:"products",data:e.products,type:"listing"};case"Filmography":return c.Helper.getRelation(e.relations,"filmography","content_type");case"Cast":return c.Helper.getRelation(e.relations,"casting","content_type");case"Seasons":return c.Helper.getContainer(e,"seasons");case"AppearsInLocation":return c.Helper.getRelation(e.relations,"filmed_in","content_type");case"CompleteTheDeco":return c.Helper.getRelation(e.relations,"home_deco","content_type");default:return}},t.prototype.render=function(){var e=this.getTitle();return s.createElement("div",{className:"cardModuleList cardModule"},s.createElement("div",{className:"container"},s.createElement("div",{className:"cardTitle"},e),s.createElement("div",{className:"listContent"},s.createElement(u.HorizontalScroll,{parent:this,uniqueId:this.props.container.content_type,itemsShown:this.props.itemsShown},this.getList()))))},t=n=a([p.statics({moduleName:"list",validate:function(e,t,o,r){var i=n.getContainer(e,t);if(void 0!==i&&void 0!==i.data&&i.data.length>0){var a=p.navigable(n);return s.createElement(a,{itemsShown:2,container:i,parent:o,isScrollable:!0,card:e,moduleType:t})}return null}})],t);var n}(s.PureComponent);t.List=l},630:function(e,t,n){"use strict";var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r="function"==typeof Symbol&&"symbol"===o(Symbol.iterator)?function(e){return void 0===e?"undefined":o(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":o(e)},i=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),a=this&&this.__decorate||function(e,t,n,o){var i,a=arguments.length,s=a<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"===("undefined"==typeof Reflect?"undefined":r(Reflect))&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var c=e.length-1;c>=0;c--)(i=e[c])&&(s=(a<3?i(s):a>3?i(t,n,s):i(t,n))||s);return a>3&&s&&Object.defineProperty(t,n,s),s};Object.defineProperty(t,"__esModule",{value:!0});var s=n(2),c=n(22),u=n(18),p=n(16),l=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.getTitle=function(){return Localize("AWARDS")},t}return i(t,e),n=t,t.prototype.render=function(){return s.createElement("div",{className:"cardModuleAwards cardModule"},s.createElement("div",{className:"container"},s.createElement(u.VerticalScroll,{parent:this},s.createElement("div",{className:"cardTitle"},this.getTitle()),s.createElement("div",{className:"awards"},s.createElement("table",null,s.createElement("tbody",null,this.props.container.data.map(function(e,t){var n=e.winner instanceof Array&&e.winner.length>0?e.winner.length:0,o=e.nominee instanceof Array&&e.nominee.length>0?e.nominee.length:0,r=o>0?o+" "+(o>1?Localize("NOMINEE_PLURAL"):Localize("NOMINEE_SINGULAR")):"",i=n>0?n+" "+(n>1?Localize("WINNER_PLURAL"):Localize("WINNER_SINGULAR"))+(o>0?" / "+r:""):r;return s.createElement("tr",{key:t},s.createElement("td",null,s.createElement("table",null,s.createElement("tbody",null,s.createElement("tr",{key:"name",className:"awardName"},s.createElement("td",null,e.title)),s.createElement("tr",{key:"num",className:"awardNums"},s.createElement("td",null,i))))))})))))))},t=n=a([p.statics({moduleName:"awards",validate:function(e,t,o,r){var i=c.Helper.getContainer(e,"awards");if(i&&i.data&&i.data.length>0){var a=p.navigable(n);return s.createElement(a,{container:i,parent:o,isScrollable:!0,card:e,moduleType:t})}return null}})],t);var n}(s.PureComponent);t.Awards=l},631:function(e,t,n){"use strict";var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r="function"==typeof Symbol&&"symbol"===o(Symbol.iterator)?function(e){return void 0===e?"undefined":o(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":o(e)},i=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),a=this&&this.__assign||Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++){t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},s=this&&this.__decorate||function(e,t,n,o){var i,a=arguments.length,s=a<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"===("undefined"==typeof Reflect?"undefined":r(Reflect))&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,o);else for(var c=e.length-1;c>=0;c--)(i=e[c])&&(s=(a<3?i(s):a>3?i(t,n,s):i(t,n))||s);return a>3&&s&&Object.defineProperty(t,n,s),s};Object.defineProperty(t,"__esModule",{value:!0});var c=n(2),u=n(22),p=n(16),l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),n=t,t.prototype.render=function(){var e=this.getTitle(),t=this.props.mapData,n=t.latitude,o=t.longitude,r=t.zoom,i="https://maps.googleapis.com/maps/api/staticmap?center="+n+","+o+"&size=300x168",a=parseInt(""+r,10);return a&&(i+="&zoom="+a),c.createElement("div",{className:"cardModuleMap cardModule"},c.createElement("div",{className:"container"},e?c.createElement("div",{className:"cardTitle"},e):null,c.createElement("div",{className:"map"},c.createElement("img",{src:i,className:"mapThumbnail"}))))},t.prototype.getTitle=function(){return void 0===this.props.container?"":u.Localize("LOCATION")},t=n=s([p.statics({moduleName:"map",validate:function(e,t,o,r){console.log("[Map] card: ",e);var i=u.Helper.getContainer(e,"map");if(void 0!==i&&void 0!==i.data&&i.data.length>0&&i.data[0].latitude&&i.data[0].longitude){var s=p.navigable(n);return c.createElement(s,a({},r,{container:i,mapData:i.data[0],parent:o,card:e,moduleType:t}))}return null}})],t);var n}(c.PureComponent);t.Map=l},632:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(273);t.cardModuleClasses={Header:o.Header,ButtonHeader:o.Header,MovieHeader:o.Header,Description:o.Text,Biography:o.Text,Reference:o.Text,FullCuriosity:o.Text,Overview:o.Text,Gallery:o.List,Shop:o.List,TravelShop:o.List,Directors:o.List,Seasons:o.List,Filmography:o.List,Cast:o.List,AppearsInLocation:o.List,CompleteTheDeco:o.List,Specifications:o.Table,BasicInfo:o.Table,AwardsModuleList:o.Awards,MapModule:o.Map}},633:function(e,t,n){"use strict";var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++){t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e};Object.defineProperty(t,"__esModule",{value:!0});var i=n(2),a=n(18),s=n(16),c=function(e){function t(){var t=e.call(this)||this;return t.state={status:"LOADING",card:void 0},t}return o(t,e),t.prototype.componentDidMount=function(){var e=this;this.state&&"LOADING"===this.state.status&&(null!=this.props.version?DiveAPI.getCardVersion({cardId:this.props.cardId,version:this.props.version,products:!0}).then(function(t){console.log("[card] "+t.title+": ",t),e.setState(r({},e.state,{status:"LOADED",card:t}))}):DiveAPI.getCard({cardId:this.props.cardId,products:!0}).then(function(t){console.log("[card] "+t.title+": ",t),e.setState(r({},e.state,{status:"LOADED",card:t}))}))},t.prototype.render=function(){return this.state&&"LOADED"===this.state.status?i.createElement(a.CardDetail,{parent:this,card:this.state.card,columns:1,navClass:"cardDetailNav",isDefault:!0}):i.createElement(a.Loading,null)},t}(i.PureComponent);t.CardDetailContainerClass=c,t.CardDetailContainer=s.navigable(c)},634:function(e,t,n){"use strict";var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(18),a=function(e){function t(t){var n=e.call(this,t)||this;return n.state={hidden:!1},n}return o(t,e),t.prototype.render=function(){return this.state&&this.state.hidden?null:this.getChildren()},t.prototype.getChildren=function(){var e=this;return r.createElement("div",{className:"bottomMessage fillParent"},r.createElement(i.NavigationContainer,{modal:!0,parent:this.props.navigationParent,isDefault:!0,propagateParent:!0,columns:1},r.createElement("div",{className:"messageContainer"},r.createElement("div",{className:"closeContainer"},r.createElement(i.NavigationContainer,{className:"carouselButton carouselClose",parent:this,isDefault:!0,columns:1,onClick:function(){e.setState({hidden:!0})}})),this.props.children)))},t}(r.PureComponent);t.BottomOverlayMessage=a},635:function(e,t,n){"use strict";var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),r=this&&this.__assign||Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++){t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e};Object.defineProperty(t,"__esModule",{value:!0});var i=n(2),a=n(50),s=n(79),c=n(16),u=n(18),p=n(58),l=n(22),h=n(263),f=n(98),d=function(e){function t(t){var n=e.call(this,t)||this;return n.chunkRequested=!1,n.currentSceneText=l.Localize("CURRENT_SCENE"),n.getState=function(){return n.props.state},n.state={rewinded:!1},n.closeCarousel=n.closeCarousel.bind(n),n.getCurrentTime=n.getCurrentTime.bind(n),n.adMessageContent=i.createElement("div",{key:"adMessageContent",className:"fillParent adMessage carouselMessageContent"},i.createElement("div",{className:"adMessageLeft"},i.createElement("h1",null,l.Localize("PIZZA_OR_POP_CORN")),i.createElement("p",{className:"text1"},l.Localize("WE_RECOMMEND")),i.createElement("p",{className:"text2"},l.Localize("MAKE_POP_CORN"))),i.createElement("div",{className:"adMessageRight"},i.createElement("h1",null,l.Localize("TVGRID_COMMERCIAL_TXT")))),n.endMessageContent=i.createElement("div",{key:"endMessageContent",className:"fillParent endMessage carouselMessageContent centeredMessage"},i.createElement("div",{className:"messageCenter"},i.createElement("h1",null,l.Localize("EVERYTHING_END")),i.createElement("p",{className:"text1"},l.Localize("MOVIE_ENDED")),i.createElement("div",{className:"buttonsContainer"},i.createElement(u.NavigationContainer,{className:"genericBtn",parent:n,isDefault:!0,columns:1,key:"messageCloseCarousel",onClick:function(){n.props.uiActions.open({top:"TV",bottom:"GRID"})}},l.Localize("OKAY"))))),n.offMessageContent=i.createElement("div",{key:"offMessageContent",className:"fillParent offMessageContent carouselMessageContent centeredMessage"},i.createElement("div",{className:"messageCenter"},i.createElement("h1",null,l.Localize("EVERYTHING_END")),i.createElement("p",{className:"text1"},l.Localize("MOVIE_OFF")),i.createElement("div",{className:"buttonsContainer"},i.createElement(u.NavigationContainer,{className:"genericBtn",key:"messageCloseCarousel",parent:n,isDefault:!0,columns:1,onClick:function(){n.props.uiActions.open({top:"TV",bottom:"GRID"})}},l.Localize("OKAY"))))),n.readyMessageContent=i.createElement("div",{key:"offMessageContent",className:"fillParent readyMessageContent carouselMessageContent centeredMessage"},i.createElement("div",{className:"messageCenter"},i.createElement("h1",null,l.Localize("LIGHTS_CAMERA")),i.createElement("p",{className:"text1"},l.Localize("WE_ARE_LOADING")))),n}return o(t,e),t.prototype.componentWillUpdate=function(e){},t.prototype.componentWillMount=function(){this.props.syncChannel(),this.activeFilters=[this.allCategoriesFilter]},t.prototype.componentWillUnmount=function(){},t.prototype.render=function(){var e=this,t=void 0!==this.props.state.cards?this.props.state.cards:[];return t=t.filter(function(e){return e&&e.type&&h.SUPPORTED_CARD_TYPES.indexOf(e.type)>-1&&"person"!==e.type}),i.createElement("div",{className:"containerCarousel fillParent"},i.createElement(u.NavigationContainer,{key:"buttonContainer",ref:function(t){t&&(e.buttonsContainer=t.getWrappedInstance().refComponent)},propagateParent:!1,parent:this,forceFirst:!0,columns:1},this.buttonsContainer?this.getButtons():""),i.createElement("div",{className:"cards"},0===t.length?i.createElement(u.Loading,null):i.createElement(u.MiniCardList,{elements:t,movieId:this.getState().movieId,getMovieTime:this.getCurrentTime,parent:this,columns:1,groupName:"MiniCardList",setSelectedOnSceneChange:this.props.setSelectedOnSceneChange,wasSelectedOnChangeScene:this.props.state.selectedOnSceneChange})),this.getMessageForCarousel())},t.prototype.getCurrentTime=function(){return this.props.state.currentTime},t.prototype.getButtons=function(){var e=this.props.state.currentTime;Math.floor(e/3600);e%=3600;var t=(Math.floor(e/60),parseInt((e%60).toFixed(0),10),7);!1===this.state.rewinded&&t--;var n=[];return n.push(i.createElement(u.NavigationContainer,{key:"carouselClose",className:"carouselButton bctButton close",forceOrder:0,parent:this.buttonsContainer,onClick:this.closeCarousel})),i.createElement("div",{id:"carouselButtons",className:"bottomContainerTopButtons"},n)},t.prototype.closeCarousel=function(){this.props.uiActions.open({top:"TV",bottom:"GRID"})},t.prototype.getMessageForCarousel=function(){var e,t=this.getState().channelStatus;if("paused"===t?e=this.adMessageContent:"end"===t?e=this.endMessageContent:"off"===t?e=this.offMessageContent:"ready"===t&&(e=this.readyMessageContent),e)return i.createElement(f.BottomOverlayMessage,{key:"bottomMessage#"+this.props.state.timeMovieSynced+"#"+t,navigationParent:this},e)},t.prototype.allCategoriesFilter=function(){return!0},t}(i.PureComponent);t.CarouselClass=d;var y=function(e){return{state:r({},e.carousel)}},m=function(e){return r({},s.bindActionCreators(p.SyncActions,e),{uiActions:s.bindActionCreators(p.UIActions,e)})};t.Carousel=c.navigable(a.connect(y,m)(d))},98:function(e,t,n){"use strict";function o(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),o(n(523)),o(n(588)),o(n(589)),o(n(633)),o(n(634)),o(n(635))}},[310])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,